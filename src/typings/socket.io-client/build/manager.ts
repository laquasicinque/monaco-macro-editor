
    export default [
      "socket.io-client\\build\\manager.d.ts",
      "import{Socket,SocketOptions}from\"./socket\";import{Packet}from\"socket.io-parser\";import{DefaultEventsMap,EventsMap,StrictEventEmitter}from\"./typed-events\";interface EngineOptions{/**\n * The host that we're connecting to. Set from the URI passed when connecting\n */\nhost:string;/**\n * The hostname for our connection. Set from the URI passed when connecting\n */\nhostname:string;/**\n * If this is a secure connection. Set from the URI passed when connecting\n */\nsecure:boolean;/**\n * The port for our connection. Set from the URI passed when connecting\n */\nport:string;/**\n * Any query parameters in our uri. Set from the URI passed when connecting\n */\nquery:{[key:string]:string;};/**\n * `http.Agent` to use, defaults to `false` (NodeJS only)\n */\nagent:string|boolean;/**\n * Whether the client should try to upgrade the transport from\n * long-polling to something better.\n * @default true\n */\nupgrade:boolean;/**\n * Forces JSONP for polling transport.\n */\nforceJSONP:boolean;/**\n * Determines whether to use JSONP when necessary for polling. If\n * disabled (by settings to false) an error will be emitted (saying\n * \"No transports available\") if no other transports are available.\n * If another transport is available for opening a connection (e.g.\n * WebSocket) that transport will be used instead.\n * @default true\n */\njsonp:boolean;/**\n * Forces base 64 encoding for polling transport even when XHR2\n * responseType is available and WebSocket even if the used standard\n * supports binary.\n */\nforceBase64:boolean;/**\n * Enables XDomainRequest for IE8 to avoid loading bar flashing with\n * click sound. default to `false` because XDomainRequest has a flaw\n * of not sending cookie.\n * @default false\n */\nenablesXDR:boolean;/**\n * The param name to use as our timestamp key\n * @default 't'\n */\ntimestampParam:string;/**\n * Whether to add the timestamp with each transport request. Note: this\n * is ignored if the browser is IE or Android, in which case requests\n * are always stamped\n * @default false\n */\ntimestampRequests:boolean;/**\n * A list of transports to try (in order). Engine.io always attempts to\n * connect directly with the first one, provided the feature detection test\n * for it passes.\n * @default ['polling','websocket']\n */\ntransports:string[];/**\n * The port the policy server listens on\n * @default 843\n */\npolicyPost:number;/**\n * If true and if the previous websocket connection to the server succeeded,\n * the connection attempt will bypass the normal upgrade process and will\n * initially try websocket. A connection attempt following a transport error\n * will use the normal upgrade process. It is recommended you turn this on\n * only when using SSL/TLS connections, or if you know that your network does\n * not block websockets.\n * @default false\n */\nrememberUpgrade:boolean;/**\n * Are we only interested in transports that support binary?\n */\nonlyBinaryUpgrades:boolean;/**\n * Timeout for xhr-polling requests in milliseconds (0) (only for polling transport)\n */\nrequestTimeout:number;/**\n * Transport options for Node.js client (headers etc)\n */\ntransportOptions:Object;/**\n * (SSL) Certificate, Private key and CA certificates to use for SSL.\n * Can be used in Node.js client environment to manually specify\n * certificate information.\n */\npfx:string;/**\n * (SSL) Private key to use for SSL. Can be used in Node.js client\n * environment to manually specify certificate information.\n */\nkey:string;/**\n * (SSL) A string or passphrase for the private key or pfx. Can be\n * used in Node.js client environment to manually specify certificate\n * information.\n */\npassphrase:string;/**\n * (SSL) Public x509 certificate to use. Can be used in Node.js client\n * environment to manually specify certificate information.\n */\ncert:string;/**\n * (SSL) An authority certificate or array of authority certificates to\n * check the remote host against.. Can be used in Node.js client\n * environment to manually specify certificate information.\n */\nca:string|string[];/**\n * (SSL) A string describing the ciphers to use or exclude. Consult the\n * [cipher format list]\n * (http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT) for\n * details on the format.. Can be used in Node.js client environment to\n * manually specify certificate information.\n */\nciphers:string;/**\n * (SSL) If true, the server certificate is verified against the list of\n * supplied CAs. An 'error' event is emitted if verification fails.\n * Verification happens at the connection level, before the HTTP request\n * is sent. Can be used in Node.js client environment to manually specify\n * certificate information.\n */\nrejectUnauthorized:boolean;/**\n * Headers that will be passed for each request to the server (via xhr-polling and via websockets).\n * These values then can be used during handshake or for special proxies.\n */\nextraHeaders?:{[header:string]:string;};/**\n * Whether to include credentials (cookies, authorization headers, TLS\n * client certificates, etc.) with cross-origin XHR polling requests\n * @default false\n */\nwithCredentials:boolean;/**\n * Whether to automatically close the connection whenever the beforeunload event is received.\n * @default true\n */\ncloseOnBeforeunload:boolean;}export interface ManagerOptions extends EngineOptions{/**\n * Should we force a new Manager for this connection?\n * @default false\n */\nforceNew:boolean;/**\n * Should we multiplex our connection (reuse existing Manager) ?\n * @default true\n */\nmultiplex:boolean;/**\n * The path to get our client file from, in the case of the server\n * serving it\n * @default '/socket.io'\n */\npath:string;/**\n * Should we allow reconnections?\n * @default true\n */\nreconnection:boolean;/**\n * How many reconnection attempts should we try?\n * @default Infinity\n */\nreconnectionAttempts:number;/**\n * The time delay in milliseconds between reconnection attempts\n * @default 1000\n */\nreconnectionDelay:number;/**\n * The max time delay in milliseconds between reconnection attempts\n * @default 5000\n */\nreconnectionDelayMax:number;/**\n * Used in the exponential backoff jitter when reconnecting\n * @default 0.5\n */\nrandomizationFactor:number;/**\n * The timeout in milliseconds for our connection attempt\n * @default 20000\n */\ntimeout:number;/**\n * Should we automatically connect?\n * @default true\n */\nautoConnect:boolean;/**\n * weather we should unref the reconnect timer when it is\n * create automatically\n * @default false\n */\nautoUnref:boolean;/**\n * the parser to use. Defaults to an instance of the Parser that ships with socket.io.\n */\nparser:any;}interface ManagerReservedEvents{open:()=>void;error:(err:Error)=>void;ping:()=>void;packet:(packet:Packet)=>void;close:(reason:string)=>void;reconnect_failed:()=>void;reconnect_attempt:(attempt:number)=>void;reconnect_error:(err:Error)=>void;reconnect:(attempt:number)=>void;}export declare class Manager<ListenEvents extends EventsMap=DefaultEventsMap,EmitEvents extends EventsMap=ListenEvents>extends StrictEventEmitter<{},{},ManagerReservedEvents>{/**\n * The Engine.IO client instance\n *\n * @public\n */\nengine:any;/**\n * @private\n */\n_autoConnect:boolean;/**\n * @private\n */\n_readyState:\"opening\"|\"open\"|\"closed\";/**\n * @private\n */\n_reconnecting:boolean;private readonly uri;opts:Partial<ManagerOptions>;private nsps;private subs;private backoff;private _reconnection;private _reconnectionAttempts;private _reconnectionDelay;private _randomizationFactor;private _reconnectionDelayMax;private _timeout;private encoder;private decoder;private skipReconnect;/**\n * `Manager` constructor.\n *\n * @param uri - engine instance or engine uri/opts\n * @param opts - options\n * @public\n */constructor(opts:Partial<ManagerOptions>);constructor(uri?:string,opts?:Partial<ManagerOptions>);constructor(uri?:string|Partial<ManagerOptions>,opts?:Partial<ManagerOptions>);/**\n * Sets the `reconnection` config.\n *\n * @param {Boolean} v - true/false if it should automatically reconnect\n * @return {Manager} self or value\n * @public\n */\nreconnection(v:boolean):this;reconnection():boolean;reconnection(v?:boolean):this|boolean;/**\n * Sets the reconnection attempts config.\n *\n * @param {Number} v - max reconnection attempts before giving up\n * @return {Manager} self or value\n * @public\n */\nreconnectionAttempts(v:number):this;reconnectionAttempts():number;reconnectionAttempts(v?:number):this|number;/**\n * Sets the delay between reconnections.\n *\n * @param {Number} v - delay\n * @return {Manager} self or value\n * @public\n */\nreconnectionDelay(v:number):this;reconnectionDelay():number;reconnectionDelay(v?:number):this|number;/**\n * Sets the randomization factor\n *\n * @param v - the randomization factor\n * @return self or value\n * @public\n */\nrandomizationFactor(v:number):this;randomizationFactor():number;randomizationFactor(v?:number):this|number;/**\n * Sets the maximum delay between reconnections.\n *\n * @param v - delay\n * @return self or value\n * @public\n */\nreconnectionDelayMax(v:number):this;reconnectionDelayMax():number;reconnectionDelayMax(v?:number):this|number;/**\n * Sets the connection timeout. `false` to disable\n *\n * @param v - connection timeout\n * @return self or value\n * @public\n */\ntimeout(v:number|boolean):this;timeout():number|boolean;timeout(v?:number|boolean):this|number|boolean;/**\n * Starts trying to reconnect if reconnection is enabled and we have not\n * started reconnecting yet\n *\n * @private\n */private maybeReconnectOnOpen;/**\n * Sets the current transport `socket`.\n *\n * @param {Function} fn - optional, callback\n * @return self\n * @public\n */\nopen(fn?:(err?:Error)=>void):this;/**\n * Alias for open()\n *\n * @return self\n * @public\n */\nconnect(fn?:(err?:Error)=>void):this;/**\n * Called upon transport open.\n *\n * @private\n */private onopen;/**\n * Called upon a ping.\n *\n * @private\n */private onping;/**\n * Called with data.\n *\n * @private\n */private ondata;/**\n * Called when parser fully decodes a packet.\n *\n * @private\n */private ondecoded;/**\n * Called upon socket error.\n *\n * @private\n */private onerror;/**\n * Creates a new socket for the given `nsp`.\n *\n * @return {Socket}\n * @public\n */\nsocket(nsp:string,opts?:Partial<SocketOptions>):Socket;/**\n * Called upon a socket close.\n *\n * @param socket\n * @private\n */\n_destroy(socket:Socket):void;/**\n * Writes a packet.\n *\n * @param packet\n * @private\n */\n_packet(packet:Partial<Packet&{query:string;options:any;}>):void;/**\n * Clean up transport subscriptions and packet buffer.\n *\n * @private\n */private cleanup;/**\n * Close the current socket.\n *\n * @private\n */\n_close():void;/**\n * Alias for close()\n *\n * @private\n */private disconnect;/**\n * Called upon engine close.\n *\n * @private\n */private onclose;/**\n * Attempt a reconnection.\n *\n * @private\n */private reconnect;/**\n * Called upon successful reconnect.\n *\n * @private\n */private onreconnect;}export{};"
    ]
  