
    export default [
      "socket.io-client\\build\\typed-events.d.ts",
      "import Emitter=require(\"component-emitter\");/**\n * An events map is an interface that maps event names to their value, which\n * represents the type of the `on` listener.\n */export interface EventsMap{[event:string]:any;}/**\n * The default events map, used if no EventsMap is given. Using this EventsMap\n * is equivalent to accepting all event names, and any data.\n */export interface DefaultEventsMap{[event:string]:(...args:any[])=>void;}/**\n * Returns a union type containing all the keys of an event map.\n */export declare type EventNames<Map extends EventsMap>=keyof Map&(string|symbol);/** The tuple type representing the parameters of an event listener */export declare type EventParams<Map extends EventsMap,Ev extends EventNames<Map>>=Parameters<Map[Ev]>;/**\n * The event names that are either in ReservedEvents or in UserEvents\n */export declare type ReservedOrUserEventNames<ReservedEventsMap extends EventsMap,UserEvents extends EventsMap>=EventNames<ReservedEventsMap>|EventNames<UserEvents>;/**\n * Type of a listener of a user event or a reserved event. If `Ev` is in\n * `ReservedEvents`, the reserved event listener is returned.\n */export declare type ReservedOrUserListener<ReservedEvents extends EventsMap,UserEvents extends EventsMap,Ev extends ReservedOrUserEventNames<ReservedEvents,UserEvents>>=FallbackToUntypedListener<Ev extends EventNames<ReservedEvents>?ReservedEvents[Ev]:Ev extends EventNames<UserEvents>?UserEvents[Ev]:never>;/**\n * Returns an untyped listener type if `T` is `never`; otherwise, returns `T`.\n *\n * This is a hack to mitigate https://github.com/socketio/socket.io/issues/3833.\n * Needed because of https://github.com/microsoft/TypeScript/issues/41778\n */declare type FallbackToUntypedListener<T>=[T]extends[never]?(...args:any[])=>void:T;/**\n * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type\n * parameters for mappings of event names to event data types, and strictly\n * types method calls to the `EventEmitter` according to these event maps.\n *\n * @typeParam ListenEvents - `EventsMap` of user-defined events that can be\n * listened to with `on` or `once`\n * @typeParam EmitEvents - `EventsMap` of user-defined events that can be\n * emitted with `emit`\n * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be\n * emitted by socket.io with `emitReserved`, and can be listened to with\n * `listen`.\n */export declare abstract class StrictEventEmitter<ListenEvents extends EventsMap,EmitEvents extends EventsMap,ReservedEvents extends EventsMap={}>extends Emitter{/**\n * Adds the `listener` function as an event listener for `ev`.\n *\n * @param ev Name of the event\n * @param listener Callback function\n */\non<Ev extends ReservedOrUserEventNames<ReservedEvents,ListenEvents>>(ev:Ev,listener:ReservedOrUserListener<ReservedEvents,ListenEvents,Ev>):this;/**\n * Adds a one-time `listener` function as an event listener for `ev`.\n *\n * @param ev Name of the event\n * @param listener Callback function\n */\nonce<Ev extends ReservedOrUserEventNames<ReservedEvents,ListenEvents>>(ev:Ev,listener:ReservedOrUserListener<ReservedEvents,ListenEvents,Ev>):this;/**\n * Emits an event.\n *\n * @param ev Name of the event\n * @param args Values to send to listeners of this event\n */\nemit<Ev extends EventNames<EmitEvents>>(ev:Ev,...args:EventParams<EmitEvents,Ev>):this;/**\n * Emits a reserved event.\n *\n * This method is `protected`, so that only a class extending\n * `StrictEventEmitter` can emit its own reserved events.\n *\n * @param ev Reserved event name\n * @param args Arguments to emit along with the event\n */protected emitReserved<Ev extends EventNames<ReservedEvents>>(ev:Ev,...args:EventParams<ReservedEvents,Ev>):this;/**\n * Returns the listeners listening to an event.\n *\n * @param event Event name\n * @returns Array of listeners subscribed to `event`\n */\nlisteners<Ev extends ReservedOrUserEventNames<ReservedEvents,ListenEvents>>(event:Ev):ReservedOrUserListener<ReservedEvents,ListenEvents,Ev>[];}export{};"
    ]
  