
    export default [
      "typescript\\lib\\lib.es2015.promise.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\ninterface PromiseConstructor{/**\r * A reference to the prototype.\r */readonly prototype:Promise<any>;/**\r * Creates a new Promise.\r * @param executor A callback used to initialize the promise. This callback is passed two arguments:\r * a resolve callback used to resolve the promise with a value or the result of another promise,\r * and a reject callback used to reject the promise with a provided reason or error.\r */new<T>(executor:(resolve:(value:T|PromiseLike<T>)=>void,reject:(reason?:any)=>void)=>void):Promise<T>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>,T10|PromiseLike<T10>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5,T6,T7,T8,T9>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>,T9|PromiseLike<T9>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8,T9]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5,T6,T7,T8>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>,T8|PromiseLike<T8>]):Promise<[T1,T2,T3,T4,T5,T6,T7,T8]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5,T6,T7>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>,T7|PromiseLike<T7>]):Promise<[T1,T2,T3,T4,T5,T6,T7]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5,T6>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>,T6|PromiseLike<T6>]):Promise<[T1,T2,T3,T4,T5,T6]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4,T5>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>,T5|PromiseLike<T5>]):Promise<[T1,T2,T3,T4,T5]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3,T4>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>,T4|PromiseLike<T4>]):Promise<[T1,T2,T3,T4]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2,T3>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>,T3|PromiseLike<T3>]):Promise<[T1,T2,T3]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T1,T2>(values:readonly[T1|PromiseLike<T1>,T2|PromiseLike<T2>]):Promise<[T1,T2]>;/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nall<T>(values:readonly(T|PromiseLike<T>)[]):Promise<T[]>;/**\r * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r * or rejected.\r * @param values An array of Promises.\r * @returns A new Promise.\r */\nrace<T>(values:readonly T[]):Promise<T extends PromiseLike<infer U>?U:T>;/**\r * Creates a new rejected promise for the provided reason.\r * @param reason The reason the promise was rejected.\r * @returns A new rejected Promise.\r */\nreject<T=never>(reason?:any):Promise<T>;/**\r * Creates a new resolved promise.\r * @returns A resolved promise.\r */\nresolve():Promise<void>;/**\r * Creates a new resolved promise for the provided value.\r * @param value A promise.\r * @returns A promise whose internal state matches the provided promise.\r */\nresolve<T>(value:T|PromiseLike<T>):Promise<T>;}declare var Promise:PromiseConstructor;"
    ]
  