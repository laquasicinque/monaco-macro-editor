
    export default [
      "typescript\\lib\\lib.es2015.symbol.wellknown.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\n/// <reference lib=\"es2015.symbol\" />\r\ninterface SymbolConstructor{/**\r * A method that determines if a constructor object recognizes an object as one of the\r * constructorâ€™s instances. Called by the semantics of the instanceof operator.\r */readonly hasInstance:unique symbol;/**\r * A Boolean value that if true indicates that an object should flatten to its array elements\r * by Array.prototype.concat.\r */readonly isConcatSpreadable:unique symbol;/**\r * A regular expression method that matches the regular expression against a string. Called\r * by the String.prototype.match method.\r */readonly match:unique symbol;/**\r * A regular expression method that replaces matched substrings of a string. Called by the\r * String.prototype.replace method.\r */readonly replace:unique symbol;/**\r * A regular expression method that returns the index within a string that matches the\r * regular expression. Called by the String.prototype.search method.\r */readonly search:unique symbol;/**\r * A function valued property that is the constructor function that is used to create\r * derived objects.\r */readonly species:unique symbol;/**\r * A regular expression method that splits a string at the indices that match the regular\r * expression. Called by the String.prototype.split method.\r */readonly split:unique symbol;/**\r * A method that converts an object to a corresponding primitive value.\r * Called by the ToPrimitive abstract operation.\r */readonly toPrimitive:unique symbol;/**\r * A String value that is used in the creation of the default string description of an object.\r * Called by the built-in method Object.prototype.toString.\r */readonly toStringTag:unique symbol;/**\r * An Object whose own property names are property names that are excluded from the 'with'\r * environment bindings of the associated objects.\r */readonly unscopables:unique symbol;}interface Symbol{/**\r * Converts a Symbol object to a symbol.\r */[Symbol.toPrimitive](hint:string):symbol;readonly[Symbol.toStringTag]:string;}interface Array<T>{/**\r * Returns an object whose properties have the value 'true'\r * when they will be absent when used in a 'with' statement.\r */[Symbol.unscopables]():{copyWithin:boolean;entries:boolean;fill:boolean;find:boolean;findIndex:boolean;keys:boolean;values:boolean;};}interface Date{/**\r * Converts a Date object to a string.\r */[Symbol.toPrimitive](hint:\"default\"):string;/**\r * Converts a Date object to a string.\r */[Symbol.toPrimitive](hint:\"string\"):string;/**\r * Converts a Date object to a number.\r */[Symbol.toPrimitive](hint:\"number\"):number;/**\r * Converts a Date object to a string or number.\r *\r * @param hint The strings \"number\", \"string\", or \"default\" to specify what primitive to return.\r *\r * @throws {TypeError} If 'hint' was given something other than \"number\", \"string\", or \"default\".\r * @returns A number if 'hint' was \"number\", a string if 'hint' was \"string\" or \"default\".\r */[Symbol.toPrimitive](hint:string):string|number;}interface Map<K,V>{readonly[Symbol.toStringTag]:string;}interface WeakMap<K extends object,V>{readonly[Symbol.toStringTag]:string;}interface Set<T>{readonly[Symbol.toStringTag]:string;}interface WeakSet<T extends object>{readonly[Symbol.toStringTag]:string;}interface JSON{readonly[Symbol.toStringTag]:string;}interface Function{/**\r * Determines whether the given value inherits from this function if this function was used\r * as a constructor function.\r *\r * A constructor function can control which objects are recognized as its instances by\r * 'instanceof' by overriding this method.\r */[Symbol.hasInstance](value:any):boolean;}interface GeneratorFunction{readonly[Symbol.toStringTag]:string;}interface Math{readonly[Symbol.toStringTag]:string;}interface Promise<T>{readonly[Symbol.toStringTag]:string;}interface PromiseConstructor{readonly[Symbol.species]:PromiseConstructor;}interface RegExp{/**\r * Matches a string with this regular expression, and returns an array containing the results of\r * that search.\r * @param string A string to search within.\r */[Symbol.match](string:string):RegExpMatchArray|null;/**\r * Replaces text in a string, using this regular expression.\r * @param string A String object or string literal whose contents matching against\r *               this regular expression will be replaced\r * @param replaceValue A String object or string literal containing the text to replace for every\r *                     successful match of this regular expression.\r */[Symbol.replace](string:string,replaceValue:string):string;/**\r * Replaces text in a string, using this regular expression.\r * @param string A String object or string literal whose contents matching against\r *               this regular expression will be replaced\r * @param replacer A function that returns the replacement text.\r */[Symbol.replace](string:string,replacer:(substring:string,...args:any[])=>string):string;/**\r * Finds the position beginning first substring match in a regular expression search\r * using this regular expression.\r *\r * @param string The string to search within.\r */[Symbol.search](string:string):number;/**\r * Returns an array of substrings that were delimited by strings in the original input that\r * match against this regular expression.\r *\r * If the regular expression contains capturing parentheses, then each time this\r * regular expression matches, the results (including any undefined results) of the\r * capturing parentheses are spliced.\r *\r * @param string string value to split\r * @param limit if not undefined, the output array is truncated so that it contains no more\r * than 'limit' elements.\r */[Symbol.split](string:string,limit?:number):string[];}interface RegExpConstructor{readonly[Symbol.species]:RegExpConstructor;}interface String{/**\r * Matches a string or an object that supports being matched against, and returns an array\r * containing the results of that search, or null if no matches are found.\r * @param matcher An object that supports being matched against.\r */\nmatch(matcher:{[Symbol.match](string:string):RegExpMatchArray|null;}):RegExpMatchArray|null;/**\r * Replaces first match with string or all matches with RegExp.\r * @param searchValue A string or RegExp search value.\r * @param replaceValue A string containing the text to replace for match.\r */\nreplace(searchValue:{[Symbol.replace](string:string,replaceValue:string):string;},replaceValue:string):string;/**\r * Replaces text in a string, using an object that supports replacement within a string.\r * @param searchValue A object can search for and replace matches within a string.\r * @param replacer A function that returns the replacement text.\r */\nreplace(searchValue:{[Symbol.replace](string:string,replacer:(substring:string,...args:any[])=>string):string;},replacer:(substring:string,...args:any[])=>string):string;/**\r * Finds the first substring match in a regular expression search.\r * @param searcher An object which supports searching within a string.\r */\nsearch(searcher:{[Symbol.search](string:string):number;}):number;/**\r * Split a string into substrings using the specified separator and return them as an array.\r * @param splitter An object that can split a string.\r * @param limit A value used to limit the number of elements returned in the array.\r */\nsplit(splitter:{[Symbol.split](string:string,limit?:number):string[];},limit?:number):string[];}interface ArrayBuffer{readonly[Symbol.toStringTag]:string;}interface DataView{readonly[Symbol.toStringTag]:string;}interface Int8Array{readonly[Symbol.toStringTag]:\"Int8Array\";}interface Uint8Array{readonly[Symbol.toStringTag]:\"Uint8Array\";}interface Uint8ClampedArray{readonly[Symbol.toStringTag]:\"Uint8ClampedArray\";}interface Int16Array{readonly[Symbol.toStringTag]:\"Int16Array\";}interface Uint16Array{readonly[Symbol.toStringTag]:\"Uint16Array\";}interface Int32Array{readonly[Symbol.toStringTag]:\"Int32Array\";}interface Uint32Array{readonly[Symbol.toStringTag]:\"Uint32Array\";}interface Float32Array{readonly[Symbol.toStringTag]:\"Float32Array\";}interface Float64Array{readonly[Symbol.toStringTag]:\"Float64Array\";}interface ArrayConstructor{readonly[Symbol.species]:ArrayConstructor;}interface MapConstructor{readonly[Symbol.species]:MapConstructor;}interface SetConstructor{readonly[Symbol.species]:SetConstructor;}interface ArrayBufferConstructor{readonly[Symbol.species]:ArrayBufferConstructor;}"
    ]
  