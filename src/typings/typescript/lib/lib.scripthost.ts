
    export default [
      "typescript\\lib\\lib.scripthost.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\ninterface ActiveXObject{new(s:string):any;}declare var ActiveXObject:ActiveXObject;interface ITextWriter{Write(s:string):void;WriteLine(s:string):void;Close():void;}interface TextStreamBase{/**\r * The column number of the current character position in an input stream.\r */\nColumn:number;/**\r * The current line number in an input stream.\r */\nLine:number;/**\r * Closes a text stream.\r * It is not necessary to close standard streams; they close automatically when the process ends. If\r * you close a standard stream, be aware that any other pointers to that standard stream become invalid.\r */\nClose():void;}interface TextStreamWriter extends TextStreamBase{/**\r * Sends a string to an output stream.\r */\nWrite(s:string):void;/**\r * Sends a specified number of blank lines (newline characters) to an output stream.\r */\nWriteBlankLines(intLines:number):void;/**\r * Sends a string followed by a newline character to an output stream.\r */\nWriteLine(s:string):void;}interface TextStreamReader extends TextStreamBase{/**\r * Returns a specified number of characters from an input stream, starting at the current pointer position.\r * Does not return until the ENTER key is pressed.\r * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r */\nRead(characters:number):string;/**\r * Returns all characters from an input stream.\r * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r */\nReadAll():string;/**\r * Returns an entire line from an input stream.\r * Although this method extracts the newline character, it does not add it to the returned string.\r * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r */\nReadLine():string;/**\r * Skips a specified number of characters when reading from an input text stream.\r * Can only be used on a stream in reading mode; causes an error in writing or appending mode.\r * @param characters Positive number of characters to skip forward. (Backward skipping is not supported.)\r */\nSkip(characters:number):void;/**\r * Skips the next line when reading from an input text stream.\r * Can only be used on a stream in reading mode, not writing or appending mode.\r */\nSkipLine():void;/**\r * Indicates whether the stream pointer position is at the end of a line.\r */\nAtEndOfLine:boolean;/**\r * Indicates whether the stream pointer position is at the end of a stream.\r */\nAtEndOfStream:boolean;}declare var WScript:{/**\r * Outputs text to either a message box (under WScript.exe) or the command console window followed by\r * a newline (under CScript.exe).\r */\nEcho(s:any):void;/**\r * Exposes the write-only error output stream for the current script.\r * Can be accessed only while using CScript.exe.\r */\nStdErr:TextStreamWriter;/**\r * Exposes the write-only output stream for the current script.\r * Can be accessed only while using CScript.exe.\r */\nStdOut:TextStreamWriter;Arguments:{length:number;Item(n:number):string;};/**\r *  The full path of the currently running script.\r */\nScriptFullName:string;/**\r * Forces the script to stop immediately, with an optional exit code.\r */\nQuit(exitCode?:number):number;/**\r * The Windows Script Host build version number.\r */\nBuildVersion:number;/**\r * Fully qualified path of the host executable.\r */\nFullName:string;/**\r * Gets/sets the script mode - interactive(true) or batch(false).\r */\nInteractive:boolean;/**\r * The name of the host executable (WScript.exe or CScript.exe).\r */\nName:string;/**\r * Path of the directory containing the host executable.\r */\nPath:string;/**\r * The filename of the currently running script.\r */\nScriptName:string;/**\r * Exposes the read-only input stream for the current script.\r * Can be accessed only while using CScript.exe.\r */\nStdIn:TextStreamReader;/**\r * Windows Script Host version\r */\nVersion:string;/**\r * Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.\r */\nConnectObject(objEventSource:any,strPrefix:string):void;/**\r * Creates a COM object.\r * @param strProgiID\r * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r */\nCreateObject(strProgID:string,strPrefix?:string):any;/**\r * Disconnects a COM object from its event sources.\r */\nDisconnectObject(obj:any):void;/**\r * Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.\r * @param strPathname Fully qualified path to the file containing the object persisted to disk.\r *                       For objects in memory, pass a zero-length string.\r * @param strProgID\r * @param strPrefix Function names in the form prefix_event will be bound to this object's COM events.\r */\nGetObject(strPathname:string,strProgID?:string,strPrefix?:string):any;/**\r * Suspends script execution for a specified length of time, then continues execution.\r * @param intTime Interval (in milliseconds) to suspend script execution.\r */\nSleep(intTime:number):void;};/**\r * WSH is an alias for WScript under Windows Script Host\r */declare var WSH:typeof WScript;/**\r * Represents an Automation SAFEARRAY\r */declare class SafeArray<T=any>{private constructor();private SafeArray_typekey:SafeArray<T>;}/**\r * Allows enumerating over a COM collection, which may not have indexed item access.\r */interface Enumerator<T=any>{/**\r * Returns true if the current item is the last one in the collection, or the collection is empty,\r * or the current item is undefined.\r */\natEnd():boolean;/**\r * Returns the current item in the collection\r */\nitem():T;/**\r * Resets the current item in the collection to the first item. If there are no items in the collection,\r * the current item is set to undefined.\r */\nmoveFirst():void;/**\r * Moves the current item to the next item in the collection. If the enumerator is at the end of\r * the collection or the collection is empty, the current item is set to undefined.\r */\nmoveNext():void;}interface EnumeratorConstructor{new<T=any>(safearray:SafeArray<T>):Enumerator<T>;new<T=any>(collection:{Item(index:any):T}):Enumerator<T>;new<T=any>(collection:any):Enumerator<T>;}declare var Enumerator:EnumeratorConstructor;/**\r * Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\r */interface VBArray<T=any>{/**\r * Returns the number of dimensions (1-based).\r */\ndimensions():number;/**\r * Takes an index for each dimension in the array, and returns the item at the corresponding location.\r */\ngetItem(dimension1Index:number,...dimensionNIndexes:number[]):T;/**\r * Returns the smallest available index for a given dimension.\r * @param dimension 1-based dimension (defaults to 1)\r */\nlbound(dimension?:number):number;/**\r * Returns the largest available index for a given dimension.\r * @param dimension 1-based dimension (defaults to 1)\r */\nubound(dimension?:number):number;/**\r * Returns a Javascript array with all the elements in the VBArray. If there are multiple dimensions,\r * each successive dimension is appended to the end of the array.\r * Example: [[1,2,3],[4,5,6]] becomes [1,2,3,4,5,6]\r */\ntoArray():T[];}interface VBArrayConstructor{new<T=any>(safeArray:SafeArray<T>):VBArray<T>;}declare var VBArray:VBArrayConstructor;/**\r * Automation date (VT_DATE)\r */declare class VarDate{private constructor();private VarDate_typekey:VarDate;}interface DateConstructor{new(vd:VarDate):Date;}interface Date{getVarDate:()=>VarDate;}"
    ]
  