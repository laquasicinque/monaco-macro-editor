
    export default [
      "typescript\\lib\\lib.es2015.iterable.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\n/// <reference lib=\"es2015.symbol\" />\r\ninterface SymbolConstructor{/**\r * A method that returns the default iterator for an object. Called by the semantics of the\r * for-of statement.\r */readonly iterator:unique symbol;}interface IteratorYieldResult<TYield>{done?:false;value:TYield;}interface IteratorReturnResult<TReturn>{done:true;value:TReturn;}type IteratorResult<T,TReturn=any>=IteratorYieldResult<T>|IteratorReturnResult<TReturn>;interface Iterator<T,TReturn=any,TNext=undefined>{next(...args:[]|[TNext]):IteratorResult<T,TReturn>;return?(value?:TReturn):IteratorResult<T,TReturn>;throw?(e?:any):IteratorResult<T,TReturn>;}interface Iterable<T>{[Symbol.iterator]():Iterator<T>;}interface IterableIterator<T>extends Iterator<T>{[Symbol.iterator]():IterableIterator<T>;}interface Array<T>{/** Iterator */[Symbol.iterator]():IterableIterator<T>;/**\r * Returns an iterable of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,T]>;/**\r * Returns an iterable of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an iterable of values in the array\r */\nvalues():IterableIterator<T>;}interface ArrayConstructor{/**\r * Creates an array from an iterable object.\r * @param iterable An iterable object to convert to an array.\r */from<T>(iterable:Iterable<T>|ArrayLike<T>):T[];/**\r * Creates an array from an iterable object.\r * @param iterable An iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from<T,U>(iterable:Iterable<T>|ArrayLike<T>,mapfn:(v:T,k:number)=>U,thisArg?:any):U[];}interface ReadonlyArray<T>{/** Iterator of values in the array. */[Symbol.iterator]():IterableIterator<T>;/**\r * Returns an iterable of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,T]>;/**\r * Returns an iterable of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an iterable of values in the array\r */\nvalues():IterableIterator<T>;}interface IArguments{/** Iterator */[Symbol.iterator]():IterableIterator<any>;}interface Map<K,V>{/** Returns an iterable of entries in the map. */[Symbol.iterator]():IterableIterator<[K,V]>;/**\r * Returns an iterable of key, value pairs for every entry in the map.\r */\nentries():IterableIterator<[K,V]>;/**\r * Returns an iterable of keys in the map\r */\nkeys():IterableIterator<K>;/**\r * Returns an iterable of values in the map\r */\nvalues():IterableIterator<V>;}interface ReadonlyMap<K,V>{/** Returns an iterable of entries in the map. */[Symbol.iterator]():IterableIterator<[K,V]>;/**\r * Returns an iterable of key, value pairs for every entry in the map.\r */\nentries():IterableIterator<[K,V]>;/**\r * Returns an iterable of keys in the map\r */\nkeys():IterableIterator<K>;/**\r * Returns an iterable of values in the map\r */\nvalues():IterableIterator<V>;}interface MapConstructor{new<K,V>(iterable:Iterable<readonly[K,V]>):Map<K,V>;}interface WeakMap<K extends object,V>{}interface WeakMapConstructor{new<K extends object,V>(iterable:Iterable<readonly[K,V]>):WeakMap<K,V>;}interface Set<T>{/** Iterates over values in the set. */[Symbol.iterator]():IterableIterator<T>;/**\r * Returns an iterable of [v,v] pairs for every value `v` in the set.\r */\nentries():IterableIterator<[T,T]>;/**\r * Despite its name, returns an iterable of the values in the set.\r */\nkeys():IterableIterator<T>;/**\r * Returns an iterable of values in the set.\r */\nvalues():IterableIterator<T>;}interface ReadonlySet<T>{/** Iterates over values in the set. */[Symbol.iterator]():IterableIterator<T>;/**\r * Returns an iterable of [v,v] pairs for every value `v` in the set.\r */\nentries():IterableIterator<[T,T]>;/**\r * Despite its name, returns an iterable of the values in the set.\r */\nkeys():IterableIterator<T>;/**\r * Returns an iterable of values in the set.\r */\nvalues():IterableIterator<T>;}interface SetConstructor{new<T>(iterable?:Iterable<T>|null):Set<T>;}interface WeakSet<T extends object>{}interface WeakSetConstructor{new<T extends object=object>(iterable:Iterable<T>):WeakSet<T>;}interface Promise<T>{}interface PromiseConstructor{/**\r * Creates a Promise that is resolved with an array of results when all of the provided Promises\r * resolve, or rejected when any Promise is rejected.\r * @param values An iterable of Promises.\r * @returns A new Promise.\r */\nall<T>(values:Iterable<T|PromiseLike<T>>):Promise<T[]>;/**\r * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r * or rejected.\r * @param values An iterable of Promises.\r * @returns A new Promise.\r */\nrace<T>(values:Iterable<T>):Promise<T extends PromiseLike<infer U>?U:T>;/**\r * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r * or rejected.\r * @param values An iterable of Promises.\r * @returns A new Promise.\r */\nrace<T>(values:Iterable<T|PromiseLike<T>>):Promise<T>;}interface String{/** Iterator */[Symbol.iterator]():IterableIterator<string>;}interface Int8Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Int8ArrayConstructor{new(elements:Iterable<number>):Int8Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int8Array;}interface Uint8Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Uint8ArrayConstructor{new(elements:Iterable<number>):Uint8Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint8Array;}interface Uint8ClampedArray{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Uint8ClampedArrayConstructor{new(elements:Iterable<number>):Uint8ClampedArray;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint8ClampedArray;}interface Int16Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Int16ArrayConstructor{new(elements:Iterable<number>):Int16Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int16Array;}interface Uint16Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Uint16ArrayConstructor{new(elements:Iterable<number>):Uint16Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint16Array;}interface Int32Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Int32ArrayConstructor{new(elements:Iterable<number>):Int32Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Int32Array;}interface Uint32Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Uint32ArrayConstructor{new(elements:Iterable<number>):Uint32Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Uint32Array;}interface Float32Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Float32ArrayConstructor{new(elements:Iterable<number>):Float32Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Float32Array;}interface Float64Array{[Symbol.iterator]():IterableIterator<number>;/**\r * Returns an array of key, value pairs for every entry in the array\r */\nentries():IterableIterator<[number,number]>;/**\r * Returns an list of keys in the array\r */\nkeys():IterableIterator<number>;/**\r * Returns an list of values in the array\r */\nvalues():IterableIterator<number>;}interface Float64ArrayConstructor{new(elements:Iterable<number>):Float64Array;/**\r * Creates an array from an array-like or iterable object.\r * @param arrayLike An array-like or iterable object to convert to an array.\r * @param mapfn A mapping function to call on every element of the array.\r * @param thisArg Value of 'this' used to invoke the mapfn.\r */from(arrayLike:Iterable<number>,mapfn?:(v:number,k:number)=>number,thisArg?:any):Float64Array;}"
    ]
  