
    export default [
      "typescript\\lib\\lib.es2017.sharedmemory.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\n/// <reference lib=\"es2015.symbol\" />\r\n/// <reference lib=\"es2015.symbol.wellknown\" />\r\ninterface SharedArrayBuffer{/**\r * Read-only. The length of the ArrayBuffer (in bytes).\r */readonly byteLength:number;/**\r * Returns a section of an SharedArrayBuffer.\r */\nslice(begin:number,end?:number):SharedArrayBuffer;readonly[Symbol.species]:SharedArrayBuffer;readonly[Symbol.toStringTag]:\"SharedArrayBuffer\";}interface SharedArrayBufferConstructor{readonly prototype:SharedArrayBuffer;new(byteLength:number):SharedArrayBuffer;}declare var SharedArrayBuffer:SharedArrayBufferConstructor;interface ArrayBufferTypes{SharedArrayBuffer:SharedArrayBuffer;}interface Atomics{/**\r * Adds a value to the value at the given position in the array, returning the original value.\r * Until this atomic operation completes, any other read or write operation against the array\r * will block.\r */\nadd(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * Stores the bitwise AND of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or\r * write operation against the array will block.\r */\nand(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * Replaces the value at the given position in the array if the original value equals the given\r * expected value, returning the original value. Until this atomic operation completes, any\r * other read or write operation against the array will block.\r */\ncompareExchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,expectedValue:number,replacementValue:number):number;/**\r * Replaces the value at the given position in the array, returning the original value. Until\r * this atomic operation completes, any other read or write operation against the array will\r * block.\r */\nexchange(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * Returns a value indicating whether high-performance algorithms can use atomic operations\r * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed\r * array.\r */\nisLockFree(size:number):boolean;/**\r * Returns the value at the given position in the array. Until this atomic operation completes,\r * any other read or write operation against the array will block.\r */\nload(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number):number;/**\r * Stores the bitwise OR of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or write\r * operation against the array will block.\r */\nor(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * Stores a value at the given position in the array, returning the new value. Until this\r * atomic operation completes, any other read or write operation against the array will block.\r */\nstore(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * Subtracts a value from the value at the given position in the array, returning the original\r * value. Until this atomic operation completes, any other read or write operation against the\r * array will block.\r */\nsub(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;/**\r * If the value at the given position in the array is equal to the provided value, the current\r * agent is put to sleep causing execution to suspend until the timeout expires (returning\r * `\"timed-out\"`) or until the agent is awoken (returning `\"ok\"`); otherwise, returns\r * `\"not-equal\"`.\r */\nwait(typedArray:Int32Array,index:number,value:number,timeout?:number):\"ok\"|\"not-equal\"|\"timed-out\";/**\r * Wakes up sleeping agents that are waiting on the given index of the array, returning the\r * number of agents that were awoken.\r * @param typedArray A shared Int32Array.\r * @param index The position in the typedArray to wake up on.\r * @param count The number of sleeping agents to notify. Defaults to +Infinity.\r */\nnotify(typedArray:Int32Array,index:number,count?:number):number;/**\r * Stores the bitwise XOR of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or write\r * operation against the array will block.\r */\nxor(typedArray:Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array,index:number,value:number):number;readonly[Symbol.toStringTag]:\"Atomics\";}declare var Atomics:Atomics;"
    ]
  