
    export default [
      "typescript\\lib\\lib.es2015.generator.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\n/// <reference lib=\"es2015.iterable\" />\r\ninterface Generator<T=unknown,TReturn=any,TNext=unknown>extends Iterator<T,TReturn,TNext>{next(...args:[]|[TNext]):IteratorResult<T,TReturn>;return(value:TReturn):IteratorResult<T,TReturn>;throw(e:any):IteratorResult<T,TReturn>;[Symbol.iterator]():Generator<T,TReturn,TNext>;}interface GeneratorFunction{/**\r * Creates a new Generator object.\r * @param args A list of arguments the function accepts.\r */new(...args:any[]):Generator;/**\r * Creates a new Generator object.\r * @param args A list of arguments the function accepts.\r */(...args:any[]):Generator;/**\r * The length of the arguments.\r */readonly length:number;/**\r * Returns the name of the function.\r */readonly name:string;/**\r * A reference to the prototype.\r */readonly prototype:Generator;}interface GeneratorFunctionConstructor{/**\r * Creates a new Generator function.\r * @param args A list of arguments the function accepts.\r */new(...args:string[]):GeneratorFunction;/**\r * Creates a new Generator function.\r * @param args A list of arguments the function accepts.\r */(...args:string[]):GeneratorFunction;/**\r * The length of the arguments.\r */readonly length:number;/**\r * Returns the name of the function.\r */readonly name:string;/**\r * A reference to the prototype.\r */readonly prototype:GeneratorFunction;}"
    ]
  