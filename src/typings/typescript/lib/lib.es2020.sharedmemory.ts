
    export default [
      "typescript\\lib\\lib.es2020.sharedmemory.d.ts",
      "/// <reference no-default-lib=\"true\"/>\r\ninterface Atomics{/**\r * Adds a value to the value at the given position in the array, returning the original value.\r * Until this atomic operation completes, any other read or write operation against the array\r * will block.\r */\nadd(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * Stores the bitwise AND of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or\r * write operation against the array will block.\r */\nand(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * Replaces the value at the given position in the array if the original value equals the given\r * expected value, returning the original value. Until this atomic operation completes, any\r * other read or write operation against the array will block.\r */\ncompareExchange(typedArray:BigInt64Array|BigUint64Array,index:number,expectedValue:bigint,replacementValue:bigint):bigint;/**\r * Replaces the value at the given position in the array, returning the original value. Until\r * this atomic operation completes, any other read or write operation against the array will\r * block.\r */\nexchange(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * Returns the value at the given position in the array. Until this atomic operation completes,\r * any other read or write operation against the array will block.\r */\nload(typedArray:BigInt64Array|BigUint64Array,index:number):bigint;/**\r * Stores the bitwise OR of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or write\r * operation against the array will block.\r */\nor(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * Stores a value at the given position in the array, returning the new value. Until this\r * atomic operation completes, any other read or write operation against the array will block.\r */\nstore(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * Subtracts a value from the value at the given position in the array, returning the original\r * value. Until this atomic operation completes, any other read or write operation against the\r * array will block.\r */\nsub(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;/**\r * If the value at the given position in the array is equal to the provided value, the current\r * agent is put to sleep causing execution to suspend until the timeout expires (returning\r * `\"timed-out\"`) or until the agent is awoken (returning `\"ok\"`); otherwise, returns\r * `\"not-equal\"`.\r */\nwait(typedArray:BigInt64Array,index:number,value:bigint,timeout?:number):\"ok\"|\"not-equal\"|\"timed-out\";/**\r * Wakes up sleeping agents that are waiting on the given index of the array, returning the\r * number of agents that were awoken.\r * @param typedArray A shared BigInt64Array.\r * @param index The position in the typedArray to wake up on.\r * @param count The number of sleeping agents to notify. Defaults to +Infinity.\r */\nnotify(typedArray:BigInt64Array,index:number,count?:number):number;/**\r * Stores the bitwise XOR of a value with the value at the given position in the array,\r * returning the original value. Until this atomic operation completes, any other read or write\r * operation against the array will block.\r */\nxor(typedArray:BigInt64Array|BigUint64Array,index:number,value:bigint):bigint;}"
    ]
  