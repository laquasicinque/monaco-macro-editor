
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\canvas.d.ts",
      "import{ConfiguredDocumentClass}from'../../types/helperTypes';import{BaseScene}from'../common/documents.mjs';/**\n * The virtual tabletop environment is implemented using a WebGL powered HTML 5 canvas using the powerful PIXI.js\n * library. The canvas is comprised of an ordered sequence of layers which define rendering groups and collections of\n * objects that are drawn on the canvas itself.\n *\n * @see {@link CanvasLayer} An abstract class for all Canvas layers.\n * @see {@link PlaceablesLayer} An abstract class for Canvas Layers which contain Placeable Objects.\n * @see {@link PlaceableObject} An abstract class for objects which are placed into the Scene and drawn on the canvas.\n *\n * @example <caption>Example Canvas commands</caption>\n * ```typescript\n * canvas.ready; // Is the canvas ready for use?\n * canvas.scene; // The currently viewed Scene entity.\n * canvas.dimensions; // The dimensions of the current Scene.\n * canvas.draw(); // Completely re-draw the game canvas (this is usually unnecessary).\n * canvas.pan(x, y, zoom); // Pan the canvas to new coordinates and scale.\n * canvas.recenter(); // Re-center the canvas on the currently controlled Token.\n * ```\n */declare global{class Canvas{constructor();/**\n * A reference to the currently displayed Scene document, or null if the Canvas is currently blank.\n * @defaultValue `null`\n */\nscene:StoredDocument<InstanceType<ConfiguredDocumentClass<typeof Scene>>>|null;/**\n * The current pixel dimensions of the displayed Scene, or null if the Canvas is blank.\n * @defaultValue `null`\n */\ndimensions:Canvas.Dimensions|null;/**\n * A reference to the HeadsUpDisplay container which overlays HTML rendering on top of this Canvas.\n * @defaultValue `null`\n */\nhud:HeadsUpDisplay|null;/**\n * An Array of pending canvas operations which should trigger on the next re-paint\n * @defaultValue `[]`\n */\npendingOperations:Array<[fn:(args:any[])=>void,scope:any,args:any[]]>;/**\n * A perception manager interface for batching lighting, sight, and sound updates\n */\nperception:PerceptionManager;/**\n * A flag for whether the game Canvas is ready to be used. False if the canvas is not yet drawn, true otherwise.\n * @defaultValue `false`\n */\nready:boolean;/**\n * A flag to indicate whether a new Scene is currently being drawn.\n * @defaultValue `false`\n */\nloading:boolean;/**\n * A flag for whether the game Canvas is initialized and ready for drawing.\n * @defaultValue `false`\n */\ninitialized:boolean;/**\n * Track the timestamp of the last stage zoom operation\n * @defaultValue `0`\n */protected _zoomTime:number;/**\n * Track the last automatic pan time to throttle\n * @defaultValue `0`\n */protected _panTime:number;/**\n * An object of data which is temporarily cached to be reloaded after the canvas is drawn\n * @defaultValue `{}`\n */protected _reload:Partial<{scene:string;layer:string;controlledTokens:string[];targetedTokens:string[]}>;/**\n * A Set of unique pending operation names to ensure operations are only performed once\n */protected _pendingOperationNames:Set<string>;/**\n * The pixel radius of blur distance that should be applied for the current zoom level\n * @defaultValue `0`\n */\nblurDistance:number;/**\n * An array of blur filter instances which are modified by the zoom level and the \"soft shadows\" setting\n * @defaultValue `[]`\n */\nblurFilters:PIXI.filters.BlurFilter[];/**\n * The singleton interaction manager instance which handles mouse interaction on the Canvas.\n */\nmouseInteractionManager:MouseInteractionManager<PIXI.Container>|undefined;/**\n * A reference to the MouseInteractionManager that is currently controlling pointer-based interaction, or null.\n * @defaultValue `null`\n */\ncurrentMouseManager:MouseInteractionManager<PIXI.Container>|null;/**\n * Initialize the Canvas by creating the HTML element and PIXI application.\n * This step should only ever be performed once per client session.\n * Subsequent requests to reset the canvas should go through Canvas#draw\n */\ninitialize():void;app:PIXI.Application|undefined;stage:PIXI.Container|undefined;protected _dragDrop:DragDrop|undefined;background:BackgroundLayer|undefined;drawings:DrawingsLayer|undefined;grid:GridLayer|undefined;walls:WallsLayer|undefined;templates:TemplateLayer|undefined;notes:NotesLayer|undefined;tokens:TokenLayer|undefined;foreground:ForegroundLayer|undefined;sounds:SoundsLayer|undefined;lighting:LightingLayer|undefined;sight:SightLayer|undefined;effects:EffectsLayer|undefined;controls:ControlsLayer|undefined;msk:PIXI.Graphics|undefined;/**\n * The id of the currently displayed Scene.\n */get id():string|null;/**\n * A mapping of named CanvasLayer classes which defines the layers which comprise the Scene.\n */static get layers():typeof CONFIG.Canvas.layers;/**\n * An Array of all CanvasLayer instances which are active on the Canvas board\n */get layers():CanvasLayer[];/**\n * Return a reference to the active Canvas Layer\n */get activeLayer():CanvasLayer|null;/**\n * Create the layers of the game Canvas.\n * @param stage - The primary canvas stage\n */protected _createLayers(stage:PIXI.Container):void;/**\n * When re-drawing the canvas, first tear down or discontinue some existing processes\n */\ntearDown():Promise<void>;/**\n * Draw the game canvas.\n * @param scene - A specific Scene document to render on the Canvas\n * @returns A Promise which resolves once the Canvas is fully drawn\n */\ndraw(scene?:InstanceType<ConfiguredDocumentClass<typeof Scene>>):Promise<this>;/**\n * Get the canvas active dimensions based on the size of the scene's map.\n * We expand the image size by a factor of 1.5 and round to the nearest 2x grid size.\n * The rounding accomplishes that the padding buffer around the map always contains whole grid spaces.\n * @see {@link documents.BaseScene.getDimensions}\n * @param data - The scene dimensions data being established\n */static getDimensions(data:Canvas.DimensionsData):Canvas.Dimensions;/**\n * Once the canvas is drawn, initialize control, visibility, and audio states\n */protected _initialize():Promise<void>;/**\n * Initialize the starting view of the canvas stage\n * If we are re-drawing a scene which was previously rendered, restore the prior view position\n * Otherwise set the view to the top-left corner of the scene at standard scale\n */protected _initializeCanvasPosition():void;/**\n * Initialize a CanvasLayer in the activation state\n */protected _initializeCanvasLayer():void;/**\n * Initialize a token or set of tokens which should be controlled.\n * Restore controlled and targeted tokens from before the re-draw.\n */protected _initializeTokenControl():void;/**\n * Get a reference to the a specific CanvasLayer by it's name\n * @param layerName - The name of the canvas layer to get\n */\ngetLayer(layerName:'BackgroundLayer'):BackgroundLayer|null;getLayer(layerName:'DrawingsLayer'):DrawingsLayer|null;getLayer(layerName:'GridLayer'):GridLayer|null;getLayer(layerName:'WallsLayer'):WallsLayer|null;getLayer(layerName:'TemplateLayer'):TemplateLayer|null;getLayer(layerName:'NotesLayer'):NotesLayer|null;getLayer(layerName:'TokenLayer'):TokenLayer|null;getLayer(layerName:'ForegroundLayer'):ForegroundLayer|null;getLayer(layerName:'SoundsLayer'):SoundsLayer|null;getLayer(layerName:'LightingLayer'):LightingLayer|null;getLayer(layerName:'SightLayer'):SightLayer|null;getLayer(layerName:'EffectsLayer'):EffectsLayer|null;getLayer(layerName:'ControlsLayer'):ControlsLayer|null;getLayer(layerName:string):CanvasLayer|null;/**\n * Given an embedded object name, get the canvas layer for that object\n */\ngetLayerByEmbeddedName<T extends string>(embeddedName:T):T extends keyof EmbeddedEntityNameToLayerMap?Exclude<EmbeddedEntityNameToLayerMap[T],undefined>|null:null;/**\n * Activate a specific CanvasLayer by its canonical name\n * @param layerName - The named layer to activate\n */\nactivateLayer(layerName:LayerName):void;/**\n * Pan the canvas to a certain \\{x,y\\} coordinate and a certain zoom level\n * @param options - (default: `{}`)\n */\npan(options?:PanView):void;/**\n * Animate panning the canvas to a certain destination coordinate and zoom scale\n * Customize the animation speed with additional options\n * Returns a Promise which is resolved once the animation has completed\n *\n * @param view - The desired view parameters\n *               (default: `{}`)\n * @returns A Promise which resolves once the animation has been completed\n */\nanimatePan(view?:Partial<AnimatedPanView>):ReturnType<typeof CanvasAnimation.animateLinear>;/**\n * Recenter the canvas\n * Otherwise, pan the stage to put the top-left corner of the map in the top-left corner of the window\n * @returns A Promise which resolves once the animation has been completed\n */\nrecenter(coordinates?:PanView):ReturnType<this['animatePan']>;/**\n * Get the constrained zoom scale parameter which is allowed by the maxZoom parameter\n * @param x     - The requested x-coordinate\n * @param y     - The requested y-coordinate\n * @param scale - The requested scale\n * @returns The allowed scale\n */protected _constrainView({x,y,scale}:Canvas.View):Canvas.View;/**\n * Create a BlurFilter instance and register it to the array for updates when the zoom level changes.\n */\ncreateBlurFilter():PIXI.filters.BlurFilter;/**\n * Update the blur strength depending on the scale of the canvas stage\n * @param scale - (default: `this.stage.scale.x`)\n */protected updateBlur(scale?:number):void;/**\n * Attach event listeners to the game canvas to handle click and interaction events\n */protected _addListeners():void;/**\n * Handle normal mouse movement.\n * Throttle cursor position updates to 100ms intervals\n */protected _onMouseMove(event:PIXI.InteractionEvent):void;/**\n * Handle left mouse-click events occurring on the Canvas stage or its active Layer.\n * @see {@link MouseInteractionManager#_handleClickLeft}\n */protected _onClickLeft(event:PIXI.InteractionEvent):void;/**\n * Handle double left-click events occurring on the Canvas stage.\n * @see {@link MouseInteractionManager#_handleClickLeft2}\n */protected _onClickLeft2(event:PIXI.InteractionEvent):void;/**\n * Handle the beginning of a left-mouse drag workflow on the Canvas stage or its active Layer.\n * @see {@link MouseInteractionManager#_handleDragStart}\n */protected _onDragLeftStart(event:PIXI.InteractionEvent):void;/**\n * Handle mouse movement events occurring on the Canvas stage or it's active layer\n * @see {@link MouseInteractionManager#_handleDragMove}\n */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/**\n * Handle the conclusion of a left-mouse drag workflow when the mouse button is released.\n * @see {@link MouseInteractionManager#_handleDragDrop}\n */protected _onDragLeftDrop(event:PIXI.InteractionEvent):ReturnType<PlaceablesLayer<any>['selectObjects']>|ReturnType<TokenLayer['targetObjects']>|void;/**\n * Handle the cancellation of a left-mouse drag workflow\n * @see {@link MouseInteractionManager#_handleDragCancel}\n */protected _onDragLeftCancel(event:PointerEvent):PIXI.Graphics|void;/**\n * Handle right mouse-click events occurring on the Canvas stage or it's active layer\n * @see {@link MouseInteractionManager#_handleClickRight}\n */protected _onClickRight(event:PIXI.InteractionEvent):void;/**\n * Handle right-mouse drag events occuring on the Canvas stage or an active Layer\n * @see {@link MouseInteractionManager#_handleDragMove}\n */protected _onDragRightMove(event:PIXI.InteractionEvent):void;/**\n * Handle the conclusion of a right-mouse drag workflow the Canvas stage.\n * @see {@link MouseInteractionManager#_handleDragDrop}\n * @param event - (unused)\n */protected _onDragRightDrop(event:PIXI.InteractionEvent):void;/**\n * Determine selection coordinate rectangle during a mouse-drag workflow\n */protected _onDragSelect(event:PIXI.InteractionEvent):void;/**\n * Pan the canvas view when the cursor position gets close to the edge of the frame\n * @param event - The originating mouse movement event\n */protected _onDragCanvasPan(event:MouseEvent):ReturnType<this['animatePan']>|void;/**\n * Handle window resizing with the dimensions of the window viewport change\n * @param event - The Window resize event\n *                (default: `null`)\n */protected _onResize(event?:UIEvent|null):false|void;/**\n * Handle mousewheel events which adjust the scale of the canvas\n * @param event - The mousewheel event that zooms the canvas\n */protected _onMouseWheel(event:WheelEvent):void;/**\n * Event handler for the drop portion of a drag-and-drop event.\n */protected _onDrop(event:DragEvent):unknown;/**\n * Add a pending canvas operation that should fire once the socket handling workflow concludes.\n * This registers operations by a unique string name into a queue - avoiding repeating the same work multiple times.\n * This is especially helpful for multi-object updates to avoid costly and redundant refresh operations.\n * @param name  - A unique name for the pending operation, conventionally Class.method\n * @param fn    - The unbound function to execute later\n * @param scope - The scope to which the method should be bound when called\n * @param args  - Arbitrary arguments to pass to the method when called\n */\naddPendingOperation<S,A>(name:string,fn:(this:S,args:A)=>void,scope:S,args:A):void;/**\n * Fire all pending functions that are registered in the pending operations queue and empty it.\n */\ntriggerPendingOperations():void;/**\n * @deprecated since 0.8.2\n */\ninitializeSources():void;}namespace Canvas{interface Dimensions extends ReturnType<typeof BaseScene['getDimensions']>{rect:PIXI.Rectangle;sceneRect:PIXI.Rectangle;maxR:number;}interface DimensionsData{width?:number;height?:number;grid:number;gridDistance:number;padding:number;shiftX:number;shiftY:number;}interface DropPosition{x:number;y:number;}interface View{x:number;y:number;scale:number;}}}interface PanView{/**\n * The x-coordinate of the pan destination\n * @defaultValue `null`\n */\nx?:number|null;/**\n * The y-coordinate of the pan destination\n * @defaultValue `null`\n */\ny?:number|null;/**\n * The zoom level (max of CONFIG.Canvas.maxZoom) of the action\n * @defaultValue `null`\n */\nscale?:number|null;}interface AnimatedPanView{/**\n * The destination x-coordinate\n */\nx?:number;/**\n * The destination y-coordinate\n */\ny?:number;/**\n * The destination zoom scale\n */\nscale?:number;/**\n * The total duration of the animation in milliseconds; used if speed is not set\n * @defaultValue 250\n */\nduration:number;/**\n * The speed of animation in pixels per second; overrides duration if set\n */\nspeed?:number;}interface EmbeddedEntityNameToLayerMap{AmbientLight:Canvas['lighting'];AmbientSound:Canvas['sounds'];Drawing:Canvas['drawings'];Note:Canvas['notes'];MeasuredTemplate:Canvas['templates'];Tile:Canvas['background'];Token:Canvas['tokens'];Wall:Canvas['walls'];}type LayerName=|'grid'|'sight'|'effects'|'controls'|'lighting'|'sounds'|'drawings'|'notes'|'templates'|'background'|'foreground'|'tokens'|'walls';"
    ]
  