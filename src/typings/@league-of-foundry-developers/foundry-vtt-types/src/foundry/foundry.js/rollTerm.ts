
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerm.d.ts",
      "/**\n * An abstract class which represents a single token that can be used as part of a Roll formula.\n * Every portion of a Roll formula is parsed into a subclass of RollTerm in order for the Roll to be fully evaluated.\n */declare abstract class RollTerm{constructor({options}?:{options?:RollTerm.Options});/** An object of additional options which describes and modifies the term. */\noptions:RollTerm.Options;/** An internal flag for whether the term has been evaluated */protected _evaluated:boolean;/**\n * Is this term intermediate, and should be evaluated first as part of the simplification process?\n * @defaultValue `false`\n */\nisIntermediate:boolean;/** A regular expression pattern which identifies optional term-level flavor text */static FLAVOR_REGEXP_STRING:string;/** A regular expression which identifies term-level flavor text */static FLAVOR_REGEXP:RegExp;/** A regular expression used to match a term of this type */static REGEXP:RegExp;/** An array of additional attributes which should be retained when the term is serialized */static SERIALIZE_ATTRIBUTES:string[];/** A string representation of the formula expression for this RollTerm, prior to evaluation */get expression():string;/** A string representation of the formula, including optional flavor text. */get formula():string;/** A string or numeric representation of the final output for this term, after evaluation. */get total():number|string|null|undefined;/** Optional flavor text which modifies and describes this term. */get flavor():string;/**\n * Evaluate the roll term, populating the results Array.\n * @param options - (default: `{}`)\n * @returns The evaluated dice term\n */\nevaluate(options?:Partial<RollTerm.EvaluationOptions&{async:false}>):this;evaluate(options:Partial<RollTerm.EvaluationOptions>&{async:true}):Promise<this>;evaluate(options?:Partial<RollTerm.EvaluationOptions>):this|Promise<this>;protected _evaluate({minimize,maximize}?:{minimize?:boolean;maximize?:boolean}):Promise<this>;protected _evaluateSync({minimize,maximize}?:{minimize?:boolean;maximize?:boolean}):this;/**\n * Construct a RollTerm from a provided data object\n * @param data - Provided data from an un-serialized term\n * @returns The constructed RollTerm\n */static fromData(data:object):RollTerm;/**\n * * Define term-specific logic for how a de-serialized data object is restored as a functional RollTerm\n * @param data - The de-serialized term data\n * @returns The re-constructed RollTerm object\n */protected static _fromData<T extends RollTerm>(this:ConstructorOf<T>,data:object):T;/**\n * Reconstruct a RollTerm instance from a provided JSON string\n * @param json - A serialized JSON representation of a DiceTerm\n * @returns A reconstructed RollTerm from the provided JSON\n */static fromJSON(json:string):RollTerm;/**\n * Serialize the RollTerm to a JSON string which allows it to be saved in the database or embedded in text.\n * This method should return an object suitable for passing to the JSON.stringify function.\n */\ntoJSON():object;}declare namespace RollTerm{interface Options{flavor?:string;}interface EvaluationOptions{/**\n * Maximize the result, obtaining the largest possible value.\n * @defaultValue `false`\n * */\nmaximize:boolean;/**\n * Minimize the result, obtaining the smallest possible value\n * @defaultValue `false`\n */\nminimize:boolean;/**\n * Evaluate the roll asynchronously, receiving a Promise as the returned value.\n * This will become the default behavior in version 10.x\n * @defaultValue `false`\n */async:boolean;}interface Data{class:string;evaluated:boolean;options:Options;}}"
    ]
  