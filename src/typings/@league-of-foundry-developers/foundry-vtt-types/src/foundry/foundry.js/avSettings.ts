
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avSettings.d.ts",
      "declare class AVSettings{constructor();protected _set<T>(key:string,value:T):void;protected _change():void;client:AVSettings.ClientSettings;world:AVSettings.WorldSettings;protected _original:AVSettings.Settings;/**\n * WebRTC Mode, Disabled, Audio only, Video only, Audio & Video\n */static AV_MODES:{DISABLED:0;AUDIO:1;VIDEO:2;AUDIO_VIDEO:3;};static VOICE_MODES:AVSettings.VoiceModes;static DEFAULT_CLIENT_SETTINGS:{/**\n * @defaultValue `'default'`\n */\nvideoSrc:string;/**\n * @defaultValue `'default'`\n */\naudioSrc:string;/**\n * @defaultValue `'default'`\n */\naudioSink:string;/**\n * @defaultValue\n */\ndockSize:'large'|'medium'|'small';/**\n * @defaultValue `'bottom'`\n */\ndockPosition:string;/**\n * @defaultValue `false`\n */\nhidePlayerList:boolean;/**\n * @defaultValue `false`\n */\nmuteAll:boolean;voice:{/**\n * @defaultValue `'AVSettings.VOICE_MODES.PTT'`\n */\nmode:AVSettings.VoiceMode;/**\n * @defaultValue\n * ```\n * \"`\"\n * ```\n */\npttKey:string;/**\n * @defaultValue\n * ```\n * \"`\"\n * ```\n */\npttName:string;/**\n * @defaultValue `false`\n */\npttMouse:boolean;/**\n * @defaultValue `100`\n */\npttDelay:number;/**\n * @defaultValue `-45`\n */\nactivityThreshold:number;};/**\n * @defaultValue `{}`\n */\nusers:Partial<Record<string,AVSettings.StoredUserSettings>>;};static DEFAULT_WORLD_SETTINGS:{/**\n * @defaultValue `AVSettings.AV_MODES.DISABLED`\n */\nmode:AVSettings.VoiceMode;server:{/**\n * @defaultValue `'FVTT'`\n */type:string;/**\n * @defaultValue `''`\n */\nurl:string;/**\n * @defaultValue `''`\n */\nroom:string;/**\n * @defaultValue `''`\n */\nusername:string;/**\n * @defaultValue `''`\n */\npassword:string;};turn:{/**\n * @defaultValue `'server'`\n */type:string;/**\n * @defaultValue `''`\n */\nurl:string;/**\n * @defaultValue `''`\n */\nusername:string;/**\n * @defaultValue `''`\n */\npassword:string;};};static DEFAULT_USER_SETTINGS:{/**\n * @defaultValue `false`\n */\npopout:boolean;/**\n * @defaultValue `100`\n */\nx:number;/**\n * @defaultValue `100`\n */\ny:number;/**\n * @defaultValue `0`\n */\nz:number;/**\n * @defaultValue `320`\n */\nwidth:number;/**\n * @defaultValue `1.0`\n */\nvolume:number;/**\n * @defaultValue `false`\n */\nmuted:boolean;/**\n * @defaultValue `false`\n */\nhidden:boolean;/**\n * @defaultValue `false`\n */\nblocked:boolean;};initialize():void;changed():void;get<S extends'client'|'world'>(scope:S,setting:string):unknown;getUser(userId:string):AVSettings.UserSettings|null;set<S extends'client'|'world'>(scope:S,setting:string,value:unknown):void;/**\n * Return a mapping of AV settings for each game User.\n */get users():Record<string,AVSettings.UserSettings>;/**\n * Prepare a standardized object of user settings data for a single User\n * @internal\n */protected _getUserSettings(user:User):AVSettings.UserSettings;/**\n * Handle setting changes to either rctClientSettings or rtcWorldSettings.\n * @internal\n */protected _onSettingsChanged():void;}declare namespace AVSettings{type ClientSettings=typeof AVSettings.DEFAULT_CLIENT_SETTINGS;type WorldSettings=typeof AVSettings.DEFAULT_WORLD_SETTINGS;type StoredUserSettings=typeof AVSettings.DEFAULT_USER_SETTINGS;type UserSettings=StoredUserSettings&{canBroadCastAudio:boolean;canBroadcastVideo:boolean};type Settings={client:ClientSettings;world:WorldSettings};interface DefaultVoiceModes{ALWAYS:'always';ACTIVITY:'activity';PTT:'ptt';}interface Overrides{}type VoiceModes=PropertyTypeOrFallback<AVSettings.Overrides,'VoiceModes',DefaultVoiceModes>;type VoiceMode=ValueOf<VoiceModes>;}"
    ]
  