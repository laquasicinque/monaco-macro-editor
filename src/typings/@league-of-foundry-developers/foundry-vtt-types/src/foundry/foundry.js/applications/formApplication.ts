
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplication.d.ts",
      "/**\n * An abstract pattern for defining an Application responsible for updating some object using an HTML form\n *\n * A few critical assumptions:\n * 1) This application is used to only edit one object at a time\n * 2) The template used contains one (and only one) HTML form as it's outer-most element\n * 3) This abstract layer has no knowledge of what is being updated, so the implementation must define _updateObject\n *\n * @typeParam Options        - the type of the options object\n * @typeParam Data           - The data structure used to render the handlebars template.\n * @typeParam ConcreteObject - the type of the object or {@link foundry.abstract.Document} which is modified by this form\n */declare abstract class FormApplication<\nOptions extends FormApplication.Options=FormApplication.Options,Data extends object=FormApplication.Data<{},Options>,ConcreteObject=Data extends FormApplication.Data<infer T,Options>?T:{}>extends Application<Options>{/**\n * @param object  - Some object or entity which is the target to be updated.\n * @param options - Additional options which modify the rendering of the sheet.\n *                  (default: `{}`)\n * @remarks Foundry allows passing no value to the constructor at all.\n */constructor(object:ConcreteObject,options?:Partial<Options>);/**\n * The object target which we are using this form to modify\n */object:ConcreteObject;/**\n * A convenience reference to the form HTLMElement\n * @defaultValue `null`\n */\nform:HTMLElement|null;/**\n * Keep track of any FilePicker instances which are associated with this form\n * The values of this Array are inner-objects with references to the FilePicker instances and other metadata\n * @defaultValue `[]`\n */\nfilepickers:FilePicker[];/**\n * Keep track of any mce editors which may be active as part of this form\n * The values of this Array are inner-objects with references to the MCE editor and other metadata\n * @defaultValue `{}`\n */\neditors:Partial<Record<string,FormApplication.FormApplicationEditor>>;/**\n * Assign the default options which are supported by the entity edit sheet.\n * @returns The default options for this FormApplication class\n * @override\n * @see {@link Application.defaultOptions}\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   classes: ['form'],\n *   closeOnSubmit: true,\n *   submitOnChange: false,\n *   submitOnClose: false,\n *   editable: true\n * });\n * ```\n */static get defaultOptions():FormApplication.Options;/**\n * Is the Form Application currently editable?\n */get isEditable():boolean;/**\n * @param options - (default: `{}`)\n * @override\n */\ngetData(options?:Partial<Options>):Data|Promise<Data>;/**\n * @override\n */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/**\n * @override\n */protected _renderInner(data:Data):Promise<JQuery>;/**\n * @override\n */protected _activateCoreListeners(html:JQuery):void;/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * If the form is not editable, disable its input fields\n * @param form - The form HTML\n */protected _disableFields(form:HTMLElement):void;/**\n * Handle standard form submission steps\n * @param event         - The submit event which triggered this handler\n * @param updateData    - Additional specific data keys/values which override or extend the contents of\n *                        the parsed form. This can be used to update other flags or data fields at the\n *                        same time as processing a form submission to avoid multiple database operations.\n *                        (default: `null`)\n * @param preventClose  - Override the standard behavior of whether to close the form on submit\n *                        (default: `false`)\n * @param preventRender - Prevent the application from re-rendering as a result of form submission\n *                        (default: `false`)\n * @returns A promise which resolves to the validated update data\n */protected _onSubmit(event:Event,{updateData,preventClose,preventRender}?:FormApplication.OnSubmitOptions):Promise<Partial<Record<string,unknown>>>;/**\n * Get an object of update data used to update the form's target object\n * @param updateData - Additional data that should be merged with the form data\n *                     (default: `{}`)\n * @returns The prepared update data\n */protected _getSubmitData(updateData?:object|null):Partial<Record<string,unknown>>;/**\n * Handle changes to an input element, submitting the form if options.submitOnChange is true.\n * Do not preventDefault in this handler as other interactions on the form may also be occurring.\n * @param event - The initial change event\n */protected _onChangeInput(event:JQuery.ChangeEvent):void|Promise<Partial<Record<string,unknown>>>;/**\n * Handle the change of a color picker input which enters it's chosen value into a related input field\n */protected _onChangeColorPicker(event:JQuery.ChangeEvent):void;/**\n * Handle changes to a range type input by propagating those changes to the sibling range-value element\n * @param event - The initial change event\n */protected _onChangeRange(event:JQuery.ChangeEvent):void;/**\n * Additional handling which should trigger when a FilePicker contained within this FormApplication is submitted.\n * @param selection  - The target path which was selected\n * @param filePicker - The FilePicker instance which was submitted\n */protected _onSelectFile(selection:string,filePicker:FilePicker):void;/**\n * This method is called upon form submission after form data is validated\n * @param event    - The initial triggering submission event\n *                   (unused)\n * @param formData - The object of validated form data with which to update the object\n *                   (unused)\n * @returns A Promise which resolves once the update operation has completed\n */protected abstract _updateObject(event:Event,formData?:object):Promise<unknown>;/**\n * Activate a named TinyMCE text editor\n * @param name           - The named data field which the editor modifies.\n * @param options        - TinyMCE initialization options passed to TextEditor.create\n *                         (default: `{}`)\n * @param initialContent - Initial text content for the editor area.\n *                         (default: `''`)\n */\nactivateEditor(name:string,options?:TextEditor.Options,initialContent?:string):void;/**\n * Handle saving the content of a specific editor by name\n * @param name   - The named editor to save\n * @param remove - Remove the editor after saving its content\n *                 (default: `true`)\n */\nsaveEditor(name:string,{remove}?:{remove?:boolean}):Promise<void>;/**\n * Activate a TinyMCE editor instance present within the form\n */protected _activateEditor(div:HTMLElement):void;/**\n * Activate a FilePicker instance present within the form\n * @param event - The mouse click event on a file picker activation button\n */protected _activateFilePicker(event:PointerEvent):void;/**\n * Determine the configuration options used to initialize a FilePicker instance within this FormApplication.\n * Subclasses can extend this method to customize the behavior of pickers within their form.\n * @param event - The initiating mouse click event which opens the picker\n * @returns Options passed to the FilePicker constructor\n */protected _getFilePickerOptions(event:PointerEvent):FilePickerOptions;/**\n * @param options - (default: `{}`)\n * @override\n */\nclose(options?:FormApplication.CloseOptions):Promise<void>;/**\n * Submit the contents of a Form Application, processing its content as defined by the Application\n * @param options - Options passed to the _onSubmit event handler\n *                  (default: `{}`)\n * @returns Return a self-reference for convenient method chaining\n */\nsubmit(options?:FormApplication.OnSubmitOptions):Promise<this>|void;}declare interface ApplicationOptions{/**\n * Whether to automatically close the application when it's contained\n * form is submitted.\n * @defaultValue `true`\n */\ncloseOnSubmit:boolean;/**\n * Whether to automatically submit the contained HTML form when an input\n * or select element is changed.\n * @defaultValue `false`\n */\nsubmitOnChange:boolean;/**\n * Whether to automatically submit the contained HTML form when the\n * application window is manually closed.\n * @defaultValue `false`\n */\nsubmitOnClose:boolean;/**\n * Whether the application form is editable - if true, it's fields will\n * be unlocked and the form can be submitted. If false, all form fields\n * will be disabled and the form cannot be submitted.\n * @defaultValue `true`\n */\neditable:boolean;}declare namespace FormApplication{interface CloseOptions extends Application.CloseOptions{submit?:boolean;}/**\n * @typeParam ConcreteObject - the type of the object\n * @typeParam Options        - the type of the options object\n */interface Data<ConcreteObject,Options extends FormApplication.Options=FormApplication.Options>{object:ConcreteObject;options:Options;title:string;}interface FormApplicationEditor{target:string;button:HTMLElement;hasButton:boolean;mce:tinyMCE.Editor|null;active:boolean;changed:boolean;options:TextEditor.Options;initial:string;}interface OnSubmitOptions{/**\n * Additional specific data keys/values which override or extend the contents of\n * the parsed form. This can be used to update other flags or data fields at the\n * same time as processing a form submission to avoid multiple database operations.\n * @defaultValue `null`\n */\nupdateData?:object;/**\n * Override the standard behavior of whether to close the form on submit\n * @defaultValue `false`\n */\npreventClose?:boolean;/**\n * Prevent the application from re-rendering as a result of form submission\n * @defaultValue `false`\n */\npreventRender?:boolean;}interface Options extends Application.Options,ApplicationOptions{/**\n * @defaultValue `['form']`\n */\nclasses:string[];}}interface FilePickerOptions{field:HTMLElement|null;type:string;current:string;button:HTMLElement;callback:FormApplication['_onSelectFile'];}"
    ]
  