
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\combatTracker.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredObjectClassForName}from'../../../../types/helperTypes';declare global{/**\n * The sidebar directory which organizes and displays world-level Combat documents.\n */class CombatTracker<Options extends Application.Options=CombatTracker.Options>extends SidebarTab<Options>{constructor(options?:Partial<Options>);/**\n * Record a reference to the currently highlighted Token\n * @defaultValue `null`\n * @internal\n */protected _highlighted:ConfiguredObjectClassForName<'Token'>|null;/**\n * Record the currently tracked Combat encounter\n * @defaultValue `null`\n */\nviewed:StoredDocument<InstanceType<ConfiguredDocumentClass<typeof Combat>>>|null;/** @override */static get defaultOptions():CombatTracker.Options;/**\n * Return an array of Combat encounters which occur within the current Scene.\n */get combats():ReturnType<CombatEncounters['filter']>;/** @override */\ncreatePopout():this;/**\n * Initialize the combat tracker to display a specific combat encounter.\n * If no encounter is provided, the tracker will be initialized with the first encounter in the viewed scene.\n * @param combat - The combat encounter to initialize\n *                 (default: `null`)\n * @param render - Whether to re-render the sidebar after initialization\n *                 (default: `true`)\n */\ninitialize({combat,render}?:{combat?:Combat|null;render?:boolean}):void;/**\n * Scroll the combat log container to ensure the current Combatant turn is centered vertically\n */\nscrollToTurn():void;/** @override */\ngetData(options?:Partial<Options>):Promise<CombatTracker.Data>;/** @override */\nactivateListeners(html:JQuery):void;/**\n * Handle new Combat creation request\n * @internal\n */protected _onCombatCreate(event:JQuery.ClickEvent):Promise<void>;/**\n * Handle a Combat deletion request\n * @internal\n * @remarks This is never called\n */protected _onCombatDelete(event:Event):Promise<void>;/**\n * Handle a Combat cycle request\n * @internal\n */protected _onCombatCycle(event:Event):Promise<void>;/**\n * Handle click events on Combat control buttons\n * @param event - The originating mousedown event\n * @internal\n */protected _onCombatControl(event:JQuery.ClickEvent):Promise<void>;/**\n * Handle a Combatant control toggle\n * @param event - The originating mousedown event\n * @internal\n */protected _onCombatantControl(event:JQuery.ClickEvent):Promise<void>;/**\n * Handle toggling the defeated status effect on a combatant Token\n * @param combatant - The combatant data being modified\n * @returns A Promise that resolves after all operations are complete\n * @internal\n */protected _onToggleDefeatedStatus(combatant:InstanceType<ConfiguredDocumentClass<typeof Combatant>>):Promise<void>;/**\n * Handle mouse-down event on a combatant name in the tracker\n * @param event - The originating mousedown event\n * @returns A Promise that resolves once the pan is complete\n * @internal\n */protected _onCombatantMouseDown(event:JQuery.ClickEvent):Promise<boolean|void>;/**\n * Handle mouse-hover events on a combatant in the tracker\n * @internal\n */protected _onCombatantHoverIn(event:JQuery.MouseEnterEvent):void;/**\n * Handle mouse-unhover events for a combatant in the tracker\n * @internal\n */protected _onCombatantHoverOut(event:JQuery.MouseLeaveEvent):void;/**\n * Attach context menu options to elements in the tracker\n * @param html - The HTML element to which context options are attached\n * @internal\n */protected _contextMenu(html:JQuery):void;/**\n * Get the sidebar directory entry context options\n * @returns The sidebar entry context options\n * @internal\n */protected _getEntryContextOptions():ContextMenuEntry[];/**\n * Display a dialog which prompts the user to enter a new initiative value for a Combatant\n * @internal\n */protected _onConfigureCombatant(li:JQuery):void;}namespace CombatTracker{type Data=|{user:Game['user'];combats:CombatTracker['combats'];combatCount:number;started:boolean;settings:ClientSettings.Values[`core.${typeof Combat.CONFIG_SETTING}`];\n          currentIndex: -1;\n          hasCombat: false;\n          combat: null;\n          turns: [];\n          previousId: null;\n          nextId: null;\n          control: false;\n        }\n      | {\n          user: Game['user'];\n          combats: CombatTracker['combats'];\n          combatCount: number;\n          started: boolean;\n          settings: ClientSettings.Values[`core.${typeof Combat.CONFIG_SETTING}`];\n          currentIndex: number;\n          hasCombat: true;\n          combat: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof Combat>>>;\n          turns: Turn[];\n          previousId: string | null;\n          nextId: string | null;\n          control: boolean;\n          round: number;\n          turn: number;\n        };\n\n    type Turn = {\n      id: string;\n      name: string;\n      img: string;\n      active: boolean;\n      owner: boolean;\n      defeated: boolean;\n      hidden: boolean;\n      initiative: number | null;\n      hasRolled: boolean;\n      hasResource: boolean;\n      ressource: `${number}` | number | boolean | null;\n      css: string;\n      effects: Set<string>;\n    };\n\n    interface Options extends Application.Options {\n      /**\n       * @defaultValue `'combat'`\n       */\n      id: string;\n\n      /**\n       * @defaultValue `'templates/sidebar/combat-tracker.html'`\n       */\n      template: string;\n\n      /**\n       * @defaultValue `'Combat Tracker'`\n       */\n      title: string;\n\n      /**\n       * @defaultValue `['.directory-list']`\n       */\n      scrollY: string[];\n    }\n  }\n}\n"
    ]
  