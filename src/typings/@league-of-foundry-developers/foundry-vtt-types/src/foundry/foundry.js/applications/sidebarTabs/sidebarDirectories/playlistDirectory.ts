
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectories\\playlistDirectory.d.ts",
      "/**\n * A directory listing of audio playlists\n */declare class PlaylistDirectory extends SidebarDirectory<PlaylistDirectory.Options>{/**\n * Track the playlist IDs which are currently expanded in their display\n */protected _expanded:Set<string>;/**\n * @override\n */static get defaultOptions():PlaylistDirectory.Options;/**\n * @override\n */static get entity():'Playlist';/**\n * @override\n * @see {@link Game.playlists}\n */static get collection():Game['playlists'];/**\n * Return an Array of the Playlist entities which are currently playing\n */get playing():Playlist[];/**\n * Prepare the data used to render the AudioList application\n * @param options - (unused)\n */\ngetData(options?:Partial<PlaylistDirectory.Options>):PlaylistDirectory.Data;/**\n * Given a constant playback mode, provide the FontAwesome icon used to display it\n */protected _getModeIcon(mode:foundry.CONST.PlaylistMode):string;/**\n * Given a constant playback mode, provide the string tooltip used to describe it\n */protected _getModeTooltip(mode:foundry.CONST.PlaylistMode):string;/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * Handle global volume change for the playlist sidebar\n */protected _onGlobalVolume(event:JQuery.ChangeEvent):void;/**\n * Handle Playlist collapse toggle\n */protected _onPlaylistCollapse(event:JQuery.ClickEvent):void;/**\n * Helper method to render the expansion or collapse of playlists\n * @param speed - (default: `250`)\n */protected _collapse(li:JQuery,collapse:boolean,speed:number):void;/**\n * Handle Playlist edit action\n */protected _onPlaylistEdit(event:JQuery.ClickEvent):void;/**\n * Handle Playlist deletion requests\n * Confirm the deletion with a yes/no dialog prompt\n */protected _onPlaylistDelete(event:JQuery.ClickEvent):void;/**\n * Handle Playlist track addition request\n */protected _onPlaylistAddTrack(event:JQuery.ClickEvent):void;/**\n * Handle Playlist playback state changes\n */protected _onPlaylistPlay(event:JQuery.ClickEvent,playing:boolean):void;/**\n * Handle cycling the playback mode for a Playlist\n * @param event - The initial click event\n */protected _onPlaylistToggleMode(event:JQuery.ClickEvent):void;/**\n * Handle editing a Sound within a PLaylist\n * @param event - The initial click event\n */protected _onSoundEdit(event:JQuery.ClickEvent):void;/**\n * Modify the playback state of a Sound within a Playlist\n * @param event - The initial click event\n */protected _onSoundPlay(event:JQuery.ClickEvent,playing:boolean):void;/**\n * Handle volume adjustments to sounds within a Playlist\n * @param event - The initial change event\n */protected _onSoundVolume(event:JQuery.ChangeEvent):void;/**\n * Handle changes to the sound playback mode\n * @param event - The initial click event\n */protected _onSoundToggleMode(event:JQuery.ClickEvent):void;/**\n * Handle Playlist track deletion request\n */protected _onSoundDelete(event:JQuery.ClickEvent):void;/**\n * Handle right click context-menu options on a Playlist or a Sound\n */protected _contextMenu(html:JQuery):void;/**\n * Get context menu options for individual sound effects\n * @returns The context options for each sound\n */protected _getSoundContextOptions():ContextMenuEntry[];}declare namespace PlaylistDirectory{interface Data{user:User;isGM:boolean;entities:PlaylistEntity[];playlistModifier:ReturnType<typeof AudioHelper['volumeToInput']>;ambientModifier:ReturnType<typeof AudioHelper['volumeToInput']>;interfaceModifier:ReturnType<typeof AudioHelper['volumeToInput']>;}interface PlaylistEntity extends foundry.utils.Duplicated<Playlist.Data>{modeIcon:string;modeTooltip:string;disabled:boolean;controlCSS:string;expanded:boolean;sounds:Sound[];}interface Sound extends foundry.utils.Duplicated<Playlist.Sound>{lvolume:ReturnType<typeof AudioHelper['volumeToInput']>;controlCSS:string;}interface Options extends SidebarDirectory.Options{/**\n * @defaultValue The `dragSelector` of the first entry is `'.playlist-name'`.\n */\ndragDrop:SidebarDirectory.Options['dragDrop'];/**\n * @defaultValue `['name', 'playing', 'mode']`\n */\nrenderUpdateKeys:string[];}}"
    ]
  