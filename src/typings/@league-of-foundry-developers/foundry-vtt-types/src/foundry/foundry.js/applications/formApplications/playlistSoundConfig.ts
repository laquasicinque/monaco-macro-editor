
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\playlistSoundConfig.d.ts",
      "/**\n * Playlist Sound Configuration Sheet\n * @typeParam P - the type of the options object\n */declare class PlaylistSoundConfig<P extends FormApplication.Options=FormApplication.Options>extends FormApplication<\nP,PlaylistSoundConfig.Data,Playlist.Sound>{/**\n * @param playlist - The Playlist entity within which the Sound is configured\n * @param sound    - An Object for the Playlist Sound data\n * @param options  - Additional application rendering options\n */constructor(playlist:PlaylistSoundConfig['playlist'],sound:Playlist.Sound,options:Partial<P>);playlist:Playlist;/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   id: \"track-config\",\n *   template: \"templates/playlist/edit-track.html\",\n *   width: 360\n * });\n * ```\n */static get defaultOptions():typeof FormApplication['defaultOptions'];/**\n * @override\n */get title():string;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):PlaylistSoundConfig.Data;/**\n * @param event - (unused)\n * @override\n */protected _updateObject(event:Event,formData:PlaylistSoundConfig.FormData):Promise<Playlist>;/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * Auto-populate the track name using the provided filename, if a name is not already set\n */protected _onSourceChange(event:JQuery.ChangeEvent):void;}declare namespace PlaylistSoundConfig{interface Data extends foundry.utils.Duplicated<PlaylistSoundConfig['object']>{lvolume:number;}type FormData=Pick<Data,'lvolume'>&Pick<Playlist.Sound,'name'|'path'|'repeat'|'streaming'>;}"
    ]
  