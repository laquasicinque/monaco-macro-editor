
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebar.d.ts",
      "/**\n * Render the Sidebar container, and after rendering insert Sidebar tabs.\n * @typeParam Options - the type of the options object\n */declare class Sidebar<Options extends Application.Options=Application.Options>extends Application<Options>{/**\n * Singleton application instances for each sidebar tab\n * @defaultValue `{}`\n */\ntabs:Partial<Record<string,SidebarTab>>;/**\n * Track whether the sidebar container is currently collapsed\n * @defaultValue `false`\n * @internal\n */protected _collapsed:boolean;/**\n * @override\n * @defaultValue\n * ```ts\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   id: \"sidebar\",\n *   template: \"templates/sidebar/sidebar.html\",\n *   popOut: false,\n *   width: 300,\n *   tabs: [{navSelector: \".tabs\", contentSelector: \"#sidebar\", initial: \"chat\"}]\n * }\n * ```\n */static get defaultOptions():Application.Options;/**\n * Return the name of the active Sidebar tab\n */get activeTab():string;/**\n * Singleton application instances for each popout tab\n */get popouts():Partial<Record<string,SidebarTab>>;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<Options>):Sidebar.Data;/**\n * @override\n * @internal\n */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/**\n * Activate a Sidebar tab by it's name\n * @param tabName - The tab name corresponding to it's \"data-tab\" attribute\n */\nactivateTab(tabName:string):void;/**\n * Expand the Sidebar container from a collapsed state.\n * Take no action if the sidebar is already expanded.\n */\nexpand():void;/**\n * Collapse the sidebar to a minimized state.\n * Take no action if the sidebar is already collapsed.\n */\ncollapse():void;/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * @param event - (unused)\n * @param tabs - (unused)\n * @override\n * @internal\n */protected _onChangeTab(event:MouseEvent|null,tabs:Tabs,active:string):void;/**\n * Handle right-click events on tab controls to trigger pop-out containers for each tab\n * @param event - The originating contextmenu event\n * @internal\n */protected _onRightClickTab(event:MouseEvent):void;/**\n * Handle toggling of the Sidebar container's collapsed or expanded state\n * @internal\n */protected _onToggleCollapse(event:MouseEvent):void;}declare namespace Sidebar{interface Data{coreUpdate:string|false;systemUpdate:string|false;user:Game['user'];}}"
    ]
  