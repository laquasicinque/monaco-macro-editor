
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\tokenConfig.d.ts",
      "/**\n * A Token Configuration Application\n * @typeParam P - the type of the options object\n */declare class TokenConfig<P extends TokenConfig.Options=TokenConfig.Options>extends FormApplication<\nP,TokenConfig.Data,Token>{/**\n * @param token   - The Token object for which settings are being configured\n * @param options - TokenConfig ui options (see Application)\n */constructor(token:Token,options?:Partial<P>);/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"token-sheet\"],\n *   template: \"templates/scene/token-config.html\",\n *   width: 480,\n *   height: \"auto\",\n *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"character\"}]\n * });\n * ```\n */static get defaultOptions():TokenConfig.Options;/** @override */get id():string;/**\n * Convenience access for the Token object\n */get token():this['object'];/**\n * Convenience access for the Token's linked Actor, if any\n */get actor():this['token']['actor'];/** @override */get title():string;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):Promise<TokenConfig.Data>;/** @override */\nrender(force?:boolean,options?:Application.RenderOptions<P>):Promise<void>;/**\n * Inspect the Actor data model and identify the set of attributes which could be used for a Token Bar\n */static getTrackedAttributeChoices(attributes:TokenConfig.Attributes):Partial<Record<string,string[]>>;/**\n * Test whether an individual data object is a valid attribute - containing both a \"value\" and \"max\" field\n * @param data  - The data object to search\n * @param _path - The attribute path being recursed\n *                (default: `[]`)\n * @returns An object containing both bar and value attribute paths\n */protected static getTrackedAttributes(data:object,_path:string[]):TokenConfig.Attributes;/**\n * Get an Object of image paths and filenames to display in the Token sheet\n */protected _getAlternateTokenImages():Promise<Partial<Record<string,string>>>;/** @override */\nactivateListeners(html:JQuery):void;/** @override */protected _getSubmitData(updateData?:TokenConfig.FormData):ReturnType<FormApplication['_getSubmitData']>&{lightAlpha:number};/** @override */protected _updateObject(event:Event,formData:TokenConfig.FormData):Promise<void>;/**\n * Update certain fields of a linked actor token when token configuration is changed\n * @param tokenData - The new token data\n */protected _updateActorData(tokenData:TokenConfig.FormData):ReturnType<Actor['update']>|void;/**\n * Handle Token assignment requests to update the default prototype Token\n * @param event - The left-click event on the assign token button\n */protected _onAssignToken(event:JQuery.ClickEvent):Promise<void>;/**\n * Handle changing the attribute bar in the drop-down selector to update the default current and max value\n */protected _onBarChange(ev:JQuery.ChangeEvent):Promise<void>;}declare namespace TokenConfig{interface Attributes{bar:string[][];value:string[][];}interface Data{cssClasses:'prototype'|'';isPrototype:Options['configureDefault'];hasAlternates:boolean;alternateImages:TokenConfig['_getAlternateTokenImages']|[];object:foundry.utils.Duplicated<TokenConfig['token']['data']>;options:TokenConfig['options'];gridUnits:Scene['data']['gridUnits']|Game['system']['gridUnits'];barAttributes:ReturnType<typeof TokenConfig['getTrackedAttributeChoices']>;bar1:ReturnType<TokenConfig['object']['getBarAttribute']>;bar2:ReturnType<TokenConfig['object']['getBarAttribute']>;displayModes:Record<foundry.CONST.TokenDisplayMode,string>;actors:Array<Pick<Actor,'_id'|'name'>>;dispositions:Record<foundry.CONST.TokenDisposition,string>;lightAnimations:{[Key in keyof typeof CONFIG['Canvas']['lightAnimations']]:string}&{'':'None'};lightAlpha:number;isGM:User['isGM'];}interface FormData{actorId:Token.Data['actorId'];actorLink:Token.Data['actorLink'];alternateImages?:string;'bar1.attribute':Token.Data['bar1']['attribute'];'bar2.attribute':Token.Data['bar2']['attribute'];brightLight:Token.Data['brightLight']|null;brightSight:Token.Data['brightSight']|null;dimLight:Token.Data['dimLight']|null;dimSight:Token.Data['dimSight']|null;displayBars:Token.Data['displayBars'];displayName:Token.Data['displayName'];disposition:Token.Data['disposition'];elevation:Token.Data['elevation']|null;height:Token.Data['height']|null;img:Token.Data['img'];lightAlpha:Token.Data['lightAlpha'];lightAngle:Token.Data['lightAngle']|null;'lightAnimation.intensity':Token.Data['lightAnimation']['intensity'];'lightAnimation.speed':Token.Data['lightAnimation']['speed'];'lightAnimation.type':Token.Data['lightAnimation']['type'];lightColor:Token.Data['lightColor'];lockRotation:Token.Data['lockRotation'];mirrorX:Token.Data['mirrorX'];mirrorY:Token.Data['mirrorY'];name:Token.Data['name'];rotation:Token.Data['rotation']|null;scale:Token.Data['scale'];sightAngle:Token.Data['sightAngle']|null;tint:Token.Data['tint'];vision:Token.Data['vision'];width:Token.Data['width']|null;x:Token.Data['x']|null;y:Token.Data['y']|null;}interface Options extends FormApplication.Options{/**\n * Configure the default actor token on submit\n */\nconfigureDefault?:boolean;}}"
    ]
  