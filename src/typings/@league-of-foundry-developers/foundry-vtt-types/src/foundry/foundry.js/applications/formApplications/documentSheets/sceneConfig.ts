
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\sceneConfig.d.ts",
      "/**\n * A Scene configuration sheet\n * @see {@link Scene} The Scene Entity which is being configured\n */declare class SceneConfig extends DocumentSheet<DocumentSheet.Options,SceneConfig.Data,Scene>{/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"scene-sheet\"],\n *   template: \"templates/scene/config.html\",\n *   width: 680,\n *   height: \"auto\"\n * });\n * ```\n */static get defaultOptions():typeof DocumentSheet['defaultOptions'];/**\n * @override\n */get id():string;/**\n * @override\n */get title():string;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<DocumentSheet.Options>):SceneConfig.Data;/**\n * Get an enumeration of the available grid types which can be applied to this Scene\n */protected static _getGridTypes():Record<foundry.CONST.GridType,string>;/**\n * Get the available weather effect types which can be applied to this Scene\n */protected _getWeatherTypes():Record<string,string>;/**\n * Get the alphabetized entities which can be chosen as a configuration for the scene\n */protected _getEntities(collection:EntityCollection):{_id:string;name:string}[];/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * Capture the current Scene position and zoom level as the initial view in the Scene config\n * @param event - The originating click event\n */protected _onCapturePosition(event:JQuery.ClickEvent):void;/**\n * @override\n */protected _onChangeRange(event:JQuery.ChangeEvent):void;/**\n * Handle click events to open the grid configuration application\n * @param event - The originating click event\n */protected _onGridConfig(event:JQuery.ClickEvent):SceneConfig['minimize'];/**\n * @override\n */protected _updateObject(event:Event,formData:SceneConfig.FormData):Promise<Scene>;}declare namespace SceneConfig{interface Data extends DocumentSheet.Data{gridTypes:ReturnType<typeof SceneConfig['_getGridTypes']>;weatherTypes:ReturnType<SceneConfig['_getWeatherTypes']>;playlists:ReturnType<SceneConfig['_getEntities']>;journals:ReturnType<SceneConfig['_getEntities']>;hasGlobalThreshold:boolean;document:DocumentSheet.Data['document']&{/**\n * @defaultValue `0`\n */\nglobalLightThreshold:number;};}type FormData={backgroundColor:Scene.Data['backgroundColor'];darkness:Scene.Data['darkness'];fogExploration:Scene.Data['fogExploration'];globalLight:Scene.Data['globalLight'];globalLightThreshold:Scene.Data['globalLightThreshold'];grid:GridConfig.FormData['grid'];gridAlpha:Scene.Data['gridAlpha'];gridColor:Scene.Data['gridColor'];gridDistance:Scene.Data['gridDistance']|null;gridType:foundry.CONST.GridType;gridUnits:Scene.Data['gridUnits'];hasGlobalThreshold:boolean;height:Scene.Data['height']|null;img:Scene.Data['img'];'initial.scale':number|null;'initial.x':number|null;'initial.y':number|null;journal:Scene.Data['journal'];name:string;navName:Scene.Data['navName'];navigation:Scene.Data['navigation'];padding:Scene.Data['padding'];'permission.default':Scene.Data['permission'];playlist:Scene.Data['playlist'];shiftX:GridConfig.FormData['shiftX'];shiftY:GridConfig.FormData['shiftY'];tokenVision:Scene.Data['tokenVision'];weather:Scene.Data['weather'];width:Scene.Data['width']|null;};}"
    ]
  