
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\cameraViews.d.ts",
      "/**\n * The Camera UI View that displays all the camera feeds as individual video elements.\n * @typeParam P - the type of the options object\n */declare class CameraViews<P extends Application.Options=Application.Options>extends Application<P>{/**\n * @param webrtc - The WebRTC Implementation to display\n *                 (unused)\n */constructor(webrtc?:any,options?:Partial<P>);/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   id: \"camera-views\",\n *   template: \"templates/hud/camera-views.html\",\n *   popOut: false\n * });\n * ```\n */static get defaultOptions():typeof Application['defaultOptions'];/**\n * A reference to the master AV orchestrator instance\n */get webrtc():Game['webrtc'];/**\n * Obtain a reference to the div.camera-view which is used to portray a given Foundry User.\n * @param userId - The ID of the User entity\n */\ngetUserCameraView(userId:string):HTMLElement|null;/**\n * Obtain a reference to the video.user-camera which displays the video channel for a requested Foundry User.\n * If the user is not broadcasting video this will return null.\n * @param userId - The ID of the User entity\n */\ngetUserVideoElement(userId:string):HTMLVideoElement|null;/**\n * Sets whether a user is currently speaking or not\n *\n * @param userId   - The ID of the user\n * @param speaking - Whether the user is speaking\n */\nsetUserIsSpeaking(userId:string,speaking:boolean):void;/**\n * Extend the render logic to first check whether a render is necessary based on the context\n * If a specific context was provided, make sure an update to the navigation is necessary before rendering\n */\nrender(force?:boolean,context?:Application.RenderOptions<P>):Application['render'];/** @override */protected _render(force?:boolean,options?:Application.RenderOptions<P>):Promise<void>;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):CameraViews.Data;maxZ:number;/**\n * Prepare rendering data for a single user\n */protected _getDataForUser(userId:string,settings:AVSettings.UserSettings):CameraViews.Data.User|null;/**\n * A custom sorting function that orders/arranges the user display frames\n */protected static _sortUsers(a:CameraViews.Data.User,b:CameraViews.Data.User):number;/** @override */\nactivateListeners(html:JQuery):void;/**\n * On hover in a camera container, show/hide the controls.\n * @param event - The original mouseover or mouseout hover event\n */protected _onCameraViewHover(event:JQuery.MouseEnterEvent|JQuery.MouseLeaveEvent):void;/**\n * On clicking on a toggle, disable/enable the audio or video stream.\n * @param event - The originating click event\n */protected _onClickControl(event:JQuery.ClickEvent):Promise<void>;/**\n * Change volume control for a stream\n * @param event - The originating change event from interaction with the range input\n */protected _onVolumeChange(event:JQuery.ChangeEvent):void;/**\n * Dynamically refresh the state of a single camera view\n * @param view - The view container div\n */protected _refreshView(view:HTMLElement):void;/**\n * Render changes needed to the PlayerList ui.\n * Show/Hide players depending on option.\n */protected _setPlayerListVisibility():void;/**\n * Get the icon class that should be used for various action buttons with different toggled states.\n * The returned icon should represent the visual status of the NEXT state (not the CURRENT state).\n *\n * @param action - The named av-control button action\n * @param state  - The CURRENT action state.\n * @returns The icon that represents the NEXT action state.\n */protected _getToggleIcon(action:string,state?:boolean):null;/**\n * Get the text title that should be used for various action buttons with different toggled states.\n * The returned title should represent the tooltip of the NEXT state (not the CURRENT state).\n *\n * @param action - The named av-control button action\n * @param state - The CURRENT action state.\n * @returns The icon that represents the NEXT action state.\n */protected _getToggleTooltip(action:string,state:boolean):string;/**\n * Show or hide UI control elements\n * This replaces the use of jquery.show/hide as it simply adds a class which has display:none\n * which allows us to have elements with display:flex which can be hidden then shown without\n * breaking their display style.\n * This will show/hide the toggle buttons, volume controls and overlay sidebars\n * @param container - The container for which to show/hide control elements\n * @param show      - Whether to show or hide the controls\n * @param selector  - Override selector to specify which controls to show or hide\n *                    (default: `'.control-bar'`)\n */protected _toggleControlVisibility(container:HTMLElement,show:boolean,selector?:string):void;}declare namespace CameraViews{interface Data{self:Game['user'];users:CameraViews.Data.User[];dockClass:string;muteAll:boolean;}namespace Data{interface User{user:globalThis.User;id:globalThis.User['id'];local:globalThis.User['isSelf'];name:globalThis.User['name'];color:globalThis.User['data']['color'];colorAlpha:ReturnType<typeof foundry.utils.hexToRGBAString>;charname:string;avatar:globalThis.User['avatar'];settings:AVSettings.UserSettings;volume:ReturnType<typeof AudioHelper['volumeToInput']>;cameraViewClass:ReturnType<Array<string>['filterJoin']>;}}}"
    ]
  