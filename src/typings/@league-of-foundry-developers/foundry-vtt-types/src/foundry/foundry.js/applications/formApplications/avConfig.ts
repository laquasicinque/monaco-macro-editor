
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\avConfig.d.ts",
      "/**\n * Audio/Video Conferencing Configuration Sheet\n */declare class AVConfig extends FormApplication<AVConfig.Options,AVConfig.Data,AVMaster>{/** @override */static get defaultOptions():AVConfig.Options;/** @override */\ngetData(options:Partial<AVConfig.Options>):Promise<AVConfig.Data>;/** @override */\nactivateListeners(html:JQuery):void;/**\n * Set a section's input to enabled or disabled\n * @param selector - Selector for the section to enable or disable\n * @param enabled  - Whether to enable or disable this section\n *                   (default: true)\n */protected _setConfigSectionEnabled(selector:string,enabled?:boolean):void;/**\n * Determine whether a given video or audio source, or audio sink has become\n * unavailable since the last time it was set.\n * @param sources - The available devices\n * @param source  - The selected device\n */protected _isSourceUnavailable(sources:Record<string,string>,source:string):boolean;/**\n * Callback when the server type changes\n * Will enable or disable the server section based on whether the user selected a custom server or not\n * @param event - The event that triggered the server type change\n */protected _onServerTypeChanged(event:JQuery.ChangeEvent):void;/**\n * Callback when the turn server type changes\n * Will enable or disable the turn section based on whether the user selected a custom turn or not\n * @param event - The event that triggered the turn server type change\n */protected _onTurnTypeChanged(event:JQuery.ChangeEvent):void;/**\n * Handle the assignment of a push-to-talk/push-to-mute key\n */protected _onPTTKeyDown(event:JQuery.KeyDownEvent):void;/**\n * Handle the assignment of a push-to-talk/push-to-mute mouse key\n */protected _onPTTMouseDown(event:JQuery.MouseDownEvent):void;/** @override */protected _updateObject(event:Event,formData?:object):Promise<void>;}declare namespace AVConfig{interface Options extends FormApplication.Options{/**\n * @defaultValue `game.i18n.localize('WEBRTC.Title')`\n */\ntitle:string;/**\n * @defaultValue `'av-config'`\n */\nid:string;/**\n * @defaultValue `'templates/sidebar/apps/av-config.html'`\n */\ntemplate:string;/**\n * @defaultValue `true`\n */\npopOut:boolean;/**\n * @defaultValue `480`\n */\nwidth:number;/**\n * @defaultValue `'auto'`\n */\nheight:number|'auto';/**\n * @defaultValue `[{navSelector: '.tabs', contentSelector: 'form', initial: 'general'}]`\n */\ntabs:(TabsConfiguration&{contentSelector:string;initial:string})[];}interface Data{user:Game['user'];modes:{[Key in ValueOf<typeof AVSettings.AV_MODES>]:string;};voiceModes:{[Key in ValueOf<typeof AVSettings.VOICE_MODES>]:string;};serverTypes:{FVTT:string;custom:string;};turnTypes:{FVTT:string;custom:string;};settings:AVSettings;canSelectMode:boolean;noSSL:boolean;videoSources:Record<string,string>;audioSources:Record<string,string>;audioSinks:Record<string,string>|false;videoSrcUnavailable:boolean;audioSrcUnavailable:boolean;audioSinkUnavailable:boolean;audioDisabled:boolean;videoDisabled:boolean;}}"
    ]
  