
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\dialog.d.ts",
      "/**\n * Create a modal dialog window displaying a title, a message, and a set of buttons which trigger callback functions.\n *\n * @example <caption>Constructing a custom dialog instance</caption>\n * ```typescript\n * let d = new Dialog({\n *  title: \"Test Dialog\",\n *  content: \"<p>You must choose either Option 1, or Option 2</p>\",\n *  buttons: {\n *   one: {\n *    icon: '<i class=\"fas fa-check\"></i>',\n *    label: \"Option One\",\n *    callback: () => console.log(\"Chose One\")\n *   },\n *   two: {\n *    icon: '<i class=\"fas fa-times\"></i>',\n *    label: \"Option Two\",\n *    callback: () => console.log(\"Chose Two\")\n *   }\n *  },\n *  default: \"two\",\n *  render: html => console.log(\"Register interactivity in the rendered dialog\"),\n *  close: html => console.log(\"This always is logged no matter which option is chosen\")\n * });\n * d.render(true);\n * ```\n * @typeParam Options - the type of the options object\n */declare class Dialog<Options extends Dialog.Options=Dialog.Options>extends Application<Options>{/**\n * @param data    - An object of dialog data which configures how the modal window is rendered\n * @param options - Dialog rendering options, see {@link Application}\n */constructor(data:Dialog.Data,options?:Partial<Options>);data:Dialog.Data;/**\n * @override\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   template: \"templates/hud/dialog.html\",\n *   classes: [\"dialog\"],\n *   width: 400,\n *   jQuery: true\n * })\n * ```\n */static get defaultOptions():Dialog.Options;/**\n * @override\n */static get title():string;/**\n * @override\n */\ngetData(options?:Partial<Options>):{content:string;buttons:Record<string,Dialog.Button>};/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * Handle a left-mouse click on one of the dialog choice buttons\n * @param event - The left-mouse click event\n */protected _onClickButton(event:MouseEvent):void;/**\n * Handle a keydown event while the dialog is active\n * @param event - The keydown event\n */protected _onKeyDown(event:KeyboardEvent&{key:'Escape'}):Promise<void>;protected _onKeyDown(event:KeyboardEvent):void;/**\n * Submit the Dialog by selecting one of its buttons\n * @param button - The configuration of the chosen button\n */protected submit(button:Dialog.Button):void;/**\n * @override\n */\nclose(options?:Application.CloseOptions):Promise<void>;/**\n * A helper factory method to create simple confirmation dialog windows which consist of simple yes/no prompts.\n * If you require more flexibility, a custom Dialog instance is preferred.\n *\n * @param config - Confirmation dialog configuration\n *                 (defaultValue: `{}`)\n * @returns A promise which resolves once the user makes a choice or closes the window\n *\n * @example\n * ```typescript\n * let d = Dialog.confirm({\n *  title: \"A Yes or No Question\",\n *  content: \"<p>Choose wisely.</p>\",\n *  yes: () => console.log(\"You chose ... wisely\"),\n *  no: () => console.log(\"You chose ... poorly\"),\n *  defaultYes: false\n * });\n * ```\n */static confirm<Yes=true,No=false>(config:ConfirmConfig<Yes,No,JQuery>&{options?:{jQuery?:true};rejectClose:true}):Promise<Yes|No>;static confirm<Yes=true,No=false>(config:ConfirmConfig<Yes,No,JQuery>&{options?:{jQuery?:true}}):Promise<Yes|No|null>;static confirm<Yes=true,No=false>(config:ConfirmConfig<Yes,No,HTMLElement>&{options:{jQuery:false};rejectClose:true}):Promise<Yes|No>;static confirm<Yes=true,No=false>(config:ConfirmConfig<Yes,No,HTMLElement>&{options:{jQuery:false}}):Promise<Yes|No|null>;static confirm<Yes=true,No=false>(config:ConfirmConfig<Yes,No,JQuery|HTMLElement>&{rejectClose:true}):Promise<Yes|No>;static confirm<Yes=true,No=false>(config?:ConfirmConfig<Yes,No,JQuery|HTMLElement>):Promise<Yes|No|null>;/**\n * A helper factory method to display a basic \"prompt\" style Dialog with a single button\n * @param config - Dialog configuration options\n * @returns A promise which resolves when clicked, or rejects if closed\n */static prompt<T>(config:PromptConfig<T,JQuery>&{options?:{jQuery?:true};rejectClose:false}):Promise<T|null>;static prompt<T>(config:PromptConfig<T,JQuery>&{options?:{jQuery?:true}}):Promise<T>;static prompt<T>(config:PromptConfig<T,HTMLElement>&{options:{jQuery:false};rejectClose:false}):Promise<T|null>;static prompt<T>(config:PromptConfig<T,HTMLElement>&{options:{jQuery:false}}):Promise<T>;static prompt<T>(config:PromptConfig<T,JQuery|HTMLElement>&{rejectClose:false}):Promise<T|null>;static prompt<T>(config:PromptConfig<T,JQuery|HTMLElement>):Promise<T>;}declare namespace Dialog{interface Button<T=unknown>{/**\n * A Font Awesome icon for the button\n */\nicon?:string;/**\n * The label for the button\n */\nlabel?:string;/**\n * A callback function that fires when the button is clicked\n */\ncallback?:(html:JQuery|HTMLElement)=>T;}interface Data{/**\n * The window title\n */\ntitle:string;/**\n * HTML content\n */\ncontent:string;/**\n * A callback function invoked when the dialog is rendered\n */\nrender?:(element:JQuery|HTMLElement)=>void;/**\n * Common callback operations to perform when the dialog is closed\n */\nclose?:(element:JQuery|HTMLElement)=>void;/**\n * The buttons which are displayed as action choices for the dialog\n */\nbuttons:Record<string,Button>;/**\n * The name of the default button which should be triggered on Enter\n */default:string;}interface Options extends Application.Options{/**\n * @defaultValue `400`\n */\nwidth:number;/**\n * @defaultValue `['dialog']`\n */\nclasses:string[];/**\n * @defaultValue `'templates/hud/dialog.html'`\n */\ntemplate:string;/**\n * Whether to provide jQuery objects to callback functions (if true) or plain\n * HTMLElement instances (if false). This is currently true by default but in the\n * future will become false by default.\n * @defaultValue `true`\n */\njQuery:boolean;}}/**\n * @typeParam Yes          - The value returned by the yes callback\n * @typeParam No           - The value returned by the no callback\n * @typeParam JQueryOrHtml - The parameter passed to the callbacks, either JQuery or HTMLElement\n */interface ConfirmConfig<Yes,No,JQueryOrHtml>{/**\n * The confirmation window title\n */\ntitle?:string;/**\n * The confirmation message\n */\ncontent?:string;/**\n * Callback function upon yes\n */\nyes?:(html:JQueryOrHtml)=>Yes;/**\n * Callback function upon no\n */\nno?:(html:JQueryOrHtml)=>No;/**\n * A function to call when the dialog is rendered\n */\nrender?:(html:JQueryOrHtml)=>void;/**\n * Make \"yes\" the default choice?\n * @defaultValue `true`\n */\ndefaultYes?:boolean;/**\n * Reject the Promise if the Dialog is closed without making a choice.\n * @defaultValue `false`\n */\nrejectClose?:boolean;/**\n * Additional rendering options passed to the Dialog\n * @defaultValue `{}`\n */\noptions?:Partial<Dialog.Options>;}/**\n * @typeParam Value        - The value returned by the callback function\n * @typeParam JQueryOrHtml - The parameter passed to the callbacks, either JQuery or HTMLElement\n */interface PromptConfig<Value,JQueryOrHtml>{/**\n * The confirmation window title\n */\ntitle?:string;/**\n * The confirmation message\n */\ncontent?:string;/**\n * The confirmation button text\n */\nlabel?:string;/**\n * A callback function to fire when the button is clicked\n */\ncallback:(html:JQueryOrHtml)=>Value;/**\n * A function that fires after the dialog is rendered\n */\nrender?:(html:JQueryOrHtml)=>void;/**\n * Reject the promise if the dialog is closed without confirming the\n * choice, otherwise resolve as null\n * @defaultValue `true`\n */\nrejectClose?:boolean;/**\n * Additional rendering options\n * @defaultValue `{}`\n */\noptions?:Partial<Dialog.Options>;}"
    ]
  