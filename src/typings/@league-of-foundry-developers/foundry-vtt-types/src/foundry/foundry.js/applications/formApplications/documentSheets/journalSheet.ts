
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\journalSheet.d.ts",
      "import type{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{/**\n * The Application responsible for displaying and editing a single JournalEntry document.\n * @typeParam Options - the type of the options object\n * @typeParam Data    - The data structure used to render the handlebars template.\n */class JournalSheet<\nOptions extends JournalSheet.Options=JournalSheet.Options,Data extends object=JournalSheet.Data<Options>>extends DocumentSheet<Options,Data>{/**\n * @param object  - The JournalEntry instance which is being edited\n * @param options - Application options\n */constructor(object:ConcreteJournalEntry,options?:Partial<Options>);/**\n * The current display mode of the journal. Either 'text' or 'image'.\n * @internal\n */protected _sheetMode:JournalSheet.SheetMode|null;/**\n * The size of the application when it was in text mode, so we can go back\n * to it when we switch modes.\n * @defaultValue `null`\n * @internal\n */protected _textPos:Application.Position|null;/**\n * @override\n * @defaultValue\n * ```ts\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"journal-sheet\"],\n *   width: 720,\n *   height: 800,\n *   resizable: true,\n *   closeOnSubmit: false,\n *   submitOnClose: true,\n *   viewPermission: CONST.ENTITY_PERMISSIONS.NONE\n * })\n * ```\n */static get defaultOptions():JournalSheet.Options;/** @override */get template():string;/** @override */get title():string;/**\n * Guess the default view mode for the sheet based on the player's permissions to the Entry\n * @internal\n */protected _inferDefaultMode():JournalSheet.SheetMode|null;/**@override */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/**\n * @override\n * @internal\n */protected _getHeaderButtons():Application.HeaderButton[];/** @override */\ngetData(options?:Partial<Options>):Promise<Data>|Data;/** @override */protected _updateObject(event:Event,formData:JournalSheet.FormData):ReturnType<DocumentSheet<Options,Data>['_updateObject']>;/**\n * Handle requests to switch the rendered mode of the Journal Entry sheet\n * Save the form before triggering the show request, in case content has changed\n * @param event - The triggering click event\n * @param mode  - The journal mode to display\n * @internal\n */protected _onSwapMode(event:Event,mode:JournalSheet.SheetMode):Promise<void>;/**\n * Handle requests to show the referenced Journal Entry to other Users\n * Save the form before triggering the show request, in case content has changed\n * @param event - The triggering click event\n * @internal\n */protected _onShowPlayers(event:Event):Promise<void>;}namespace JournalSheet{interface Options extends DocumentSheet.Options{sheetMode?:SheetMode|null;}interface Data<Options extends JournalSheet.Options=JournalSheet.Options>extends DocumentSheet.Data<ConcreteJournalEntry,Options>{image:string;folders:ReturnType<NonNullable<Game['folders']>['filter']>;}type SheetMode='text'|'image';interface FormData{content:string;folder:string;name:string;}}}type ConcreteJournalEntry=InstanceType<ConfiguredDocumentClass<typeof JournalEntry>>;"
    ]
  