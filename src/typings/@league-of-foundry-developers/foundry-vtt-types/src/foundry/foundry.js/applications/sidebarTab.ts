
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTab.d.ts",
      "/**\n * An abstract pattern followed by the different tabs of the sidebar\n * @typeParam Options - The type of the options object\n */declare abstract class SidebarTab<\nOptions extends Application.Options=Application.Options>extends Application<Options>{constructor(...args:ConstructorParameters<typeof Application>);/**\n * The base name of this sidebar tab\n * @defaultValue `''`\n */\ntabName:string;/**\n * A reference to the pop-out variant of this SidebarTab, if one exists\n * @defaultValue `null`\n */protected _popout:this|null;/**\n * Denote whether or not this is the original version of the sidebar tab, or a pop-out variant\n * @defaultValue `null`\n */protected _original:this|null;/**\n * @override\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   popOut: false,\n *   width: 300,\n *   height: \"auto\",\n *   baseApplication: \"SidebarTab\"\n * });\n * ```\n */static get defaultOptions():Application.Options;/**  @override */protected _renderInner(data:object):Promise<JQuery>;/** @override */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/** @override */\nrender(force?:boolean,options?:Application.RenderOptions<Options>):unknown;/**\n * Activate this SidebarTab, switching focus to it\n */\nactivate():void;/** @override */\nclose(options?:Application.CloseOptions):Promise<void>;/**\n * Create a second instance of this SidebarTab class which represents a singleton popped-out container\n * @returns The popped out sidebar tab instance\n */\ncreatePopout():this;/**\n * Render the SidebarTab as a pop-out container\n */\nrenderPopout():void;/**\n * Handle lazy loading for sidebar images to only load them once they become observed\n * @param entries  - The entries which are now observed\n * @param observer - The intersection observer instance\n */protected _onLazyLoadImage(entries:IntersectionObserverEntry[],observer:IntersectionObserver):void;}"
    ]
  