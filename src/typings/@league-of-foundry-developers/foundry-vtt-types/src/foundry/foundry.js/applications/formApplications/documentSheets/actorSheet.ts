
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\actorSheet.d.ts",
      "import{ConfiguredDocumentClass,ToObjectFalseType}from'../../../../../types/helperTypes';import{DropData as ClientDocumentMixinDropData}from'../../../clientDocumentMixin';declare global{/**\n * The Application responsible for displaying and editing a single Actor document.\n * This Application is responsible for rendering an actor's attributes and allowing the actor to be edited.\n * @param actor   - The Actor instance being displayed within the sheet.\n * @param options - Additional application configuration options.\n *\n * @typeParam Options - the type of the options object\n * @typeParam Data    - The data structure used to render the handlebars template.\n */class ActorSheet<\nOptions extends ActorSheet.Options=ActorSheet.Options,Data extends object=ActorSheet.Data<Options>>extends DocumentSheet<Options,Data,InstanceType<ConfiguredDocumentClass<typeof Actor>>>{/**\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   height: 720,\n *   width: 800,\n *   template: 'templates/sheets/actor-sheet.html',\n *   closeOnSubmit: false,\n *   submitOnClose: true,\n *   submitOnChange: true,\n *   resizable: true,\n *   baseApplication: 'ActorSheet',\n *   dragDrop: [{ dragSelector: '.item-list .item', dropSelector: null }],\n *   token: null,\n * });\n * ```\n */static get defaultOptions():ActorSheet.Options;/** @override */get id():string;/** @override */get title():string;/**\n * A convenience reference to the Actor entity\n */get actor():this['object'];/**\n * If this Actor Sheet represents a synthetic Token actor, reference the active Token\n */get token():Exclude<this['object']['token']|this['options']['token'],undefined>|null;/** @override */\nclose(options?:FormApplication.CloseOptions):Promise<void>;/**\n * @override\n */\ngetData(options?:Partial<Options>):Data|Promise<Data>;/** @override */protected _getHeaderButtons():Application.HeaderButton[];/** @override */protected _getSubmitData(updateData?:object|null):Partial<Record<string,unknown>>;/** @override */\nactivateListeners(html:JQuery):void;/**\n * Handle requests to configure the Token for the Actor\n */protected _onConfigureToken(event:JQuery.ClickEvent):void;/**\n * Handle requests to configure the default sheet used by this Actor\n */protected _onConfigureSheet(event:JQuery.ClickEvent):void;/**\n * Handle changing the actor profile image by opening a FilePicker\n */protected _onEditImage(event:JQuery.ClickEvent):ReturnType<FilePicker['browse']>;/** @override */protected _canDragStart(selector:string):boolean;/** @override */protected _canDragDrop(selector:string):boolean;/** @override */protected _onDragStart(event:DragEvent):void;/** @override */protected _onDrop(event:DragEvent):Promise<boolean|undefined>|unknown;/**\n * Handle the dropping of ActiveEffect data onto an Actor Sheet\n * @param event - The concluding DragEvent which contains drop data\n * @param data  - The data transfer extracted from the event\n * @returns A data object which describes the result of the drop\n * @remarks This is intentionally typed to return `Promise<unknown>` to\n * allow overriding methods to return whatever they want. The return type is\n * not meant to be used aside from being awaited.\n */protected _onDropActiveEffect(event:DragEvent,data:ActorSheet.DropData.ActiveEffect):Promise<unknown>;/**\n * Handle dropping of an item reference or item data onto an Actor Sheet\n * @param event - The concluding DragEvent which contains drop data\n * @param data  - The data transfer extracted from the event\n * @returns A data object which describes the result of the drop\n * @remarks This is intentionally typed to return `Promise<unknown>` to\n * allow overriding methods to return whatever they want. The return type is\n * not meant to be used aside from being awaited.\n */protected _onDropActor(event:DragEvent,data:ActorSheet.DropData.Actor):Promise<unknown>;/**\n * Handle dropping of an item reference or item data onto an Actor Sheet\n * @param event - The concluding DragEvent which contains drop data\n * @param data  - The data transfer extracted from the event\n * @remarks This is intentionally typed to return `Promise<unknown>` to\n * allow overriding methods to return whatever they want. The return type is\n * not meant to be used aside from being awaited.\n */protected _onDropItem(event:DragEvent,data:ActorSheet.DropData.Item):Promise<unknown>;/**\n * Handle dropping of a Folder on an Actor Sheet.\n * Currently supports dropping a Folder of Items to create all items as owned items.\n * @param event - The concluding DragEvent which contains drop data\n * @param data  - The data transfer extracted from the event\n * @remarks This is intentionally typed to return `Promise<unknown>` to\n * allow overriding methods to return whatever they want. The return type is\n * not meant to be used aside from being awaited.\n */protected _onDropFolder(event:DragEvent,data:ActorSheet.DropData.Folder):Promise<unknown>;/**\n * Handle the final creation of dropped Item data on the Actor.\n * This method is factored out to allow downstream classes the opportunity to override item creation behavior.\n * @param itemData - The item data requested for creation\n */protected _onDropItemCreate(itemData:foundry.data.ItemData['_source'][]|foundry.data.ItemData['_source']):Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;/**\n * Handle a drop event for an existing embedded Item to sort that Item relative to its siblings\n */protected _onSortItem(event:DragEvent,itemData:foundry.data.ItemData['_source']):undefined|Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;}namespace ActorSheet{/**\n * @typeParam Options - the type of the options object\n */interface Data<Options extends ActorSheet.Options=ActorSheet.Options>extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Actor>>,Options>{actor:this['document'];items:ToObjectFalseType<foundry.data.ActorData>['items'];effects:ToObjectFalseType<foundry.data.ActorData>['effects'];}type DropData=|DropData.ActiveEffect|DropData.Actor|DropData.Item|DropData.Folder|(Partial<Record<string,unknown>>&{type:string});namespace DropData{interface ActiveEffect{type:'ActiveEffect';tokenId?:string;actorId?:string;data:foundry.data.ActiveEffectData['_source'];}interface Actor{type:'Actor';}type Item=ClientDocumentMixinDropData<InstanceType<ConfiguredDocumentClass<typeof Item>>>&{type:'Item';};interface Folder{type:'Folder';documentName:foundry.CONST.FolderEntityTypes;id:string;}}interface Options extends DocumentSheet.Options{token?:InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>|null;}}}"
    ]
  