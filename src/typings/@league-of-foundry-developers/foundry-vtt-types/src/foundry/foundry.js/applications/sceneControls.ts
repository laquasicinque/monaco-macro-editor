
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sceneControls.d.ts",
      "declare interface SceneControlTool{name:string;title:string;icon:string;visible?:boolean;toggle?:boolean;active?:boolean;button?:boolean;onClick?:()=>void;}declare interface SceneControl{name:string;title:string;layer:string;icon:string;visible:boolean;tools:SceneControlTool[];activeTool:string;}/**\n * Scene controls navigation menu\n * @typeParam Options - the type of the options object\n */declare class SceneControls<Options extends Application.Options=Application.Options>extends Application<Options>{constructor(options?:Partial<Options>);/**\n * The name of the active Scene Control toolset\n * @defaultValue `\"token\"`\n */\nactiveControl:string;/**\n * The Array of Scene Control buttons which are currently rendered\n */\ncontrols:SceneControl[];/**\n * @override\n * @defaultValue\n * ```\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   width: 100,\n *   id: \"controls\",\n *   template: \"templates/hud/controls.html\",\n *   popOut: false,\n * })\n * ```\n */static get defaultOptions():SceneControls.Options;/**\n * Return the active control set\n */get control():SceneControl|null;/**\n * Return the name of the active tool within the active control set\n */get activeTool():string|null;/**\n * Return the actively controlled tool\n */get tool():SceneControlTool|null;/**\n * A convenience reference for whether the currently active tool is a Ruler\n */get isRuler():boolean;/**\n * Initialize the Scene Controls by obtaining the set of control buttons and rendering the HTML\n * @param options - Options which modify how the controls UI is initialized\n *                  (defaultValue: `{}`)\n */\ninitialize(options?:InitializeOptions):void;/** @override */\ngetData(options?:Partial<Options>):{active:boolean;cssClass:''|'disabled';controls:SceneControl[];};/** @override */\nactivateListeners(html:JQuery):void;/**\n * Handle click events on a Control set\n * @param event - A click event on a tool control\n */protected _onClickLayer(event:JQuery.ClickEvent):void;/**\n * Handle click events on Tool controls\n * @param event - A click event on a tool control\n */protected _onClickTool(event:JQuery.ClickEvent):void;/**\n * Get the set of Control sets and tools that are rendered as the Scene Controls.\n * These controls may be extended using the \"getSceneControlButtons\" Hook.\n */protected _getControlButtons():SceneControl[];}declare namespace SceneControls{export interface Options extends Application.Options{/**\n * @defaultValue `100`\n */\nwidth:number;/**\n * @defaultValue `\"controls\"`\n */\nid:string;/**\n * @defaultValue `\"templates/hud/controls.html\"`\n */\ntemplate:string;/**\n * @defaultValue `false`\n */\npopOut:boolean;}}interface InitializeOptions{/**\n * An optional control set to set as active\n */\ncontrol?:string;/**\n * An optional layer name to target as the active control\n */\nlayer?:string;/**\n * A specific named tool to set as active for the palette\n */\ntool?:string;}"
    ]
  