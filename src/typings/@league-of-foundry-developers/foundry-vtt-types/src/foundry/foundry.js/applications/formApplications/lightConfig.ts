
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\lightConfig.d.ts",
      "/**\n * Light Source Configuration Sheet\n * @typeParam P - the type of the options object\n */declare class LightConfig<P extends FormApplication.Options=FormApplication.Options>extends FormApplication<\nP,LightConfig.Data,AmbientLight>{/**\n * @param light   - The AmbientLight object for which settings are being configured\n * @param options - LightConfig ui options (see Application)\n */constructor(light:AmbientLight,options?:Partial<P>);/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"light-sheet\"],\n *   title: \"LIGHT.ConfigTitle\",\n *   template: \"templates/scene/light-config.html\",\n *   width: 480\n * });\n * ```\n */static get defaultOptions():typeof FormApplication['defaultOptions'];/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):LightConfig.Data;/** @override */\nactivateListeners(html:JQuery):void;/** @override */\nclose(options?:Application.CloseOptions):Promise<void>;/**\n * Preview the change caused by a change on the form by refreshing the display of the light source\n */protected _onPreviewChange(event:JQuery.ChangeEvent):void;/** @override */protected _getSubmitData(updateData?:LightConfig.FormData):ReturnType<FormApplication['_getSubmitData']>&{tintAlpha:number};/**\n * @param event - (unused)\n * @override\n */protected _updateObject(event:Event,formData:LightConfig.FormData):Promise<AmbientLight>;/**\n * Reset the state of the previewed light source object to its original data\n * @param refresh - (default: `true`)\n */protected _resetObject(refresh?:boolean):void;}declare namespace LightConfig{interface Data{object:foundry.utils.Duplicated<LightConfig['object']['data']>;options:LightConfig['options'];submitText:string;lightTypes:LightTypes;lightAnimations:LightAnimations;colorIntensity:number;}interface FormData{angle:AmbientLight.Data['angle']|null;bright:AmbientLight.Data['bright']|null;darknessThreshold:AmbientLight.Data['darknessThreshold'];dim:AmbientLight.Data['dim']|null;'lightAnimation.intensity':AmbientLight.Data['lightAnimation']['intensity'];'lightAnimation.speed':AmbientLight.Data['lightAnimation']['speed'];'lightAnimation.type':AmbientLight.Data['lightAnimation']['type'];rotation:AmbientLight.Data['rotation'];t:AmbientLight.Data['t'];tintAlpha:AmbientLight.Data['tintAlpha'];tintColor:string;x:AmbientLight.Data['x']|null;y:AmbientLight.Data['y']|null;}type LightAnimations={[Key in keyof typeof CONFIG['Canvas']['lightAnimations']]:string;}&{'':'None'};type LightTypes={[Key in keyof typeof foundry.CONST['SOURCE_TYPES']as typeof foundry.CONST['SOURCE_TYPES'][Key]]:`LIGHT.Type${Titlecase<Key>}`;\n  };\n}\n"
    ]
  