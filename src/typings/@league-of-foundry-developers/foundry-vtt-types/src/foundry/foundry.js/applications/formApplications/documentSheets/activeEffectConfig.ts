
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\activeEffectConfig.d.ts",
      "import{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{/**\n * The Application responsible for configuring a single ActiveEffect document within a parent Actor or Item.\n *\n * @typeParam Options - the type of the options object\n * @typeParam Data    - The data structure used to render the handlebars template.\n */class ActiveEffectConfig<\nOptions extends DocumentSheet.Options=ActiveEffectConfig.Options,Data extends object=ActiveEffectConfig.Data>extends DocumentSheet<Options,Data,InstanceType<ConfiguredDocumentClass<typeof ActiveEffect>>>{/**\n * @override\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"active-effect-sheet\"],\n *   template: \"templates/sheets/active-effect-config.html\",\n *   width: 560,\n *   height: \"auto\",\n *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"details\"}]\n * });\n * ```\n */static get defaultOptions():ActiveEffectConfig.Options;/** @override */get title():string;/**\n * @override\n *\n * @remarks The implementation doesn't return a `Promise` but the return type includes it to allow extending\n * classes to do that.\n */\ngetData(options?:Partial<Options>):Data|Promise<Data>;/** @override */\nactivateListeners(html:JQuery):void;/**\n * Provide centralized handling of mouse clicks on control buttons.\n * Delegate responsibility out to action-specific handlers depending on the button action.\n * @param event - The originating click event\n */protected _onEffectControl(event:JQuery.ClickEvent):Promise<this>|void;/**\n * Handle adding a new change to the changes array.\n */protected _addEffectChange():Promise<this>;/**\n * @override\n * @param updateData - (default: `{}`)\n */\n_getSubmitData(updateData?:FormApplication.OnSubmitOptions['updateData']):object;}namespace ActiveEffectConfig{interface Data{effect:ActiveEffectConfig['object']['data'];data:ActiveEffectConfig['object']['data'];isActorEffect:boolean;isItemEffect:boolean;submitText:string;modes:Record<keyof typeof foundry.CONST.ACTIVE_EFFECT_MODES,string>;}type Options=DocumentSheet.Options;}}"
    ]
  