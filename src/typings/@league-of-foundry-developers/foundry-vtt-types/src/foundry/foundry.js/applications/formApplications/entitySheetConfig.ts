
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\entitySheetConfig.d.ts",
      "/**\n * Entity Sheet Configuration Application\n * @typeParam P - the type of the options object\n * @typeParam E - the type of the Entity, this sheet is used to configure\n */declare class EntitySheetConfig<\nP extends FormApplication.Options=FormApplication.Options,E extends Entity=Entity>extends FormApplication<P,EntitySheetConfig.Data,E>{/**\n * @param entity  - The Entity object for which the sheet is being configured\n * @param options - Additional Application options\n */constructor(entity:E,options?:Partial<P>);/**\n * @defaultValue\n * ```typescript\n * const options = super.defaultOptions;\n * options.id = \"sheet-config\";\n * options.template = \"templates/sheets/sheet-config.html\";\n * options.width = 400;\n * ```\n */static get defaultOptions():typeof FormApplication['defaultOptions'];/**\n * Add the Entity name into the window title\n */get title():string;/**\n * Construct and return the data object used to render the HTML template for this form application.\n * @param options - (unused)\n */\ngetData(options?:Partial<P>):EntitySheetConfig.Data<E>;/**\n * This method is called upon form submission after form data is validated\n * @param event    - The initial triggering submission event\n * @param formData - The object of validated form data with which to update the object\n */protected _updateObject(event:Event,formData:EntitySheetConfig.FormData):Promise<void>;/**\n * Initialize the configured Sheet preferences for Entities which support dynamic Sheet assignment\n * Create the configuration structure for supported entities\n * Process any pending sheet registrations\n * Update the default values from settings data\n */static initializeSheets():void;/**\n * Register a sheet class as a candidate which can be used to display entities of a given type\n * @param entityClass - The Entity for which to register a new Sheet option\n * @param scope       - Provide a unique namespace scope for this sheet\n * @param sheetClass  - A defined Application class used to render the sheet\n * @param label       - A human readable label for the sheet name, which will be localized\n * @param types       - An array of entity types for which this sheet should be used\n *                      (default: `[]`)\n * @param makeDefault - Whether to make this sheet the default for provided types\n *                      (default: `false`)\n */static registerSheet(entityClass:ConstructorOf<Entity>,scope:string,sheetClass:ConstructorOf<FormApplication>,{label,types,makeDefault}?:{label?:string;types?:string[];makeDefault?:boolean}):void;protected static _registerSheet({entityClass,id,label,sheetClass,types,makeDefault}:Exclude<EntitySheetConfig.Config,'action'>):void;/**\n * Unregister a sheet class, removing it from the list of available Applications to use for an Entity type\n * @param entityClass - The Entity for which to register a new Sheet option\n * @param scope       - Provide a unique namespace scope for this sheet\n * @param sheetClass  - A defined Application class used to render the sheet\n * @param types       - An Array of types for which this sheet should be removed\n */static unregisterSheet(entityClass:ConstructorOf<Entity>,scope:string,sheetClass:ConstructorOf<FormApplication>,{types}?:{types?:string[]}):void;protected static _unregisterSheet({entityClass,id,types}:Pick<EntitySheetConfig.Config,'entityClass'|'id'|'types'>):void;/**\n * @typeParam T - the string array, passed as the types parameter\n */protected static _getEntityTypes<T extends string[]>(entityClass:any,types:T):T;protected static _getEntityTypes(entityClass:ConstructorOf<Entity>):string[];/**\n * Update the currently default Sheets using a new core world setting\n */protected static _updateDefaultSheets(setting?:Record<'Actor'|'Item',Record<string,string>>):void;protected _pending:EntitySheetConfig.Config[];}declare namespace EntitySheetConfig{interface Config{action:'register'|'unregister';entityClass:ConstructorOf<Entity>;id:string;label:string;sheetClass:ConstructorOf<FormApplication>;types:string[];makeDefault:boolean;}/**\n * @typeParam P - the type of the options object\n * @typeParam E - the type of the entity\n */interface Data<E extends Entity=Entity,P extends FormApplication.Options=FormApplication.Options>{entityName:EntitySheetConfig<P,E>['object']['entity'];isGM:User['isGM'];object:foundry.utils.Duplicated<EntitySheetConfig<P,E>['object']['data']>;options:EntitySheetConfig<P,E>['options'];sheetClass:ReturnType<E['getFlag']>|'';sheetClasses:Record<SheetClass['id'],SheetClass['label']>;defaultClass:SheetClass['id']|null;blankLabel:ReturnType<Localization['localize']>;}type FormData=Pick<Data,'defaultClass'|'sheetClass'>;interface SheetClass{id:string|number;cls?:ConstructorOf<FormApplication>;label:string;default:boolean;}type SheetClasses=Record<string,Record<string,SheetClass>>;}"
    ]
  