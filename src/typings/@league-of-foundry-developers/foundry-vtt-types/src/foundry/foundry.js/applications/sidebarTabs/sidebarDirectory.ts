
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\sidebarTabs\\sidebarDirectory.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredDocumentClassForName}from'../../../../types/helperTypes';import{DropData}from'../../clientDocumentMixin';declare global{/**\n * A shared pattern for the sidebar directory which Actors, Items, and Scenes all use\n * @typeParam Name    - The the type of document being handled by this {@link SidebarDirectory}.\n * @typeParam Options - The type of the options object\n */abstract class SidebarDirectory<\nName extends foundry.CONST.EntityType|'FogExploration',Options extends SidebarDirectory.Options=SidebarDirectory.Options>extends SidebarTab<Options>{constructor(options?:Partial<SidebarDirectory.Options>);/**\n * References to the set of Documents which are displayed in the Sidebar\n */\ndocuments:InstanceType<ConfiguredDocumentClassForName<Name>>[];/**\n * Reference the set of Folders which exist in this Sidebar\n */\nfolders:InstanceType<ConfiguredDocumentClass<typeof Folder>>[];/**\n * A reference to the named Document type that this Sidebar Directory instance displays\n * @defaultValue `'Document'`\n */static documentName:string;/**\n * @override\n * @defaultValue\n * ```typescript\n * const cls = getDocumentClass(this.documentName);\n * const collection = cls.metadata.collection;\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   id: collection,\n *   template: `templates/sidebar/${collection}-directory.html`,\n *   title: `${game.i18n.localize(cls.metadata.label)} Directory`,\n *   renderUpdateKeys: [\"name\", \"img\", \"thumb\", \"permission\", \"sort\", \"sorting\", \"folder\"],\n *   height: \"auto\",\n *   scrollY: [\"ol.directory-list\"],\n *   dragDrop: [{ dragSelector: \".directory-item\",  dropSelector: \".directory-list\"}],\n *   filters: [{inputSelector: 'input[name=\"search\"]', contentSelector: \".directory-list\"}],\n *   contextMenuSelector: \".entity\"\n * });\n * ```\n */static get defaultOptions():SidebarDirectory.Options;/**\n * The WorldCollection instance which this Sidebar Directory displays.\n */static get collection():WorldCollection<\nConfiguredDocumentClassForName<foundry.CONST.EntityType|'FogExploration'>,string>;/**\n * Initialize the content of the directory by categorizing folders and entities into a hierarchical tree structure.\n */\ninitialize():void;tree:SidebarDirectory.Tree<this['documents'][number]>;/**\n * Given an entity type and a list of entities, set up the folder tree for that entity\n * @param folders  - The Array of Folder objects to organize\n * @param entities - The Array of Entity objects to organize\n * @returns A tree structure containing the folders and entities\n */static setupFolders<T extends SidebarDirectory<any,any>>(this:ConstructorOf<T>,folders:T['folders'],entities:T['documents']):SidebarDirectory.Tree<T['documents'][number]>;/**\n * Populate a single folder with child folders and content\n * This method is called recursively when building the folder tree\n * @param allowChildren - (default: `true`)\n */protected static _populate<T extends SidebarDirectory<any,any>>(this:ConstructorOf<T>,folder:T['folders'][number],folders:T['folders'],entities:T['documents'],{allowChildren}?:{allowChildren:boolean;}):[T['folders'],T['documents']];/**\n * @override\n */\nrender(force?:boolean,context?:SidebarDirectory.RenderContext<Options>):this|void;/**\n * @param options - (unused)\n * @override\n * @remarks\n * This implementation doesn't actually return `PlaylistDirectory.Data`, it's only to allow {@link PlaylistDirectory}\n * to override accordingly.\n */\ngetData(options?:Partial<Options>):SidebarDirectory.Data<this['tree']>|PlaylistDirectory.Data;/**\n * @param event - (unused)\n * @override\n */protected _onSearchFilter(event:KeyboardEvent,query:string,rgx:RegExp,html:HTMLElement):void;/**\n * Collapse all subfolders in this directory\n */\ncollapseAll():void;/**\n * Activate event listeners triggered within the Actor Directory HTML\n */\nactivateListeners(html:JQuery):void;/**\n * Handle clicking on an Entity name in the Sidebar directory\n * @param event - The originating click event\n */protected _onClickEntityName(event:JQuery.ClickEvent):void|Promise<void>;/**\n * Handle new creation request\n * @param event - The originating button click event\n */protected _onCreateDocument(event:JQuery.ClickEvent):Promise<InstanceType<ConfiguredDocumentClassForName<Name>>|undefined>;/**\n * Create a new Folder in this SidebarDirectory\n * @param event - The originating button click event\n */protected _onCreateFolder(event:JQuery.ClickEvent):void;/**\n * Handle toggling the collapsed or expanded state of a folder within the directory tab\n * @param event - The originating click event\n */protected _toggleFolder(event:JQuery.ClickEvent):void;/**\n * @override\n */protected _onDragStart(event:DragEvent):void;protected _dragType:string;/** @override */protected _canDragStart(selector:string):boolean;/**\n * Highlight folders as drop targets when a drag event enters or exits their area\n * @param event - The DragEvent which is in progress\n */protected _onDragHighlight(event:JQuery.DragEnterEvent|JQuery.DragLeaveEvent):void;/**\n * @override\n * @remarks\n * The return type could be specified in more detail but it is not supposed to be used and this allows more\n * flexibility for deriving classes.\n */protected _onDrop(event:DragEvent):unknown;/**\n * Handle Document data being dropped into the directory.\n * @param target - The target element\n * @param data   - The data being dropped\n */protected _handleDroppedDocument(target:HTMLElement,data:DropData<InstanceType<ConfiguredDocumentClassForName<Name>>>):Promise<InstanceType<ConfiguredDocumentClassForName<Name>>|undefined>;/**\n * Handle Folder data being dropped into the directory.\n * @param target - The target element\n * @param data   - The data being dropped\n */protected _handleDroppedFolder(target:HTMLElement,data:DropData<InstanceType<ConfiguredDocumentClass<typeof Folder>>>):Promise<InstanceType<ConfiguredDocumentClass<typeof Folder>>|undefined>;/**\n * Default folder context actions\n * @param html - The context menu HTML being rendered for the directory\n */protected _contextMenu(html:JQuery):void;/**\n * Get the set of ContextMenu options which should be used for Folders in a SidebarDirectory\n * @returns The Array of context options passed to the ContextMenu instance\n */protected _getFolderContextOptions():ContextMenuEntry[];/**\n * Get the set of ContextMenu options which should be used for Entities in a SidebarDirectory\n * @returns The Array of context options passed to the ContextMenu instance\n */protected _getEntryContextOptions():ContextMenuEntry[];/**\n * @deprecated since 0.8.0\n */get entities():this['documents'];}namespace SidebarDirectory{interface Data<ConcreteTree extends Tree<foundry.abstract.Document<any,any>>>{user:InstanceType<ConfiguredDocumentClass<typeof User>>;tree:ConcreteTree;canCreate:boolean;sidebarIcon:string;}interface Options extends Application.Options{renderUpdateKeys:string[];contextMenuSelector:string;}type RenderContext<Options extends SidebarDirectory.Options=SidebarDirectory.Options>=\nApplication.RenderOptions<Options>&{action?:string;data?:string;entityType?:string;};interface Tree<ConcreteDocument extends foundry.abstract.Document<any,any>>{root?:boolean;content:ConcreteDocument[];children:(Folder&Tree<ConcreteDocument>)[];}}}"
    ]
  