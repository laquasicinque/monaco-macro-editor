
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\basePlaceableHUDs\\tokenHUD.d.ts",
      "import type{ConfiguredObjectClassForName}from'../../../../types/helperTypes';declare global{/**\n * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Token objects.\n * This interface provides controls for visibility, attribute bars, elevation, status effects, and more.\n * @typeParam Options - the type of the options object\n */class TokenHUD<Options extends Application.Options=Application.Options>extends BasePlaceableHUD<\nConcreteToken,Options>{/**\n * Track whether the status effects control palette is currently expanded or hidden\n * @defaultValue `false`\n * @internal\n */protected _statusEffects:boolean;/**\n * @override\n * @defaultValue\n * ```\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   id: \"token-hud\",\n *   template: \"templates/hud/token-hud.html\"\n * })\n * ```\n */static get defaultOptions():Application.Options;/** @override */\nbind(object:ConcreteToken):void;/**\n * Refresh the currently active state of all status effect icons in the Token HUD selector.\n */\nrefreshStatusIcons():void;/**\n * @override\n * @param _position - (unused)\n */\nsetPosition(_position?:Partial<Application.Position>):void;/** @override */\ngetData(options?:Partial<Application.Options>):ReturnType<BasePlaceableHUD<ConcreteToken>['getData']>&{canConfigure:boolean;canToggleCombat:boolean;displayBar1:boolean;bar1Data:ReturnType<ConcreteToken['document']['getBarAttribute']>;displayBar2:boolean;bar2Data:ReturnType<ConcreteToken['document']['getBarAttribute']>;visibilityClass:string;effectsClass:string;combatClass:string;targetClass:string;statusEffects:ReturnType<TokenHUD['_getStatusEffectChoices']>;};/**\n * Get an array of icon paths which represent valid status effect choices\n * @internal\n */protected _getStatusEffectChoices():Record<string,{id:string;title:string|null;src:string;isActive:boolean;isOverlay:boolean;cssClass:string;}>;/** @override */\nactivateListeners(html:JQuery):void;/** @override */protected _onClickControl(event:JQuery.ClickEvent):unknown;/**\n * Handle initial click to focus an attribute update field\n * @internal\n */protected _onAttributeClick(event:JQuery.ClickEvent):void;/**\n * Force field handling on an Enter keypress even if the value of the field did not change.\n * This is important to suppose use cases with negative number values.\n * @param event - The originating keydown event\n * @internal\n */protected _onAttributeKeydown(event:JQuery.KeyDownEvent):void;/**\n * Handle attribute bar update\n * @internal\n */protected _onAttributeUpdate(event:JQuery.ChangeEvent):void;/**\n * Toggle Token combat state\n * @internal\n */protected _onToggleCombat(event:JQuery.ClickEvent):Promise<void>;/**\n * Handle Token configuration button click\n * @internal\n */protected _onTokenConfig(event:JQuery.ClickEvent):void;/**\n * Handle left-click events to toggle the displayed state of the status effect selection palette\n * @internal\n */protected _onToggleStatusEffects(event:JQuery.ClickEvent):void;/**\n * Assign css selectors for the active state of the status effects selection palette\n * @internal\n */protected _toggleStatusEffects(active:boolean):void;/**\n * Handle toggling a token status effect icon\n * @param overlay - (default: `false`)\n * @internal\n */protected _onToggleEffect(event:JQuery.ClickEvent|JQuery.ContextMenuEvent,{overlay}?:{overlay?:boolean}):Promise<boolean>;/**\n * Handle toggling the target state for this Token\n * @internal\n */protected _onToggleTarget(event:JQuery.ClickEvent):void;}}type ConcreteToken=InstanceType<ConfiguredObjectClassForName<'Token'>>;"
    ]
  