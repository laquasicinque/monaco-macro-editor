
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\documentSheets\\rollTableConfig.d.ts",
      "/**\n * The RollTable configuration sheet\n * @typeParam P - the type of the options object\n */declare class RollTableConfig<P extends DocumentSheet.Options=DocumentSheet.Options>extends DocumentSheet<\nP,RollTableConfig.Data,RollTable>{/**\n * @param table   - The rollable table entity being configured\n * @param options - Additional application rendering options\n */constructor(table:RollTable,options?:Partial<P>);/**\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   classes: [\"sheet\", \"roll-table-config\"],\n *   template: \"templates/sheets/roll-table-config.html\",\n *   width: 720,\n *   height: \"auto\",\n *   closeOnSubmit: false,\n *   viewPermission: ENTITY_PERMISSIONS.OBSERVER,\n *   scrollY: [\"ol.table-results\"],\n *   dragDrop: [{dragSelector: null, dropSelector: null}]\n * })\n * ```\n */static get defaultOptions():typeof DocumentSheet['defaultOptions'];/**\n * @override\n */get title():string;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):RollTableConfig.Data;/**\n * @override\n */\nactivateListeners(html:JQuery):void;/**\n * Handle creating a TableResult in the RollTable entity\n * @param event      - The originating mouse event\n * @param resultData - An optional object of result data to use\n */protected _onCreateResult(event:JQuery.ClickEvent|DragEvent,resultData?:object):Promise<RollTable.Result>;/**\n * Submit the entire form when a table result type is changed, in case there are other active changes\n */protected _onChangeResultType(event:JQuery.ClickEvent):ReturnType<RollTableConfig['_onSubmit']>;/**\n * Handle deleting a TableResult from the RollTable entity\n */protected _onDeleteResult(event:JQuery.ClickEvent):Promise<RollTable.Result>;/**\n * @override\n */protected _onDrop(event:DragEvent):ReturnType<RollTableConfig['_onCreateResult']>;/**\n * Handle changing the actor profile image by opening a FilePicker\n */protected _onEditImage(event:JQuery.ClickEvent):ReturnType<FilePicker['browse']>;/**\n * Handle a button click to re-normalize dice result ranges across all RollTable results\n */protected _onNormalizeResults(event:JQuery.ClickEvent):Promise<RollTable>;/**\n * Handle toggling the drawn status of the result in the table\n */protected _onLockResult(event:JQuery.ClickEvent):Promise<RollTable.Result>;/**\n * Reset the Table to it's original composition with all options unlocked\n */protected _onResetTable(event:JQuery.ClickEvent):Promise<RollTable.Result>;/**\n * Handle drawing a result from the RollTable\n */protected _onRollTable(event:JQuery.ClickEvent):Promise<void>;/**\n * Configure the update object workflow for the Roll Table configuration sheet\n * Additional logic is needed here to reconstruct the results array from the editable fields on the sheet\n * @param event    - The form submission event\n * @param formData - The validated FormData translated into an Object for submission\n */protected _updateObject(event:Event,formData:RollTableConfig.FormData):Promise<RollTable>;/**\n * Display a roulette style animation when a Roll Table result is drawn from the sheet\n * @param results - An Array of drawn table results to highlight\n */protected _animateRoll(results:RollTable.Result[]):Promise<void>;/**\n * Animate a \"roulette\" through the table until arriving at the final loop and a drawn result\n */protected _animateRoulette(ol:HTMLOListElement,drawnIds:string[],nLoops:number,animTime:number,animOffset:number):Promise<void>;/**\n * Display a flashing animation on the selected result to emphasize the draw\n * @param item - The HTML <li> item of the winning result\n */protected _flashResult(item:HTMLElement):Promise<void>;}declare namespace RollTableConfig{interface Data extends DocumentSheet.Data<RollTable>{results:RollTable.Result;resultTypes:{[Key in keyof typeof foundry.CONST['TABLE_RESULT_TYPES']as typeof foundry.CONST['TABLE_RESULT_TYPES'][Key]]:Key;};entityTypes:typeof foundry.CONST['COMPENDIUM_ENTITY_TYPES'];compendiumPacks:string[];}interface FormData extends Pick<RollTable.Data,'description'|'displayRoll'|'formula'|'img'|'name'|'replacement'>{[index:number]:FormDataResult;}interface FormDataResult extends Pick<RollTable.Result,'_id'|'drawn'|'img'|'resultId'|'text'|'type'|'weight'>{rangeH:RollTable.Result['range'][1];rangeL:RollTable.Result['range'][0];}}"
    ]
  