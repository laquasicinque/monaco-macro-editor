
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\filePicker.d.ts",
      "/**\n * The FilePicker application renders contents of the server-side public directory\n * This app allows for navigating and uploading files to the public path\n * @typeParam P - the type of the options object\n */declare class FilePicker<P extends FilePicker.Options=FilePicker.Options>extends Application<P>{/**\n * @param options - Options that configure the behavior of the FilePicker\n */constructor(options?:Partial<P>);/**\n * The full requested path given by the user\n */\nrequest:string|undefined;/**\n * The file sources which are available for browsing\n */\nsources:Partial<FilePicker.Sources>;/**\n * Track the active source tab which is being browsed\n * @defaultValue `'data'`\n */\nactiveSource:FilePicker.DataSource;/**\n * A callback function to trigger once a file has been selected\n */\ncallback:FilePicker.Callback|undefined;/**\n * The latest set of results browsed from the server\n * @remarks This is never set.\n */\nresults:{};/**\n * The general file type which controls the set of extensions which will be accepted\n */type:FilePicker.Type|undefined;/**\n * The target HTML element this file picker is bound to\n */\nfield:HTMLElement|undefined;/**\n * A button which controls the display of the picker UI\n */\nbutton:HTMLElement|undefined;/**\n * The display mode of the FilePicker UI\n * @defaultValue `FilePicker.LAST_DISPLAY_MODE`\n */\ndisplayMode:FilePicker.DisplayMode;/**\n * The current set of file extensions which are being filtered upon\n */\nextensions:string[]|undefined;protected _loaded:boolean;/**\n * Record the last-browsed directory path so that re-opening a different FilePicker instance uses the same target\n * @defaultValue `''`\n */static LAST_BROWSED_DIRECTORY:string;/**\n * Record the last-configured tile size which can automatically be applied to new FilePicker instances\n * @defaultValue `null`\n */static LAST_TILE_SIZE:number|null;/**\n * Record the last-configured display mode so that re-opening a different FilePicker instance uses the same mode.\n * @defaultValue `'list'`\n */static LAST_DISPLAY_MODE:FilePicker.DisplayMode;/**\n * Enumerate the allowed FilePicker display modes\n */static DISPLAY_MODES:['list','thumbs','tiles','images'];/**\n * Cache the names of S3 buckets which can be used\n * @defaultValue `null`\n */static S3_BUCKETS:string[]|null;/**\n * @override\n */static get defaultOptions():FilePicker.Options;/**\n * Given a current file path, determine the directory it belongs to\n * @param target - The currently requested target path\n * @returns An array of the inferred source and target directory path\n */protected _inferCurrentDirectory(target:string|undefined):[string,string];/**\n * Get the valid file extensions for a given named file picker type\n * @param type - The general type of file\n * @returns A list of file extensions\n */protected _getExtensions(type:FilePicker.Type):string[]|undefined;/**\n * Test a URL to see if it matches a well known s3 key pattern\n * @param url - An input URL to test\n * @returns A regular expression match\n */static matchS3URL(url:string):RegExpMatchArray|null;/**\n * Parse a s3 key to learn the bucket and the key prefix used for the request\n * @param key - A fully qualified key name or prefix path\n */static parseS3URL(key:string):{bucket:string|null;keyPrefix:string};/**\n * @override\n */get title():string;/**\n * Return the source object for the currently active source\n */get source():FilePicker.Source;/**\n * Return the target directory for the currently active source\n */get target():string;/**\n * Return a flag for whether the current user is able to upload file content\n */get canUpload():boolean;/**\n * Return the upload URL to which the FilePicker should post uploaded files\n */static get uploadURL():string;/**\n * @param options - (unused)\n * @override\n */\ngetData(options?:Partial<P>):Promise<FilePicker.Data>;/**\n * Browse to a specific location for this FilePicker instance\n * @param target - The target within the currently active source location.\n * @param options - Browsing options (default: `{}`)\n */\nbrowse(target?:string,options?:FilePicker.BrowsingOptions):Promise<FilePicker.BrowseResult>;/**\n * Browse files for a certain directory location\n * @param source  - The source location in which to browse. See FilePicker#sources for details\n * @param target  - The target within the source location (default: `\"\"`)\n * @param options - Optional arguments (default: `{}`)\n *\n * @returns A Promise which resolves to the directories and files contained in the location\n */static browse(source:FilePicker.DataSource,target?:string,options?:FilePicker.BrowsingOptions):Promise<FilePicker.BrowseResult>;/**\n * Configure metadata settings regarding a certain file system path\n * @param source  - The source location in which to browse. See FilePicker#sources for details\n * @param target  - The target within the source location\n * @param options - Optional arguments which modify the request (default: `{}`)\n */static configurePath(source:FilePicker.DataSource,target:string,options?:FilePicker.ConfigurePathOptions):Promise<FilePicker.ConfigurePathResult>;/**\n * Create a subdirectory within a given source. The requested subdirectory path must not already exist.\n * @param source  - The source location in which to browse. See FilePicker#sources for details\n * @param target  - The target within the source location\n * @param options - Optional arguments which modify the request (default: `{}`)\n */static createDirectory(source:FilePicker.DataSource,target:string,options?:FilePicker.CreateDirectoryOptions):Promise<string>;/**\n * General dispatcher method to submit file management commands to the server\n */protected static _manageFiles(data:FilePicker.ManageData,options?:Record<string,unknown>):Promise<Record<string,unknown>>;/**\n * Dispatch a POST request to the server containing a directory path and a file to upload\n * @param source  - The data source to which the file should be uploaded\n * @param path    - The destination path\n * @param file    - The File object to upload\n * @param options - Additional file upload options passed as form data (default `{}`)\n * @returns The response object\n */static upload(source:FilePicker.DataSource,path:string,file:File,options?:FilePicker.UploadOptions):Promise<(Response&{path:string;message?:string})|false|void>;/**\n * Additional actions performed when the file-picker UI is rendered\n */\nrender(force?:boolean,options?:Application.RenderOptions<P>):ReturnType<this['browse']>|void;/** @override */\nactivateListeners(html:JQuery):void;/**\n * Handle a click event to change the display mode of the File Picker\n * @param event - The triggering click event\n */protected _onChangeDisplayMode(event:JQuery.ClickEvent):void;/**\n * @param event - (unused)\n * @param event - (unused)\n * @override\n */protected _onChangeTab(event:MouseEvent|null,tabs:Tabs,active:this['activeSource']):void;/**\n * @param selector - (unused)\n * @override\n */protected _canDragStart(selector:string|null):boolean;/**\n * @param selector - (unused)\n * @override\n */protected _canDragDrop(selector:string|null):this['canUpload'];/**\n * @override\n */protected _onDragStart(event:DragEvent):void;/**\n * @override\n */protected _onDrop(event:DragEvent):Promise<PromisedType<ReturnType<this['browse']>>|void>;/**\n * Handle user submission of the address bar to request an explicit target\n * @param event - The originating keydown event\n */protected _onRequestTarget(event:KeyboardEvent):ReturnType<this['browse']>|void;/**\n * Handle requests from the IntersectionObserver to lazily load an image file\n * @param entries  - The entries which are now observed\n * @param observer - The intersection observer instance\n */protected _onLazyLoadImages(entries:IntersectionObserverEntry[],observer:IntersectionObserver):void;/**\n * Handle file or folder selection within the file picker\n * @param event - The originating click event\n */protected _onPick(event:JQuery.ClickEvent):ReturnType<this['browse']>|void;/**\n * Handle backwards navigation of the fol6der structure\n */protected _onClickDirectoryControl(event:JQuery.ClickEvent):|ReturnType<this['browse']>|Promise<ReturnType<this['browse']>|void|null>|ReturnType<typeof FilePicker['configurePath']>;/**\n * Present the user with a dialog to create a subdirectory within their currently browsed file storate location.\n */protected _createDirectoryDialog(source:FilePicker.Source):Promise<ReturnType<this['browse']>|void|null>;/**\n * Handle changes to the bucket selector\n */protected _onChangeBucket(event:JQuery.ChangeEvent):ReturnType<this['browse']>;/**\n * @param event - (unused)\n * @override\n */protected _onSearchFilter(event:KeyboardEvent,query:string,rgx:RegExp,html:HTMLElement):void;/**\n * Handle file picker form submission\n */protected _onSubmit(ev:Event):void;/**\n * Handle file upload\n */protected _onUpload(ev:Event):Promise<void>;/**\n * Bind the file picker to a new target field.\n * Assumes the user will provide a <button> HTMLElement which has the data-target and data-type attributes\n * The data-target attribute should provide the name of the input field which should receive the selected file\n * The data-type attribute is a string in [\"image\", \"audio\"] which sets the file extensions which will be accepted\n *\n * @param button  - The button element\n */static fromButton(button:HTMLButtonElement):FilePicker;}declare namespace FilePicker{interface BrowseResult{target:string;private:boolean;dirs:string[];privateDirs:string[];files:string[];gridSize?:number;extensions:[];}interface BrowsingOptions{/**\n * A bucket within which to search, if using the S3 source\n * @defaultValue `\"\"`\n */\nbucket?:string;/**\n * An Array of file extensions to filter on\n * @defaultValue `[]` (do not filter on extension)\n */\nextensions?:string[];/**\n * The requested dir represents a wildcard path\n * @defaultValue false\n */\nwildcard?:boolean;}/**\n * A callback function to trigger once a file has been selected\n * @param path - The path that was chosen\n */type Callback=(path:string)=>void;interface ConfigurePathOptions{/**\n * A bucket to use, if using the S3 source\n * @defaultValue `\"\"`\n */\nbucket?:string;/**\n * Set the privacy mode on this path\n * @defaultValue true\n */private?:boolean;/**\n * Set the grid size\n * @defaultValue `undefined`\n */\ngridSize?:number;}interface ConfigurePathResult{private:boolean;gridSize?:number;}interface CreateDirectoryOptions{/**\n * A bucket to use, if using the S3 source\n * @defaultValue `\"\"`\n */\nbucket?:string;}interface Data{bucket:string|null;canGoBack:boolean;canUpload:boolean;canSelect:boolean;cssClass:string;dirs:Dir[];displayMode:FilePicker.DisplayMode;extensions:string[]|undefined;files:File[];isS3:boolean;noResults:boolean;request:string;selected:string|undefined;source:Source;sources:Sources;target:string;tileSize:number|null;user:Game['user'];submitText:'FILES.SelectFolder'|'FILES.SelectFile';}type DataSource='data'|'public'|'s3';interface Dir{name:string;path:string;private:boolean;}type DisplayMode=ValueOf<typeof FilePicker['DISPLAY_MODES']>;interface File{name:string;url:string;img:string;}interface ManageData{action:'browseFiles'|'configurePath'|'createDirectory'|'manageFiles';source:string;target:string;}/**\n * Options for configuring FilePicker\n */interface Options extends Application.Options{/**\n * The current file path being modified, if any\n */\ncurrent?:FilePicker['request'];/**\n * A current file source in \"data\", \"public\", or \"s3\"\n */\nactiveSource?:DataSource;/**\n * A type of file to target, in \"audio\", \"image\", \"video\", \"imagevideo\" or \"folder\"\n */type?:FilePicker['type'];/**\n * An HTML form field that the result of this selection is applied to\n */\nfield?:FilePicker['field'];/**\n * An HTML button element which triggers the display of this picker\n */\nbutton?:FilePicker['button'];/**\n * A callback function to trigger once a file has been selected\n */\ncallback?:Callback;/**\n * @defaultValue `'templates/apps/filepicker.html'`\n */\ntemplate:Application.Options['template'];/**\n * @defaultValue `['filepicker']`\n */\nclasses:Application.Options['classes'];/**\n * @defaultValue `520`\n */\nwidth:Application.Options['width'];/**\n * @defaultValue `[{navSelector: \".tabs\"}]`\n */\ntabs:Application.Options['tabs'];/**\n * @defaultValue `[{dragSelector: '.file', dropSelector: '.filepicker-body'}]`\n */\ndragDrop:Application.Options['dragDrop'];/**\n * @defaultValue `false`\n */\ntileSize:boolean;/**\n * @defaultValue `[{ inputSelector: 'input[name=\"filter\"]', contentSelector: \".filepicker-body\" }]`\n */\nfilters:Application.Options['filters'];}interface Source{target:string;label:string;icon:string;}interface Sources{data:Source;public:Source;s3:Source&{buckets:string[];bucket:string;};}type Type='audio'|'image'|'video'|'imagevideo'|'folder';/**\n * Optional arguments for the `upload` method\n */interface UploadOptions{/**\n * A bucket to upload to, if using the S3 source\n * @defaultValue `\"\"`\n */\nbucket?:string;}}"
    ]
  