
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\formApplications\\gridConfig.d.ts",
      "import type{ConfiguredDocumentClass}from'../../../../types/helperTypes';declare global{/**\n * A tool for fine tuning the grid in a Scene\n * @typeParam Options - the type of the options object\n */class GridConfig<Options extends FormApplication.Options=FormApplication.Options>extends FormApplication<\nOptions,GridConfig.Data,InstanceType<ConfiguredDocumentClass<typeof Scene>>>{constructor(scene:InstanceType<ConfiguredDocumentClass<typeof Scene>>,sheet:GridConfig['sheet'],options?:Partial<Options>);/**\n * Track the Scene Configuration sheet reference\n */\nsheet:SceneConfig;/**\n * The counter-factual dimensions being evaluated\n * @defaultValue `{}`\n * @internal\n */protected _dimensions:Canvas.Dimensions|{};/**\n * A reference to the bound key handler function so it can be removed\n * @defaultValue `null`\n * @internal\n */protected _keyHandler:((event:KeyboardEvent)=>void)|null;/**\n * A reference to the bound mousewheel handler function so it can be removed\n * @defaultValue `null`\n * @internal\n */protected _wheelHandler:((event:WheelEvent)=>void)|null;/**\n * @override\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.defaultOptions, {\n *   id: \"grid-config\",\n *   template: \"templates/scene/grid-config.html\",\n *   title: game.i18n.localize(\"SCENES.GridConfigTool\"),\n *   width: 480,\n *   height: \"auto\",\n *   closeOnSubmit: true,\n *   submitOnChange: true\n * })\n * ```\n */static get defaultOptions():typeof FormApplication['defaultOptions'];/** @override */\ngetData(options?:Partial<Options>):GridConfig.Data;/**\n * @override\n * @internal\n */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/** @override */\nactivateListeners(html:JQuery):void;/** @override */\nclose(options?:FormApplication.CloseOptions):ReturnType<FormApplication['close']>;/**\n * Handle resetting the form and re-drawing back to the original dimensions\n * @param event - The original keydown event\n * @internal\n */protected _onKeyDown(event:KeyboardEvent):void;/**\n * Handle resetting the form and re-drawing back to the original dimensions\n * @param event - The original wheel event\n * @internal\n */protected _onWheel(event:WheelEvent):void;/**\n * Handle resetting the form and re-drawing back to the original dimensions\n * @param event - The original click event\n * @internal\n */protected _onReset(event:JQuery.ClickEvent):void;/**\n * Scale the background size relative to the grid size\n * @param delta - The directional change in background size\n * @internal\n */protected _scaleBackgroundSize(delta:number):void;/**\n * Scale the grid size relative to the background image.\n * When scaling the grid size in this way, constrain the allowed values between 50px and 300px.\n * @param delta - The grid size in pixels\n * @internal\n */protected _scaleGridSize(delta:number):void;/**\n * Shift the background image relative to the grid layer\n * @param deltaX - The number of pixels to shift in the x-direction\n *                 (default: `0`)\n * @param deltaY - The number of pixels to shift in the y-direction\n *                 (default: `0`)\n * @internal\n */protected _shiftBackground({deltaX,deltaY}?:{deltaX?:number;deltaY?:number;}):ReturnType<GridConfig['_refresh']>;/**\n * Temporarily refresh the display of the BackgroundLayer and GridLayer for the new pending dimensions\n * @param background - Refresh the background display?\n *                     (default: `false`)\n * @param grid       - Refresh the grid display?\n *                     (default: `false`)\n * @internal\n */protected _refresh({background,grid}?:{background?:boolean;grid?:boolean}):void;/**\n * @override\n */protected _onChangeInput(event:JQuery.ChangeEvent):void;/**\n * @param event - (unused)\n * @override\n */protected _updateObject(event:Event,formData:GridConfig.FormData):ReturnType<Scene['update']>;}namespace GridConfig{interface Data{gridTypes:ReturnType<typeof SceneConfig['_getGridTypes']>;scale:number;scene:foundry.data.SceneData;}type FormData={gridType:foundry.CONST.GridType;grid:number|null;scale:number|null;shiftX:number|null;shiftY:number|null;};}}"
    ]
  