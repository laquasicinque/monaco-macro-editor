
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\applications\\notifications.d.ts",
      "/**\n * A common framework for displaying notifications to the client.\n * Submitted notifications are added to a queue, and up to 3 notifications are displayed at once.\n * Each notification is displayed for 5 seconds at which point further notifications are pulled from the queue.\n *\n * @example\n * ```typescript\n * ui.notifications.info(\"This is an info message\");\n * ui.notifications.warn(\"This is a warning message\");\n * ui.notifications.error(\"This is an error message\");\n * ui.notifications.info(\"This is a 4th message which will not be shown until the first info message is done\");\n * ```\n *\n * @typeParam Options - the type of the options object\n */declare class Notifications<Options extends Application.Options=Application.Options>extends Application<Options>{constructor(options?:Partial<Options>);/**\n * Submitted notifications which are queued for display\n * @defaultValue `[]`\n */\nqueue:Notifications.Notification[];/**\n * Notifications which are currently displayed\n * @defaultValue `[]`\n */\nactive:JQuery[];/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.defaultOptions, {\n *   popOut: false,\n *   id: \"notifications\",\n *   template: \"templates/hud/notifications.html\"\n * });\n * ```\n */static get defaultOptions():Application.Options;/**\n * Initialize the Notifications system by displaying any system-generated messages which were passed from the server.\n */\ninitialize():void;/** @override */protected _renderInner(data:object):JQuery;/** @override */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/**\n * Push a new notification into the queue\n * @param message   - The content of the notification message\n * @param type      - The type of notification, currently \"info\", \"warning\", and \"error\" are supported\n *                    (default: `'info'`)\n * @param options   - Additional options which affect the notification\n *                    (default: `{}`)\n */\nnotify(message:string,type?:'info'|'warning'|'error',options?:Notifications.Options):void;/**\n * Display a notification with the \"info\" type\n * @param message - The content of the notification message\n * @param options - Notification options passed to the notify function\n */\ninfo(message:string,options?:Notifications.Options):void;/**\n * Display a notification with the \"warning\" type\n * @param message - The content of the notification message\n * @param options - Notification options passed to the notify function\n */\nwarn(message:string,options?:Notifications.Options):void;/**\n * Display a notification with the \"error\" type\n * @param message - The content of the notification message\n * @param options - Notification options passed to the notify function\n */\nerror(message:string,options?:Notifications.Options):void;/**\n * Retrieve a pending notification from the queue and display it\n */protected fetch():void;}declare namespace Notifications{interface Options{/**\n * Whether the notification should be permanently displayed unless otherwise dismissed\n * @defaultValue `false`\n */\npermanent?:boolean;/**\n * Whether to localize the message content before displaying it\n * @defaultValue `false`\n */\nlocalize?:boolean;}interface Notification{message:string;type:'info'|'warning'|'error';timestamp:number;permanent:boolean;}}"
    ]
  