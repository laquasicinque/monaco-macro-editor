
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\mouseInteractionManager.d.ts",
      "/**\n * Handle mouse interaction events for a Canvas object.\n * There are three phases of events: hover, click, and drag\n * @typeParam O - Canvas object this instance handles events for\n * @typeParam T - Target object for mouseinteraction events. Generally a `ControlIcon` or `O`.\n *                (default: `O`)\n *\n * Hover Events:\n * _handleMouseOver\n *  action: hoverIn\n * _handleMouseOut\n *  action: hoverOut\n *\n * Left Click and Double-Click\n * _handleMouseDown\n *  action: clickLeft\n *  action: clickLeft2\n *\n * Right Click and Double-Click\n * _handleRightDown\n *  action: clickRight\n *  action: clickRight2\n *\n * Drag and Drop\n * _handleMouseMove\n *  action: dragLeftStart\n *  action: dragLeftMove\n *  action: dragRightStart\n *  action: dragLeftMove\n * _handleMouseUp\n *  action: dragLeftDrop\n *  action: dragRightDrop\n * _handleDragCancel\n *  action: dragLeftCancel\n *  action: dragRightCancel\n */declare class MouseInteractionManager<O extends PIXI.Container=PIXI.Container,T extends PIXI.Container=O>{/**\n * @param permissions - (default: `{}`)\n * @param callbacks   - (default: `{}`)\n * @param options     - (default: `{}`)\n */constructor(object:O,layer:MouseInteractionManager['layer'],permissions?:MouseInteractionManager['permissions'],callbacks?:MouseInteractionManager['callbacks'],options?:MouseInteractionManager['options']);object:O;layer:PIXI.Container;/**\n * @defaultValue `{}`\n */\npermissions:Partial<\nRecord<MouseInteractionManager.EventNames,((user:User,event:PIXI.InteractionEvent)=>boolean)|boolean>>;/**\n * @defaultValue `{}`\n */\ncallbacks:Partial<\nRecord<MouseInteractionManager.EventNames,((event:Event|PIXI.InteractionEvent)=>unknown)|null>>;/**\n * @defaultValue `{}`\n */\noptions:{target?:string[]|string|null};/**\n * The current interaction state\n * @defaultValue `0`\n */\nstate:ValueOf<typeof MouseInteractionManager['INTERACTION_STATES']>;/**\n * Bound handlers which can be added and removed\n * @defaultValue `{}`\n */\nhandlers:Partial<\nRecord<'contextmenu'|'mousedown'|'mousemove'|'mouseout'|'mouseover'|'mouseup'|'rightdown',Function>>;/**\n * The drag handling time\n * @defaultValue `0`\n */\ndragTime:number;/**\n * The throttling time below which a mouse move event will not be handled\n * @defaultValue `Math.ceil(1000 / canvas.app.ticker.maxFPS)`\n */protected _dragThrottleMS:number;/**\n * The time of the last left-click event\n * @defaultValue `0`\n */\nlcTime:number;/**\n * The time of the last right-click event\n * @defaultValue `0`\n */\nrcTime:number;/**\n * A flag for whether we are right-click dragging\n * @defaultValue `false`\n */protected _dragRight:boolean;/**\n * Get the target\n * @returns `this.object` or `this.object[this.options.target]`\n */get target():T;/**\n * Activate interactivity for the handled object\n */\nactivate():this;/**\n * Test whether the current user has permission to perform a step of the workflow\n * @param action - The action being attempted\n * @param event  - The event being handled\n * @returns Can the action be performed?\n */\ncan(action:MouseInteractionManager.EventNames,event:Event|PIXI.InteractionEvent):boolean;/**\n * Execute a callback function associated with a certain action in the workflow\n * @param action - The action being attempted\n * @param event  - The event being handled\n */\ncallback(action:MouseInteractionManager.EventNames,event:Event|PIXI.InteractionEvent):unknown;/**\n * A reference to the possible interaction states which can be observed\n */get states():typeof MouseInteractionManager['INTERACTION_STATES'];/**\n * Activate a set of listeners which handle hover events on the target object\n */protected _activateHoverEvents():void;/**\n * Activate a new set of listeners for click events on the target object\n */protected _activateClickEvents():void;/**\n * Deactivate event listeners for click events on the target object\n */protected _deactivateClickEvents():void;/**\n * Activate events required for handling a drag-and-drop workflow\n */protected _activateDragEvents():void;/**\n * Deactivate events required for handling drag-and-drop workflow.\n */protected _deactivateDragEvents():void;/**\n * Handle mouse-over events which activate downstream listeners and do not stop propagation.\n */protected _handleMouseOver(event:PIXI.InteractionEvent):unknown;/**\n * Handle mouse-out events which terminate hover workflows and do not stop propagation.\n */protected _handleMouseOut(event:PIXI.InteractionEvent):unknown;/**\n * Handle mouse-down events which activate downstream listeners.\n * Stop further propagation only if the event is allowed by either single or double-click.\n */protected _handleMouseDown(event:PIXI.InteractionEvent):unknown;/**\n * Handle mouse-down which trigger a single left-click workflow.\n */protected _handleClickLeft(event:PIXI.InteractionEvent):void;/**\n * Handle mouse-down which trigger a single left-click workflow.\n */protected _handleClickLeft2(event:PIXI.InteractionEvent):unknown;/**\n * Handle right-click mouse-down events.\n * Stop further propagation only if the event is allowed by either single or double-click.\n */protected _handleRightDown(event:PIXI.InteractionEvent):unknown;/**\n * Handle single right-click actions.\n */protected _handleClickRight(event:PIXI.InteractionEvent):void;/**\n * Handle double right-click actions.\n */protected _handleClickRight2(event:PIXI.InteractionEvent):unknown;/**\n * Handle mouse movement during a drag workflow\n */protected _handleMouseMove(event:PIXI.InteractionEvent):unknown;/**\n * Handle the beginning of a new drag start workflow, moving all controlled objects on the layer\n */protected _handleDragStart(event:PIXI.InteractionEvent):unknown;/**\n * Handle the continuation of a drag workflow, moving all controlled objects on the layer\n */protected _handleDragMove(event:PIXI.InteractionEvent):unknown;/**\n * Handle mouse up events which may optionally conclude a drag workflow\n */protected _handleMouseUp(event:PIXI.InteractionEvent):void;/**\n * Handle the conclusion of a drag workflow, placing all dragged objects back on the layer\n */protected _handleDragDrop(event:PIXI.InteractionEvent):void;/**\n * Handle the cancellation of a drag workflow, resetting back to the original state\n */protected _handleDragCancel(event:PointerEvent):void;/**\n * Enumerate the states of a mouse interaction workflow.\n * 0: NONE - the object is inactive\n * 1: HOVER - the mouse is hovered over the object\n * 2: CLICKED - the object is clicked\n * 3: DRAG - the object is being dragged\n * 4: DROP - the object is being dropped\n */static INTERACTION_STATES:{NONE:0;HOVER:1;CLICKED:2;DRAG:3;DROP:4;};}declare namespace MouseInteractionManager{type EventNames=|'clickLeft'|'clickLeft2'|'clickRight'|'clickRight2'|'dragLeftCancel'|'dragLeftDrop'|'dragLeftMove'|'dragLeftStart'|'dragRightCancel'|'dragRightDrop'|'dragRightMove'|'dragRightStart'|'hoverIn'|'hoverOut';}"
    ]
  