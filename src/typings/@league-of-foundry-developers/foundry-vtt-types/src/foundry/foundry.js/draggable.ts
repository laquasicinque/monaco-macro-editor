
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\draggable.d.ts",
      "/**\n * A UI utility to make an element draggable.\n */declare class Draggable<R extends boolean|undefined=undefined>{constructor(app:Draggable['app'],element:JQuery,handle:Draggable['handle'],resizable?:R);app:Application;element:HTMLElement;handle:HTMLElement;/**\n * @defaultValue `false`\n */\nresizable:R extends boolean?R:false;/**\n * Duplicate the application's starting position to track differences\n * @defaultValue `null`\n */\nposition:foundry.utils.Duplicated<Application.Position>|null;/**\n * Remember event handlers associated with this Draggable class so they may be later unregistered\n */\nhandlers:this['resizable']extends true?Draggable.ResizableHandlers:this['resizable']extends false?Draggable.Handlers:Draggable.Handlers|Draggable.ResizableHandlers;/**\n * Throttle mousemove event handling to 60fps\n * @defaultValue `0`\n */protected _moveTime:number;/**\n * Activate event handling for a Draggable application\n * Attach handlers for floating, dragging, and resizing\n */\nactivateListeners():void;/**\n * Handle the initial mouse click which activates dragging behavior for the application\n */protected _onDragMouseDown(event:Event):void;/**\n * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n */protected _onDragMouseMove(event:Event):void;/**\n * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n */protected _onDragMouseUp(event:Event):void;/**\n * Handle the initial mouse click which activates dragging behavior for the application\n */protected _onResizeMouseDown(event:Event):void;/**\n * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n */protected _onResizeMouseMove(event:Event):void;/**\n * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n */protected _onResizeMouseUp(event:Event):void;}declare namespace Draggable{interface Handlers{click:['click',(e:Event)=>void,{capture:boolean;passive:boolean}];dragDown:['mousedown',(e:Event)=>void,false];dragMove:['mousemove',(e:Event)=>void,false];dragUp:['mouseup',(e:Event)=>void,false];}interface ResizableHandlers extends Handlers{resizeDown:['mousedown',(e:Event)=>void,false];resizeMove:['mousemove',(e:Event)=>void,false];resizeUp:['mouseup',(e:Event)=>void,false];}}"
    ]
  