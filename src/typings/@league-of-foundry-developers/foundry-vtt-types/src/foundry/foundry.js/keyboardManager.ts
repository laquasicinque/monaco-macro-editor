
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\keyboardManager.d.ts",
      "/**\n * A set of helpers and management functions for dealing with user input from keyboard events.\n * {@link https://keycode.info/}\n */declare class KeyboardManager{constructor();/**\n * The set of key codes which are currently depressed (down)\n */protected _downKeys:Set<string>;/**\n * The set of key codes which have been already handled per workflow\n */protected _handled:Set<string>;/**\n * A mapping of movement keys which are pending\n */protected _moveKeys:Set<string>;/**\n * @defaultValue `null`\n */protected _moveTime:number|null;/**\n * @defaultValue `0`\n */protected _tabState:0|1;/**\n * @defaultValue `0`\n */protected _wheelTime:number;/**\n * Specify a rate limit for mouse wheel to gate repeated scrolling.\n * This is especially important for continuous scrolling mice which emit hundreds of events per second.\n * This designates a minimum number of milliseconds which must pass before another wheel event is handled\n */static MOUSE_WHEEL_RATE_LIMIT:50;/**\n * Enumerate the \"digit keys\"\n */static DIGIT_KEYS:['1','2','3','4','5','6','7','8','9','0'];/**\n * Map keys used for movement\n */static MOVEMENT_KEYS:{w:['up'];a:['left'];s:['down'];d:['right'];W:['up'];A:['left'];S:['down'];D:['right'];ArrowUp:['up'];ArrowRight:['right'];ArrowDown:['down'];ArrowLeft:['left'];Numpad1:['down','left'];Numpad2:['down'];Numpad3:['down','right'];Numpad4:['left'];Numpad6:['right'];Numpad7:['up','left'];Numpad8:['up'];Numpad9:['up','right'];};/**\n * Map keys used for canvas zooming\n */static ZOOM_KEYS:{PageUp:'in';PageDown:'out';NumpadAdd:'in';NumpadSubtract:'out';};/**\n * Reset tracking for which keys are in the down and released states\n */protected _reset():void;/**\n * Return whether the key code is currently in the DOWN state\n * @param code - The key code to test\n */\nisDown(code:string):boolean;/**\n * A helper method to test whether, given an Event, the CTRL (or CMD) keys are pressed\n * @param event - The originating event or canvas interaction\n */\nisCtrl(event:Event|PIXI.InteractionEvent):boolean;/**\n * Get a standardized keyboard code for a given event\n * @param event - The originating keypress event\n * @returns The standardized string code to use\n */\ngetKey(event:KeyboardEvent):string;/**\n * The key codes which represent a possible movement key\n */get moveKeys():typeof KeyboardManager.MOVEMENT_KEYS;/**\n * The key codes which represent a digit key\n */get digitKeys():typeof KeyboardManager.DIGIT_KEYS;/**\n * Return the key codes used for zooming the canvas\n */get zoomKeys():typeof KeyboardManager.ZOOM_KEYS;/**\n * Test whether an input currently has focus\n */get hasFocus():boolean;/**\n * Handle a key press into the down position\n * @param event - The originating keyboard event\n */protected _onKeyDown(event:KeyboardEvent):void;/**\n * Handle a key release into the up position\n * @param event - The originating keyboard event\n */protected _onKeyUp(event:KeyboardEvent):void;/**\n * Delegate tracked key codes by dispatching to their various handlers\n * @param event - The keydown or keyup event\n * @param key   - The key being depressed\n * @param up    - A flag for whether the key is down or up\n */protected _handleKeys(event:KeyboardEvent,key:string,up:boolean):void;/**\n * Input events do not fire with isComposing = false at the end of a composition event in Chrome\n * See: https://github.com/w3c/uievents/issues/202\n */protected _onCompositionEnd(event:CompositionEvent):void;/**\n * Master mouse-wheel event keyboard handler\n */protected _onWheel(event:WheelEvent):void;/**\n * Handle TAB keypress events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onTab(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle ESC keypress events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onEscape(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void|Promise<void>;/**\n * Handle SPACE keypress events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onSpace(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void|ReturnType<Set<string>['add']>;/**\n * Handle ALT keypress events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onAlt(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle movement keypress events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onMovement(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle keyboard movement once a small delay has elapsed to allow for multiple simultaneous key-presses.\n */protected _handleMovement(event:KeyboardEvent,layer:PlaceablesLayer<any>):void;/**\n * Handle panning the canvas using CTRL + directional keys\n */protected _handleCanvasPan():ReturnType<Canvas['animatePan']>;/**\n * Handle number key presses\n * @param event     - The original digit key press\n *                    (unused)\n * @param up        - Is it a keyup?\n * @param modifiers - What modifiers affect the keypress?\n */protected _onDigit(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle \"A\" keypress events (CTRL only) to select all objects\n * @param event     - The originating keyboard event\n *                    (unused)\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onKeyA(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle \"C\" keypress events to copy data to clipboard\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onKeyC(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle \"V\" keypress events to paste data from clipboard\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onKeyV(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle Z Keypress Events to generally undo previous actions\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onKeyZ(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void;/**\n * Handle presses to keyboard zoom keys\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onKeyZoom(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void|ReturnType<Canvas['animatePan']>;/**\n * Handle DELETE Keypress Events\n * @param event     - The originating keyboard event\n * @param up        - Is the key being released?\n * @param modifiers - The identified modifiers attached to this keypress\n */protected _onDelete(event:KeyboardEvent,up:boolean,modifiers:KeyboardManager.MetaModifiers):void|Promise<foundry.abstract.Document<any,any>[]|undefined>;}declare namespace KeyboardManager{interface MetaModifiers{key:string;isShift:boolean;isCtrl:boolean;isAlt:boolean;hasFocus:boolean;hasModifier:boolean;}}"
    ]
  