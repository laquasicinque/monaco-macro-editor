
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\game.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredDocumentClassForName,DocumentConstructor}from'../../types/helperTypes';declare global{/**\n * The core Game instance which encapsulates the data, settings, and states relevant for managing the game experience.\n * The singleton instance of the Game class is available as the global variable game.\n */class Game{/**\n * @param view      - The named view which is active for this game instance.\n * @param data      - An object of all the World data vended by the server when the client first connects\n * @param sessionId - The ID of the currently active client session retrieved from the browser cookie\n * @param socket    - The open web-socket which should be used to transact game-state data\n */constructor(view:Game['view'],data:Game.ConstructorData,sessionId:Game['sessionId'],socket:Game['socket']);/**\n * The named view which is currently active.\n * Game views include: join, setup, players, license, game, stream\n */\nview:Game.View;/**\n * The object of world data passed from the server\n */\ndata:Game.Data;/**\n * The id of the active World user, if any\n */\nuserId:string|null;/**\n * The game World which is currently active\n */\nworld:this['data']['world'];/**\n * The System which is used to power this game world\n */\nsystem:this['data']['system'];/**\n * A Map of active modules which are currently enabled in this World\n * @remarks\n * - This is actually defined twice. The second time it has the documentation \"A mapping of installed modules\".\n * - This includes _all_ modules that are installed, not only those that are enabled.\n */\nmodules:Map<string,this['data']['modules'][number]>;/**\n * A mapping of WorldCollection instances, one per primary Document type.\n */\ncollections:foundry.utils.Collection<WorldCollection<DocumentConstructor,string>>;/**\n * A mapping of CompendiumCollection instances, one per Compendium pack.\n */\npacks:foundry.utils.Collection<CompendiumCollection<CompendiumCollection.Metadata>>;/**\n * Localization support\n */\ni18n:Localization;/**\n * The Keyboard Manager\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n * @defaultValue `null`\n */\nkeyboard:KeyboardManager|null;/**\n * The user role permissions setting\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n * @defaultValue `null`\n */\npermissions:Game.Permissions|null;/**\n * The client session id which is currently active\n */\nsessionId:string;/**\n * Client settings which are used to configure application behavior\n */\nsettings:ClientSettings;/**\n * A reference to the open Socket.io connection\n */\nsocket:io.Socket|null;/**\n * A singleton GameTime instance which manages the progression of time within the game world.\n */\ntime:GameTime;/**\n * A singleton reference to the Canvas object which may be used.\n */\ncanvas:Canvas;/**\n * A singleton instance of the Audio Helper class\n */\naudio:AudioHelper;/**\n * A singleton instance of the Video Helper class\n */\nvideo:VideoHelper;/**\n * Whether the Game is running in debug mode\n * @defaultValue `false`\n */\ndebug:boolean;/**\n * A flag for whether texture assets for the game canvas are currently loading\n * @defaultValue `false`\n */\nloading:boolean;/**\n * A flag for whether the Game has successfully reached the \"ready\" hook\n * @defaultValue `false`\n */\nready:boolean;/**\n * Fetch World data and return a Game instance\n * @param view      - The named view being created\n * @param sessionId - The current sessionId of the connecting client\n * @returns A Promise which resolves to the created Game instance\n */static create(view:string,sessionId:string|null):Promise<Game>;/**\n * Establish a live connection to the game server through the socket.io URL\n * @param sessionId - The client session ID with which to establish the connection\n * @returns A promise which resolves to the connected socket, if successful\n */static connect(sessionId:string):Promise<io.Socket>;/**\n * Retrieve the cookies which are attached to the client session\n * @returns The session cookies\n */static getCookies():Record<string,string>;/**\n * Request World data from server and return it\n */static getWorldData(socket:io.Socket):Promise<Game.Data>;/**\n * Get the current World status upon initial connection.\n */static getWorldStatus(socket:io.Socket):Promise<boolean>;/**\n * Configure package data that is currently enabled for this world\n */\nsetupPackages(data:Game.Data):void;/**\n * Return the named scopes which can exist for packages.\n * Scopes are returned in the prioritization order that their content is loaded.\n * @returns An array of string package scopes\n */\ngetPackageScopes():string[];/**\n * Initialize the Game for the current window location\n */\ninitialize():void;/**\n * Display certain usability error messages which are likely to result in the player having a bad experience.\n */protected _displayUsabilityErrors():void;/**\n * Shut down the currently active Game. Requires GameMaster user permission.\n */\nshutDown():Promise<void>;/**\n * Fully set up the game state, initializing Entities, UI applications, and the Canvas\n */\nsetupGame():Promise<void>;/**\n * Initialize game state data by creating WorldCollection instances for every primary Document type\n */\ninitializeEntities():void;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nusers?:ConfiguredCollectionClassForName<'User'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nfolders?:ConfiguredCollectionClassForName<'Folder'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nactors?:ConfiguredCollectionClassForName<'Actor'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nitems?:ConfiguredCollectionClassForName<'Item'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nscenes?:ConfiguredCollectionClassForName<'Scene'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\ncombats?:ConfiguredCollectionClassForName<'Combat'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\njournal?:ConfiguredCollectionClassForName<'JournalEntry'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nmacros?:ConfiguredCollectionClassForName<'Macro'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nplaylists?:ConfiguredCollectionClassForName<'Playlist'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\ntables?:ConfiguredCollectionClassForName<'RollTable'>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nmessages?:ConfiguredCollectionClassForName<'ChatMessage'>;/**\n * Initialize the Compendium packs which are present within this Game\n * Create a Collection which maps each Compendium pack using it's collection ID\n */\ninitializePacks():Promise<this['packs']>;/**\n * Initialize the WebRTC implementation\n */\ninitializeRTC():Promise<boolean>;/**\n * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n */\nwebrtc?:AVMaster;/**\n * Initialize core UI elements\n */\ninitializeUI():void;/**\n * Initialize the game Canvas\n */\ninitializeCanvas():Promise<void>;/**\n * Ensure that necessary fonts have loaded and are ready for use\n * Enforce a maximum timeout in milliseconds.\n * Proceed with rendering after that point even if fonts are not yet available.\n * @param ms - The timeout to delay\n */protected _checkFontsReady(ms:number):Promise<void>;/**\n * Initialize Keyboard and Mouse controls\n */\ninitializeKeyboard():void;/**\n * Register core game settings\n */\nregisterSettings():void;/**\n * Is the current session user authenticated as an application administrator?\n */get isAdmin():boolean;/**\n * The currently connected User entity, or null if Users is not yet initialized\n */get user():StoredDocument<InstanceType<ConfiguredDocumentClass<typeof User>>>|null;/**\n * A convenience accessor for the currently viewed Combat encounter\n */get combat():CombatEncounters['viewed'];/**\n * A state variable which tracks whether or not the game session is currently paused\n */get paused():boolean;/**\n * A convenient reference to the currently active canvas tool\n */get activeTool():string;/**\n * Toggle the pause state of the game\n * Trigger the `pauseGame` Hook when the paused state changes\n * @param pause - The desired pause state. When true, the game will be paused, when false the game will be un-paused.\n * @param push  - Push the pause state change to other connected clients? Requires an GM user.\n *                (default: `false`)\n */\ntogglePause(pause:boolean,push?:boolean):void;/**\n * Log out of the game session by returning to the Join screen\n */\nlogOut():void;/**\n * Activate Socket event listeners which are used to transact game state data with the server\n */\nactivateSocketListeners():void;/**\n * Activate Event Listeners which apply to every Game View\n */\nactivateListeners():void;/**\n * Support mousewheel control for range type input elements\n * @param event - A Mouse Wheel scroll event\n */protected static _handleMouseWheelInputChange(event:WheelEvent):void;/**\n * On left mouse clicks, check if the element is contained in a valid hyperlink and open it in a new tab.\n */protected _onClickHyperlink(event:MouseEvent):void;/**\n * Prevent starting a drag and drop workflow on elements within the document unless the element has the draggable\n * attribute explicitly defined or overrides the dragstart handler.\n * @param event - The initiating drag start event\n */protected _onPreventDragstart(event:DragEvent):boolean;/**\n * Disallow dragging of external content onto anything but a file input element\n * @param event - The requested drag event\n */protected _onPreventDragover(event:DragEvent):void;/**\n * Disallow dropping of external content onto anything but a file input element\n * @param event - The requested drag event\n */protected _onPreventDrop(event:DragEvent):void;/**\n * On a left-click event, remove any currently displayed inline roll tooltip\n * @param event - The mousedown pointer event\n */protected _onPointerDown(event:PointerEvent):void;/**\n * Fallback handling for mouse-up events which aren't handled further upstream.\n * @param event - The mouseup pointer event\n */protected _onPointerUp(event:PointerEvent):void;/**\n * Handle resizing of the game window\n * Reposition any active UI windows\n */protected _onWindowResize(event:UIEvent):void;/**\n * Handle window unload operations to clean up any data which may be pending a final save\n * @param event - The window unload event which is about to occur\n */protected _onWindowBeforeUnload(event:Event):Promise<void>;/**\n * Handle cases where the browser window loses focus to reset detection of currently pressed keys\n * @param event - The originating window.blur event\n */protected _onWindowBlur(event:FocusEvent):void;/**\n * @param event - (unused)\n */protected _onWindowPopState(event:PopStateEvent):void;/**\n * Initialize elements required for the current view\n */protected _initializeView():Promise<void>;/**\n * Initialization steps for the primary Game view\n */protected _initializeGameView():Promise<void>;/**\n * Initialization steps for the Stream helper view\n */protected _initializeStreamView():Promise<void>;}namespace Game{interface Language{lang:string;name:string;path:string;}interface PackageData<T>{type:'world'|'system'|'module';data:T;id:string;path:string;scripts:string[];esmodules:string[];styles:string[];languages:Language[];packs:{name:string;label:string;path:string;private:boolean;entity:foundry.CONST.CompendiumEntityType;system?:string;absPath:string;package:string;};locked:boolean;availability:number;unavailable:boolean;_systemUpdateCheckTime:number;}interface WorldData<T>extends PackageData<T>{type:'world';}interface SystemData<T>extends PackageData<T>{type:'system';template:{Actor?:{types:string[];templates?:Partial<Record<string,unknown>>;}&Partial<Record<string,unknown>>;Item?:{types:string[];templates?:Partial<Record<string,unknown>>;}&Partial<Record<string,unknown>>;};entityTypes:{[Key in foundry.CONST.EntityType|'Setting'|'FogExploration']:string[]};model:{Actor:Partial<Record<string,Partial<Record<string,unknown>>>>;Item:Partial<Record<string,Partial<Record<string,unknown>>>>;};}interface ModuleData<T>extends PackageData<T>{type:'module';active:boolean;}type Data={userId:string;version:string;world:WorldData<foundry.packages.WorldData>;system:SystemData<foundry.packages.SystemData>;modules:ModuleData<foundry.packages.ModuleData>[];paused:boolean;addresses:{local:string;remote:string;};files:{storages:('public'|'data'|'s3')[];s3?:{endpoint:{protocol:string;host:string;port:number;hostname:string;pathname:string;path:string;href:string;};buckets:string[];};};options:{language:string;port:number;routePrefix:string|null;updateChannel:string;demo:boolean;};activeUsers:string[];packs:{name:string;label:string;path:string;private:boolean;entity:foundry.CONST.CompendiumEntityType;system?:string;package:string;index:{name:string;type:string;_id:string}[];};coreUpdate:string|null;systemUpdate:string|null;}&{[DocumentType in|foundry.CONST.EntityType|'Setting'as ConfiguredDocumentClassForName<DocumentType>['metadata']['collection']]?:InstanceType<\nConfiguredDocumentClassForName<DocumentType>>['data']['_source'][];};type ConstructorData=Omit<Data,'world'|'system'|'modules'>&{world:WorldData<foundry.packages.WorldData['_source']>;system:SystemData<foundry.packages.SystemData['_source']>;modules:ModuleData<foundry.packages.ModuleData['_source']>[];};type Permissions={[Key in keyof typeof foundry.CONST.USER_PERMISSIONS]:foundry.CONST.UserRole[];};type View=ValueOf<typeof foundry.CONST.GAME_VIEWS>;}}type ConfiguredCollectionClassForName<Name extends foundry.CONST.EntityType>=InstanceType<CONFIG[Name]['collection']>;"
    ]
  