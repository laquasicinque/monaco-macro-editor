
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\application.d.ts",
      "/**\n * @defaultValue `0`\n */declare let _appId:number;/**\n * @defaultValue `100`\n */declare let _maxZ:number;declare const MIN_WINDOW_WIDTH:200;declare const MIN_WINDOW_HEIGHT:50;/**\n * The standard application window that is rendered for a large variety of UI elements in Foundry VTT.\n * @typeParam Options - the type of the options object\n */declare abstract class Application<Options extends Application.Options=Application.Options>{/**\n * @param options - Configuration options which control how the application is rendered.\n *                  Application subclasses may add additional supported options, but the\n *                  following configurations are supported for all Applications. The values\n *                  passed to the constructor are combined with the defaultOptions defined\n *                  at the class level.\n */constructor(options?:Partial<Options>);/**\n * The options provided to this application upon initialization\n */\noptions:Options;/**\n * The application ID is a unique incrementing integer which is used to identify every application window\n * drawn by the VTT\n */\nappId:number;/**\n * An internal reference to the HTML element this application renders\n * @defaultValue `null`\n */protected _element:JQuery|null;/**\n * Track the current position and dimensions of the Application UI\n */\nposition:Application.Position;/**\n * DragDrop workflow handlers which are active for this Application\n */protected _dragDrop:DragDrop[];/**\n * Tab navigation handlers which are active for this Application\n */protected _tabs:Tabs[];/**\n * SearchFilter handlers which are active for this Application\n */protected _searchFilters:SearchFilter[];/**\n * Track whether the Application is currently minimized\n * @defaultValue `false`\n */protected _minimized:boolean;/**\n * Track the render state of the Application\n * @defaultValue {@link Application.RENDER_STATES.NONE}\n * @see {@link Application.RENDER_STATES}\n */protected _state:Application.RenderState;/**\n * The prior render state of this Application.\n * This allows for rendering logic to understand if the application is being rendered for the first time.\n * @defaultValue {@link Application.RENDER_STATES.NONE}\n * @see {@link Application.RENDER_STATES}\n */protected _priorState:Application.RenderState;/**\n * Track the most recent scroll positions for any vertically scrolling containers\n * @defaultValue `null`\n */protected _scrollPositions:Partial<Record<string,number>>|null;/**\n * The sequence of rendering states that track the Application life-cycle.\n * @see {@link Application.RenderState}\n */static RENDER_STATES:Readonly<{CLOSING:-2;CLOSED:-1;NONE:0;RENDERING:1;RENDERED:2;ERROR:3;}>;/**\n * Create drag-and-drop workflow handlers for this Application\n * @returns An array of DragDrop handlers\n */protected _createDragDropHandlers():DragDrop[];/**\n * Create tabbed navigation handlers for this Application\n * @returns An array of Tabs handlers\n */protected _createTabHandlers():Tabs[];/**\n * Create search filter handlers for this Application\n * @returns An array of SearchFilter handlers\n */protected _createSearchFilters():SearchFilter[];/**\n * Assign the default options configuration which is used by this Application class. The options and values defined\n * in this object are merged with any provided option values which are passed to the constructor upon initialization.\n * Application subclasses may include additional options which are specific to their usage.\n */static get defaultOptions():Application.Options;/**\n * Return the CSS application ID which uniquely references this UI element\n */get id():string;/**\n * Return the active application element, if it currently exists in the DOM\n */get element():JQuery;/**\n * The path to the HTML template file which should be used to render the inner content of the app\n */get template():string;/**\n * Control the rendering style of the application. If popOut is true, the application is rendered in its own\n * wrapper window, otherwise only the inner app content is rendered\n */get popOut():boolean;/**\n * Return a flag for whether the Application instance is currently rendered\n */get rendered():boolean;/**\n * An Application window should define its own title definition logic which may be dynamic depending on its data\n */get title():string;/**\n * An application should define the data object used to render its template.\n * This function may either return an Object directly, or a Promise which resolves to an Object\n * If undefined, the default implementation will return an empty object allowing only for rendering of static HTML\n * @param options - (unused, default: `{}`)\n */\ngetData(options?:Partial<Options>):object|Promise<object>;/**\n * Render the Application by evaluating it's HTML template against the object of data provided by the getData method\n * If the Application is rendered as a pop-out window, wrap the contained HTML in an outer frame with window controls\n *\n * @param force   - Add the rendered application to the DOM if it is not already present. If false, the\n *                  Application will only be re-rendered if it is already present.\n *                  (default: `false`)\n * @param options - Additional rendering options which are applied to customize the way that the Application\n *                  is rendered in the DOM.\n *                  (default: `{}`)\n * @returns The rendered Application instance\n * @remarks Some subclasses return other results.\n */\nrender(force?:boolean,options?:Application.RenderOptions<Options>):unknown;/**\n * An asynchronous inner function which handles the rendering of the Application\n * @param force   - Render and display the application even if it is not currently displayed.\n *                  (default: `false`)\n * @param options - New Application options which update the current values of the Application#options object\n *                  (default: `{}`)\n * @returns A Promise that resolves to the Application once rendering is complete\n */protected _render(force?:boolean,options?:Application.RenderOptions<Options>):Promise<void>;/**\n * Return the inheritance chain for this Application class up to (and including) it's base Application class.\n */protected static _getInheritanceChain():typeof Application[];/**\n * Persist the scroll positions of containers within the app before re-rendering the content\n * @param html - The HTML object being traversed\n */protected _saveScrollPositions(html:JQuery):void;/**\n * Restore the scroll positions of containers within the app after re-rendering the content\n * @param html - The HTML object being traversed\n */protected _restoreScrollPositions(html:JQuery):void;/**\n * Render the outer application wrapper\n * @returns A promise resolving to the constructed jQuery object\n */protected _renderOuter():Promise<HTMLElement>|Promise<JQuery<JQuery.Node>>;/**\n * Render the inner application content\n * @param data - The data used to render the inner template\n * @returns A promise resolving to the constructed jQuery object\n * @remarks Some subclasses do not return a promise but the jQuery object directly.\n */protected _renderInner(data:object):Promise<JQuery>|JQuery;/**\n * Customize how inner HTML is replaced when the application is refreshed\n * @param element - The original HTML processed as a jQuery object\n * @param html    - New updated HTML as a jQuery object\n */protected _replaceHTML(element:JQuery,html:JQuery):void;/**\n * Customize how a new HTML Application is added and first appears in the DOC\n * @param html - The HTML element which is ready to be added to the DOM\n */protected _injectHTML(html:JQuery):void;/**\n * Specify the set of config buttons which should appear in the Application header.\n * Buttons should be returned as an Array of objects.\n * The header buttons which are added to the application can be modified by the getApplicationHeaderButtons hook.\n */protected _getHeaderButtons():Application.HeaderButton[];/**\n * Activate required listeners which must be enabled on every Application.\n * These are internal interactions which should not be overridden by downstream subclasses.\n */protected _activateCoreListeners(html:JQuery):void;/**\n * After rendering, activate event listeners which provide interactivity for the Application.\n * This is where user-defined Application subclasses should attach their event-handling logic.\n */\nactivateListeners(html:JQuery):void;/**\n * Handle changes to the active tab in a configured Tabs controller\n * @param event  - A left click event\n *                 (unused)\n * @param tabs   - The Tabs controller\n *                 (unused)\n * @param active - The new active tab name\n *                 (unused)\n */protected _onChangeTab(event:MouseEvent|null,tabs:Tabs,active:string):void;/**\n * Handle changes to search filtering controllers which are bound to the Application\n * @param event - The key-up event from keyboard input\n *                (unused)\n * @param query - The regular expression to test against\n *                (unused)\n * @param rgx   - The regular expression to test against\n *                (unused)\n * @param html  - The HTML element which should be filtered\n *                (unused)\n */protected _onSearchFilter(event:KeyboardEvent,query:string,rgx:RegExp,html:HTMLElement):void;/**\n * Define whether a user is able to begin a dragstart workflow for a given drag selector\n * @param selector - The candidate HTML selector for dragging\n *                   (unused)\n * @returns Can the current user drag this selector?\n */protected _canDragStart(selector:string):boolean;/**\n * Define whether a user is able to conclude a drag-and-drop workflow for a given drop selector\n * @param selector - The candidate HTML selector for the drop target\n *                   (unused)\n * @returns Can the current user drop on this selector?\n */protected _canDragDrop(selector:string):boolean;/**\n * Callback actions which occur at the beginning of a drag start workflow.\n * @param event - The originating DragEvent\n *                (unused)\n */protected _onDragStart(event:DragEvent):void;/**\n * Callback actions which occur when a dragged element is over a drop target.\n * @param event - originating DragEvent\n *                (unused)\n */protected _onDragOver(event:DragEvent):void;/**\n * Callback actions which occur when a dragged element is dropped on a target.\n * @param event - The originating DragEvent\n *                (unused)\n * @remarks\n * The implementation in {@link Application} actually returns `void` but it is\n * typed as `unknown` to allow deriving methods to return whatever they want.\n * The returned value is not meant to be used.\n */protected _onDrop(event:DragEvent):unknown;/**\n * Bring the application to the top of the rendering stack\n */\nbringToTop():void;/**\n * Close the application and un-register references to it within UI mappings\n * This function returns a Promise which resolves once the window closing animation concludes\n * @param options - (default: `{}`)\n * @returns A Promise which resolves once the application is closed\n */\nclose(options?:Application.CloseOptions):Promise<void>;/**\n * Minimize the pop-out window, collapsing it to a small tab\n * Take no action for applications which are not of the pop-out variety or apps which are already minimized\n * @returns A Promise which resolves once the minimization action has completed\n */\nminimize():Promise<void>;/**\n * Maximize the pop-out window, expanding it to its original size\n * Take no action for applications which are not of the pop-out variety or are already maximized\n * @returns A Promise which resolves once the maximization action has completed\n */\nmaximize():Promise<void>;/**\n * Set the application position and store it's new location.\n * @param left   - The left offset position in pixels\n * @param top    - The top offset position in pixels\n * @param width  - The application width in pixels\n * @param height - The application height in pixels\n * @param scale  - The application scale as a numeric factor where 1.0 is default\n * @returns The updated position object for the application containing the new values\n */\nsetPosition({left,top,width,height,scale}?:Partial<Application.Position>):(Application.Position&{height:number})|void;/**\n * Handle application minimization behavior - collapsing content and reducing the size of the header\n */protected _onToggleMinimize(ev:Event):void;/**\n * Additional actions to take when the application window is resized\n * @param event - (unused)\n */protected _onResize(event:Event):void;}declare namespace Application{interface CloseOptions{force?:boolean|undefined;}interface HeaderButton{label:string;class:string;icon:string;onclick:((ev:JQuery.ClickEvent)=>void)|null;}interface Options{/**\n * A named \"base application\" which generates an additional hook\n * @defaultValue `null`\n */\nbaseApplication:string|null;/**\n * The default pixel width for the rendered HTML\n * @defaultValue `null`\n */\nwidth:number|null;/**\n * The default pixel height for the rendered HTML\n * @defaultValue `null`\n */\nheight:number|'auto'|null;/**\n * The default offset-top position for the rendered HTML\n * @defaultValue `null`\n */\ntop:number|null;/**\n * The default offset-left position for the rendered HTML\n * @defaultValue `null`\n */\nleft:number|null;/**\n * A transformation scale for the rendered HTML\n */\nscale?:number|null|undefined;/**\n * Whether to display the application as a pop-out container\n * @defaultValue `true`\n */\npopOut:boolean;/**\n * Whether the rendered application can be minimized (popOut only)\n * @defaultValue `true`\n */\nminimizable:boolean;/**\n * Whether the rendered application can be drag-resized (popOut only)\n * @defaultValue `false`\n */\nresizable:boolean;/**\n * The default CSS id to assign to the rendered HTML\n * @defaultValue `''`\n */\nid:string;/**\n * An array of CSS string classes to apply to the rendered HTML\n * @defaultValue `[]`\n */\nclasses:string[];/**\n * A default window title string (popOut only)\n * @defaultValue `''`\n */\ntitle:string;/**\n * The default HTML template path to render for this Application\n * @defaultValue `null`\n */\ntemplate:string|null;/**\n * A list of unique CSS selectors which target containers that should\n * have their vertical scroll positions preserved during a re-render.\n * @defaultValue `[]`\n */\nscrollY:string[];/**\n * An array of tabbed container configurations which should be enabled\n * for the application.\n * @defaultValue `[]`\n */\ntabs:Omit<TabsConfiguration,'callback'>[];/**\n * @defaultValue `[]`\n */\ndragDrop:Omit<DragDrop.Options,'permissions'|'callbacks'>[];/**\n * @defaultValue `[]`\n */\nfilters:Omit<SearchFilter.Options,'callback'>[];}interface Position{width:number|null;height:number|null|'auto';left:number|null;top:number|null;scale:number|null|undefined;}type RenderOptions<Options extends Application.Options=Application.Options>=Partial<Options>&{/**\n * The left positioning attribute\n */\nleft?:number|null|undefined;/**\n * The top positioning attribute\n */\ntop?:number|null|undefined;/**\n * The rendered width\n */\nwidth?:number|null|undefined;/**\n * The rendered height\n */\nheight?:number|null|undefined;/**\n * The rendered transformation scale\n */\nscale?:number|null|undefined;/**\n * Apply focus to the application, maximizing it and bringing it to the top\n * of the vertical stack.\n * @defaultValue `false`\n */\nfocus?:boolean|undefined;/**\n * A context-providing string which suggests what event triggered the render\n */\nrenderContext?:string|undefined;/**\n * The data change which motivated the render request\n */\nrenderData?:object|undefined;};/**\n * @see {@link Application.RENDER_STATES}\n */type RenderState=ValueOf<typeof Application['RENDER_STATES']>;}"
    ]
  