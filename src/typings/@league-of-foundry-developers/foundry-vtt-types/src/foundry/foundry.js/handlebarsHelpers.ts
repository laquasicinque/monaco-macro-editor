
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\handlebarsHelpers.d.ts",
      "/**\n * A collection of Handlebars template helpers which can be used within HTML templates.\n */declare class HandlebarsHelpers{/**\n * For checkboxes, if the value of the checkbox is true, add the \"checked\" property, otherwise add nothing.\n */static checked(value:unknown):string;/**\n * Render a pair of inputs for selecting a color.\n * @param options - Helper options\n */static colorPicker(options:HandlebarsHelpers.ColorPickerOptions):Handlebars.SafeString;/**\n * Construct an editor element for rich text editing with TinyMCE\n * @param options - Helper options\n */static editor(options:HandlebarsHelpers.EditorOptions):Handlebars.SafeString;/**\n * Render a file-picker button linked to an `<input>` field\n * @param options - Helper options\n */static filePicker(options:HandlebarsHelpers.FilePickerOptions):Handlebars.SafeString|string;/**\n * Translate a provided string key by using the loaded dictionary of localization strings.\n *\n * @example <caption>Translate a provided localization string, optionally including formatting parameters</caption>\n * ```handlebars\n * <label>{{localize \"ACTOR.Create\"}}</label> <!-- \"Create Actor\" -->\n * <label>{{localize \"CHAT.InvalidCommand\", command=foo}}</label> <!-- \"foo is not a valid chat message command.\" -->\n * ```\n */static localize(value:string,options:HandlebarsHelpers.LocalizeOptions):string;/**\n * A string formatting helper to display a number with a certain fixed number of decimals and an explicit sign.\n */static numberFormat(value:string,options:HandlebarsHelpers.NumberFormatOptions):string;/**\n * Render a form input field of type number with value appropriately rounded to step size.\n */static numberInput(value:string,options:HandlebarsHelpers.NumberInputOptions):Handlebars.SafeString;/**\n * A helper to create a set of radio checkbox input elements in a named set.\n * The provided keys are the possible radio values while the provided values are human readable labels.\n *\n * @param name     - The radio checkbox field name\n * @param choices  - A mapping of radio checkbox values to human readable labels\n * @param options  - Options which customize the radio boxes creation\n *\n * @example <caption>The provided input data</caption>\n * ```typescript\n * let groupName = \"importantChoice\";\n * let choices = {a: \"Choice A\", b: \"Choice B\"};\n * let chosen = \"a\";\n * ```\n *\n * @example <caption>The template HTML structure</caption>\n * ```handlebars\n * <div class=\"form-group\">\n *   <label>Radio Group Label</label>\n *   <div class=\"form-fields\">\n *     {{radioBoxes groupName choices checked=chosen localize=true}}\n *   </div>\n * </div>\n * ```\n */static radioBoxes(name:string,choices:Record<string,string>,options:HandlebarsHelpers.RadioBoxesOptions):Handlebars.SafeString;/**\n * Render a pair of inputs for selecting a color.\n * @param options - Helper options\n */static rangePicker(options:HandlebarsHelpers.RangePickerOptions):Handlebars.SafeString;/**\n * A helper to assign an `<option>` within a `<select>` block as selected based on its value\n * Escape the string as handlebars would, then escape any regexp characters in it\n */static select(selected:string,options:HandlebarsHelpers.SelectOptions):string;/**\n * A helper to create a set of `<option>` elements in a `<select>` block based on a provided dictionary.\n * The provided keys are the option values while the provided values are human readable labels.\n * This helper supports both single-select as well as multi-select input fields.\n *\n * @param choices - A mapping of radio checkbox values to human readable labels\n * @param options - Helper options\n *\n * @example <caption>The provided input data</caption>\n * ```typescript\n * let choices = {a: \"Choice A\", b: \"Choice B\"};\n * let value = \"a\";\n * ```\n *\n * @example <caption>The template HTML structure</caption>\n * ```handlebars\n * <select name=\"importantChoice\">\n *   {{selectOptions choices selected=value localize=true}}\n * </select>\n * ```\n *\n * @example <caption>The resulting HTML</caption>\n * ```handlebars\n * <select name=\"importantChoice\">\n *   <option value=\"a\" selected>Choice A</option>\n *   <option value=\"b\">Choice B</option>\n * </select>\n * ```\n *\n * @example <caption>Using inverted</caption>\n * ```typescript\n * let choices = {\"Choice A\": \"a\", \"Choice B\": \"b\"};\n * let value = \"a\";\n * ```\n *\n * @example <caption>The template HTML structure</caption>\n * ```handlebars\n * <select name=\"importantChoice\">\n *   {{selectOptions choices selected=value inverted=true}}\n * </select>\n * ```\n *\n * @example <caption>Using nameAttr and labelAttr with objects</caption>\n * ```typescript\n * let choices = {foo: {key: \"a\", label: \"Choice A\"}, bar: {key: \"b\", label: \"Choice B\"}};\n * let value = \"b\";\n * ```\n *\n * @example <caption>The template HTML structure</caption>\n * ```handlebars\n * <select name=\"importantChoice\">\n *   {{selectOptions choices selected=value nameAttr=\"key\" labelAttr=\"label\"}}\n * </select>\n * ```\n *\n * @example <caption>Using nameAttr and labelAttr with arrays</caption>\n * ```typescript\n * let choices = [{key: \"a\", label: \"Choice A\"}, {key: \"b\", label: \"Choice B\"}];\n * let value = \"b\";\n * ```\n *\n * @example <caption>The template HTML structure</caption>\n * ```handlebars\n * <select name=\"importantChoice\">\n *   {{selectOptions choices selected=value nameAttr=\"key\" labelAttr=\"label\"}}\n * </select>\n * ```\n */static selectOptions(choices:Record<string,string>,options:HandlebarsHelpers.SelectOptionsOptions):Handlebars.SafeString;}declare namespace HandlebarsHelpers{interface ColorPickerOptions extends Handlebars.HelperOptions{hash:{/**\n * The name of the field to create\n */\nname?:string;/**\n * The current color value\n */\nvalue?:string;/**\n * A default color string if a value is not provided\n */default?:string;};}interface EditorOptions extends Handlebars.HelperOptions{hash:{/**\n * The named target data element\n */\ntarget:string;/**\n * Is the current user an owner of the data?\n */\nowner?:boolean;/**\n * Include a button used to activate the editor later?\n */\nbutton?:boolean;/**\n * Is the text editor area currently editable?\n */\neditable?:boolean;/**\n * Replace dynamic entity links?\n * @defaultValue `true`\n */\nentities?:boolean;/**\n * The data object providing context for inline rolls\n */\nrollData?:object|(()=>object);/**\n * The original HTML content as a string\n * @defaultValue `''`\n */\ncontent?:string;};}interface FilePickerOptions extends Handlebars.HelperOptions{hash:{/**\n * The type of FilePicker instance to display\n */type?:FilePicker.Type;/**\n * The field name in the target data\n */\ntarget:string;};}interface LocalizeOptions extends Handlebars.HelperOptions{hash:Record<string,unknown>;}interface NumberFormatOptions extends Handlebars.HelperOptions{hash:{/**\n * @defaultValue `0`\n */\ndecimals?:number;/**\n * @defaultValue `false`\n */\nsign?:boolean;};}interface NumberInputOptions extends Handlebars.HelperOptions{hash:{/**\n * @defaultValue `''`\n */\nname?:string;step?:number;/**\n * @defaultValue `false`\n */\ndisabled?:boolean;/**\n * @defaultValue `''`\n */\nplaceholder?:string;/**\n * @defaultValue `''`\n */class?:string;min?:number;max?:number;};}interface RadioBoxesOptions extends Handlebars.HelperOptions{hash:{/**\n * Which key is currently checked?\n * @defaultValue `null`\n */\nchecked?:string;/**\n * Pass each label through string localization?\n * @defaultValue `false`\n */\nlocalize?:boolean;};}interface RangePickerOptions extends Handlebars.HelperOptions{/**\n * The name of the field to create\n * @defaultValue `'range'`\n */\nname?:string;/**\n * The current range value\n */\nvalue?:number;/**\n * The minimum allowed value\n */\nmin?:number;/**\n * The maximum allowed value\n */\nmax?:number;/**\n * The allowed step size\n */\nstep?:number;}type SelectOptions=Handlebars.HelperOptions;interface SelectOptionsOptions extends Handlebars.HelperOptions{hash:{/**\n * Which key or array of keys that are currently selected?\n */\nselected?:string|string[];/**\n * Pass each label through string localization?\n * @defaultValue `false`\n */\nlocalize?:boolean;/**\n * Add a blank option as the first option with this label\n */\nblank?:string;/**\n * Look up a property in the choice object values to use as the option value\n */\nnameAttr?:string;/**\n * Look up a property in the choice object values to use as the option label\n */\nlabelAttr?:string;/**\n * Use the choice object value as the option value, and the key as the label\n * instead of vice-versa\n */\ninverted?:boolean;};}}"
    ]
  