
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\quadtree.d.ts",
      "declare interface QuadTreeObject<T>{r:Rectangle;t:T;n:Set<Quadtree<T>>;}/**\n * A Quadtree implementation that supports collision detection for rectangles.\n */declare class Quadtree<T>{/**\n * @param bounds  - The outer bounds of the region\n * @param options - Additional options which configure the Quadtree\n */constructor(bounds:Rectangle,options?:Quadtree.Options<T>);/**\n * The bounding rectangle of the region\n */\nbounds:Rectangle;/**\n * The maximum number of objects allowed within this node before it must split\n * @defaultValue `20`\n */\nmaxObjects:number;/**\n * The maximum number of levels that the base quadtree is allowed\n * @defaultValue `4`\n */\nmaxDepth:number;/**\n * The depth of this node within the root Quadtree\n * @defaultValue `0`\n */\ndepth:number;/**\n * The objects contained at this level of the tree\n * @defaultValue `[]`\n */\nobjects:QuadTreeObject<T>[];/**\n * Children of this node\n * @defaultValue `[]`\n */\nnodes:Quadtree<T>[];/**\n * The root Quadtree\n */\nroot:Quadtree<T>;/**\n * A constant that enumerates the index order of the quadtree nodes from top-left to bottom-right.\n */static INDICES:{tl:0;tr:1;bl:2;br:3;};/**\n * Return an array of all the objects in the Quadtree (recursive)\n */get all():QuadTreeObject<T>[];/**\n * Split this node into 4 sub-nodes.\n * @returns The split Quadtree\n */\nsplit():this;/**\n * Clear the quadtree of all existing contents\n * @returns The cleared Quadtree\n */\nclear():this;/**\n * Add a rectangle object to the tree\n * @param obj - The object being inserted\n * @returns The Quadtree nodes the object was added to.\n */\ninsert(obj:QuadTreeObject<T>):Quadtree<T>[];/**\n * Remove an object from the quadtree\n * @param target - The quadtree target being removed\n * @returns The Quadtree for method chaining\n */\nremove(target:T):this;/**\n * Get all the objects which could collide with the provided rectangle\n * @param rect - The target rectangle\n * @param _s   - The existing result set, for internal use.\n *               (default: `new Set<T>()`)\n * @returns The objects in the Quadtree which represent potential collisions\n */\ngetObjects(rect:Rectangle,_s?:Set<T>):Set<T>;/**\n * Obtain the leaf nodes to which a target rectangle belongs.\n * This traverses the quadtree recursively obtaining the final nodes which have no children.\n * @param rect - The target rectangle.x\n * @returns The Quadtree nodes to which the target rectangle belongs\n */\ngetLeafNodes(rect:Rectangle):Quadtree<T>[];/**\n * Obtain the child nodes within the current node which a rectangle belongs to.\n * Note that this function is not recursive, it only returns nodes at the current or child level.\n * @param rect - The target rectangle.\n * @returns The Quadtree nodes to which the target rectangle belongs\n */\ngetChildNodes(rect:Rectangle):Quadtree<T>[];/**\n * Identify all nodes which are adjacent to this one within the parent Quadtree.\n */\ngetAdjacentNodes():Quadtree<T>[];/**\n * Visualize the nodes and objects in the quadtree\n * @param objects - Visualize the rectangular bounds of objects in the Quadtree. Default is false.\n *                  (default: `false`)\n */\nvisualize({objects}?:{objects?:boolean}):void;}declare namespace Quadtree{/**\n * Additional options which configure the Quadtree\n */interface Options<T>{/**\n * The maximum number of objects per node\n * @defaultValue `20`\n */\nmaxObjects?:number;/**\n * The maximum number of levels within the root Quadtree\n * @defaultValue `4`\n */\nmaxDepth?:number;/**\n * The depth level of the sub-tree. For internal use\n * @defaultValue `0`\n * @internal\n */\n_depth?:number;/**\n * The root of the quadtree. For internal use\n * @internal\n */\n_root?:Quadtree<T>;}}"
    ]
  