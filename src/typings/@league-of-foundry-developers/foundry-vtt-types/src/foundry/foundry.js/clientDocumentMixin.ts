
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocumentMixin.d.ts",
      "import{ContextType,DocumentModificationOptions}from'../common/abstract/document.mjs';import{ConfiguredDocumentClass,ConstructorDataType,DocumentConstructor}from'../../types/helperTypes';declare global{/**\n * A mixin which extends each Document definition with specialized client-side behaviors.\n * This mixin defines the client-side interface for database operations and common document behaviors.\n */const ClientDocumentMixin:<T extends ConstructorOf<foundry.abstract.Document<any,any>>>(Base:T)=>ClientDocumentConstructor<T>;}type ClientDocumentConstructor<T extends ConstructorOf<foundry.abstract.Document<any,any>>>=Pick<T,keyof T>&\nPick<typeof ClientDocumentMixin,keyof typeof ClientDocumentMixin>&{new(...args:ConstructorParameters<T>):InstanceType<T>&ClientDocumentMixin<InstanceType<T>>;};export declare class ClientDocumentMixin<T extends foundry.abstract.Document<any,any>>{constructor(data?:ConstructorDataType<T['data']>,context?:ContextType<T>);/**\n * A collection of Application instances which should be re-rendered whenever this document is updated.\n * The keys of this object are the application ids and the values are Application instances. Each\n * Application in this object will have its render method called by {@link Document#render}.\n * @see {@link Document#render}\n */\napps:Record<string,Application>;/**\n * A cached reference to the FormApplication instance used to configure this Document.\n * @defaultValue `null`\n */protected _sheet:FormApplication|null;/**\n * @see abstract.Document#_initialize\n */protected _initialize():void;/**\n * Return a reference to the parent Collection instance which contains this Document.\n */get collection():Collection<this>;/**\n * A reference to the Compendium Collection which contains this Document, if any, otherwise undefined.\n */get compendium():any;/**\n * Return a reference to the Folder to which this Document belongs, if any.\n *\n * @example <caption>A Document may belong to a Folder</caption>\n * ```typescript\n * let folder = game.folders.entities[0];\n * let actor = await Actor.create({name: \"New Actor\", folder: folder.id});\n * console.log(actor.data.folder); // folder.id;\n * console.log(actor.folder); // folder;\n * ```\n */get folder():Folder|null;/**\n * A boolean indicator for whether or not the current game User has ownership rights for this Document.\n * Different Document types may have more specialized rules for what constitutes ownership.\n */get isOwner():boolean;/**\n * Test whether this Document is owned by any non-Gamemaster User.\n */get hasPlayerOwner():boolean;/**\n * A boolean indicator for whether the current game User has exactly LIMITED visibility (and no greater).\n */get limited():boolean;/**\n * Return a string which creates a dynamic link to this Document instance.\n */get link():string;/**\n * Return the permission level that the current game User has over this Document.\n * See the CONST.ENTITY_PERMISSIONS object for an enumeration of these levels.\n *\n * @example\n * ```typescript\n * game.user.id; // \"dkasjkkj23kjf\"\n * actor.data.permission; // {default: 1, \"dkasjkkj23kjf\": 2};\n * actor.permission; // 2\n * ```\n */get permission():ValueOf<typeof CONST.ENTITY_PERMISSIONS>;/**\n * Lazily obtain a FormApplication instance used to configure this Document, or null if no sheet is available.\n */get sheet():FormApplication|null;/**\n * A Universally Unique Identifier (uuid) for this Document instance.\n */get uuid():string;/**\n * A boolean indicator for whether or not the current game User has at least limited visibility for this Document.\n * Different Document types may have more specialized rules for what determines visibility.\n */get visible():boolean;/**\n * Obtain the FormApplication class constructor which should be used to configure this Document.\n */protected _getSheetClass():ConstructorOf<FormApplication>|null;/**\n * Prepare data for the Document.\n * Begin by resetting the prepared data back to its source state.\n * Next prepare any embedded Documents and compute any derived data elements.\n */\nprepareData():void;/**\n * Prepare data related to this Document itself, before any embedded Documents or derived data is computed.\n */\nprepareBaseData():void;/**\n * Prepare all embedded Document instances which exist within this primary Document.\n */\nprepareEmbeddedEntities():void;/**\n * Apply transformations or derivations to the values of the source data object.\n * Compute data fields whose values are not stored to the database.\n */\nprepareDerivedData():void;/**\n * Render all of the Application instances which are connected to this document by calling their respective\n * @see Application#render\n * @param force   - Force rendering\n *                  (default: `false`)\n * @param context - Optional context\n *                  (default: `{}`)\n */\nrender(force?:boolean,context?:Application.RenderOptions):void;/**\n * Determine the sort order for this Document by positioning it relative a target sibling.\n * See SortingHelper.performIntegerSort for more details\n * @param options - Sorting options provided to SortingHelper.performIntegerSort\n * @returns The Document after it has been re-sorted\n */\nsortRelative(options:SortOptions<this>):Promise<this>;/**\n * @see abstract.Document#_onCreate\n */protected _onCreate(data:T['data']['_source'],options:DocumentModificationOptions,userId:string):void;/**\n * @see abstract.Document#_onUpdate\n */protected _onUpdate(data:DeepPartial<T['data']['_source']>,options:DocumentModificationOptions,userId:string):void;/**\n * @see abstract.Document#_onDelete\n */protected _onDelete(options:DocumentModificationOptions,userId:string):void;/**\n * Preliminary actions taken before a set of embedded Documents in this parent Document are created.\n * @param embeddedName - The name of the embedded Document type\n * @param result       - An Array of created data objects\n * @param options      - Options which modified the creation operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _preCreateEmbeddedDocuments(embeddedName:string,result:Record<string,unknown>[],options:DocumentModificationOptions,userId:string):void;/**\n * Follow-up actions taken after a set of embedded Documents in this parent Document are created.\n * @param embeddedName - The name of the embedded Document type\n * @param documents    - An Array of created Documents\n * @param result       - An Array of created data objects\n * @param options      - Options which modified the creation operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _onCreateEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:Record<string,unknown>[],options:DocumentModificationOptions,userId:string):void;/**\n * Preliminary actions taken before a set of embedded Documents in this parent Document are updated.\n * @param embeddedName - The name of the embedded Document type\n * @param result       - An Array of incremental data objects\n * @param options      - Options which modified the update operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _preUpdateEmbeddedDocuments(embeddedName:string,result:Record<string,unknown>[],options:DocumentModificationOptions,userId:string):void;/**\n * Follow-up actions taken after a set of embedded Documents in this parent Document are updated.\n * @param embeddedName - The name of the embedded Document type\n * @param documents    - An Array of updated Documents\n * @param result       - An Array of incremental data objects\n * @param options      - Options which modified the update operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _onUpdateEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:Record<string,unknown>[],options:DocumentModificationContext,userId:string):void;/**\n * Preliminary actions taken before a set of embedded Documents in this parent Document are deleted.\n * @param embeddedName - The name of the embedded Document type\n * @param result       - An Array of document IDs being deleted\n * @param options      - Options which modified the deletion operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _preDeleteEmbeddedDocuments(embeddedName:string,result:string[],options:DocumentModificationContext,userId:string):void;/**\n * Follow-up actions taken after a set of embedded Documents in this parent Document are deleted.\n * @param embeddedName - The name of the embedded Document type\n * @param documents    - An Array of deleted Documents\n * @param result       - An Array of document IDs being deleted\n * @param options      - Options which modified the deletion operation\n * @param userId       - The ID of the User who triggered the operation\n */protected _onDeleteEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:string[],options:DocumentModificationContext,userId:string):void;/**\n * Present a Dialog form to create a new Document of this type.\n * Choose a name and a type from a select menu of types.\n * @param data    - Initial data with which to populate the creation form\n *                  (default: `{}`)\n * @param options - Positioning and sizing options for the resulting dialog\n *                  (default: `{}`)\n * @returns A Promise which resolves to the created Document\n */static createDialog<T extends DocumentConstructor>(this:T,data?:DeepPartial<|ConstructorDataType<InstanceType<T>['data']>|(ConstructorDataType<InstanceType<T>['data']>&Record<string,unknown>)>,options?:Dialog.Options):Promise<InstanceType<ConfiguredDocumentClass<T>>|undefined>;/**\n * Present a Dialog form to confirm deletion of this Document.\n * @param options - Positioning and sizing options for the resulting dialog\n *                  (default: `{}`)\n * @returns A Promise which resolves to the deleted Document\n */\ndeleteDialog(options?:Dialog.Options):Promise<this|undefined>;/**\n * Export entity data to a JSON file which can be saved by the client and later imported into a different session.\n */\nexportToJSON():void;/**\n * A helper function to handle obtaining the relevant Document from dropped data provided via a DataTransfer event.\n * The dropped data could have:\n * 1. A compendium pack and entry id\n * 2. A World Entity _id\n * 3. A data object explicitly provided\n *\n * @param data    - The data object extracted from a DataTransfer event\n * @param options - Additional options which configure data retrieval\n * @returns The Document data that should be handled by the drop handler\n */static fromDropData<T extends DocumentConstructor>(this:T,data:DropData<InstanceType<T>>,options?:FromDropDataOptions):Promise<InstanceType<ConfiguredDocumentClass<T>>|undefined>;/**\n * Update this Document using a provided JSON string.\n * @param json - JSON data string\n * @returns The updated Document\n */\nimportFromJSON(json:string):Promise<this>;/**\n * Render an import dialog for updating the data related to this Document through an exported JSON file\n */\nimportFromJSONDialog():Promise<void>;/**\n * Transform the Document data to be stored in a Compendium pack.\n * Remove any features of the data which are world-specific.\n * This function is asynchronous in case any complex operations are required prior to exporting.\n * @param pack - A specific pack being exported to\n * @returns A data object of cleaned data suitable for compendium import\n */\ntoCompendium(pack?:CompendiumCollection<CompendiumCollection.Metadata>):Omit<\nT['data']['_source'],'_id'|'folder'|'permission'>&{permission?:T extends{toObject():infer U}?U:never;};/**\n * @deprecated since 0.8.0\n */get _id():T['id'];/**\n * @deprecated since 0.8.0\n */static get config():any;/**\n * @deprecated since 0.8.0\n */get entity():T['documentName'];/**\n * @deprecated since 0.8.0\n */get owner():this['isOwner'];/**\n * @deprecated since 0.8.0\n */\nhasPerm(user:foundry.documents.BaseUser,permission:keyof typeof foundry.CONST.ENTITY_PERMISSIONS|foundry.CONST.EntityPermission,exact?:boolean):ReturnType<T['testUserPermission']>;/**\n * @deprecated since 0.8.0\n */static update<T extends DocumentConstructor>(this:T,updates?:|Array<\nDeepPartial<|ConstructorDataType<InstanceType<T>['data']>|(ConstructorDataType<InstanceType<T>['data']>&Record<string,unknown>)>&{_id:string}>|(DeepPartial<|ConstructorDataType<InstanceType<T>['data']>|(ConstructorDataType<InstanceType<T>['data']>&Record<string,unknown>)>&{_id:string}),options?:DocumentModificationContext&foundry.utils.MergeObjectOptions):Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;/**\n * @deprecated since 0.8.0\n */static delete<T extends DocumentConstructor>(this:T,ids?:string[],options?:DocumentModificationContext):Promise<InstanceType<ConfiguredDocumentClass<T>>[]>;/**\n * @deprecated since 0.8.0\n */\ngetEmbeddedEntity(...args:Parameters<T['getEmbeddedDocument']>):ReturnType<T['getEmbeddedDocument']>;/**\n * @deprecated since 0.8.0\n */\ncreateEmbeddedEntity(documentName:string,data?:Record<string,unknown>|Array<Record<string,unknown>>,options?:DocumentModificationContext):ReturnType<T['createEmbeddedDocuments']>;/**\n * @deprecated since 0.8.0\n */\nupdateEmbeddedEntity(documentName:string,data?:Array<Record<string,unknown>>|Record<string,unknown>,options?:DocumentModificationContext):ReturnType<T['updateEmbeddedDocuments']>;/**\n * @deprecated since 0.8.0\n */\ndeleteEmbeddedEntity(documentName:string,ids:string[]|string,options:DocumentModificationContext):ReturnType<T['deleteEmbeddedDocuments']>;}interface SortOptions<T>{/**\n * @defaultValue `[]`\n */\nsiblings?:T[];/**\n * @defaultValue `true`\n */\nsortBefore?:boolean;/**\n * @defaultValue `'sort'`\n */\nsortKey?:string;/**\n * @defaultValue `null`\n */\ntarget?:T|null;/**\n * @defaultValue `{}`\n */\nupdateData?:any;}export type DropData<T extends foundry.abstract.Document<any,any>>=DropData.Data<T>|DropData.Pack|DropData.Id;declare namespace DropData{interface Data<T extends foundry.abstract.Document<any,any>>{data:T['data']['_source'];}interface Pack{pack:string;}interface Id{id:string;}}interface FromDropDataOptions{/**\n * Import the provided document data into the World, if it is not already a World-level Document reference\n * @defaultValue `false`\n */\nimportWorld?:boolean;}export{};"
    ]
  