
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\actor.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredObjectClassForName,ConstructorDataType,DocumentConstructor}from'../../../types/helperTypes';import{DocumentModificationOptions}from'../../common/abstract/document.mjs';import EmbeddedCollection from'../../common/abstract/embedded-collection.mjs';declare global{/**\n * The client-side Actor document which extends the common BaseActor model.\n * Each Actor document contains ActorData which defines its data schema.\n *\n * @see {@link data.ActorData}              The Actor data schema\n * @see {@link documents.Actors}            The world-level collection of Actor documents\n * @see {@link applications.ActorSheet}     The Actor configuration application\n *\n * @example <caption>Create a new Actor</caption>\n * ```typescript\n * let actor = await Actor.create({\n *   name: \"New Test Actor\",\n *   type: \"character\",\n *   img: \"artwork/character-profile.jpg\"\n * });\n * ```\n *\n * @example <caption>Retrieve an existing Actor</caption>\n * ```typescript\n * let actor = game.actors.get(actorId);\n * ```\n */class Actor extends ClientDocumentMixin(foundry.documents.BaseActor){/**\n * @override\n * @param data    - Initial data provided to construct the Actor document\n * @param context - The document context, see {@link foundry.abstract.Document}\n */constructor(data:ConstructorParameters<typeof foundry.documents.BaseActor>[0],context?:ConstructorParameters<typeof foundry.documents.BaseActor>[1]);/**\n * An object that tracks which tracks the changes to the data model which were applied by active effects\n * @defaultValue `{}`\n */\noverrides:Record<string,unknown>;/**\n * A cached array of image paths which can be used for this Actor's token.\n * Null if the list has not yet been populated.\n * @defaultValue `null`\n */protected _tokenImages:string[]|null;/**\n * Cache the last drawn wildcard token to avoid repeat draws\n * @defaultValue `null`\n */protected _lastWildcard:string|null;/**\n * A convenient reference to the file path of the Actor's profile image\n */get img():this['data']['img'];/**\n * Provide an object which organizes all embedded Item instances by their type\n */get itemTypes():Record<\nfoundry.documents.BaseItem['data']['type'],Array<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>>>>;/**\n * Test whether an Actor entity is a synthetic representation of a Token (if true) or a full Entity (if false)\n */get isToken():boolean;/**\n * An array of ActiveEffect instances which are present on the Actor which have a limited duration.\n */get temporaryEffects():ReturnType<this['effects']['filter']>;/**\n * Return a reference to the TokenDocument which owns this Actor as a synthetic override\n */get token():InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>|null;/**\n * A convenience reference to the item type (data.type) of this Actor\n */get type():this['data']['type'];/** @override */get uuid():string;/**\n * Apply any transformations to the Actor data which are caused by ActiveEffects.\n */\napplyActiveEffects():void;/**\n * Retrieve an Array of active tokens which represent this Actor in the current canvas Scene.\n * If the canvas is not currently active, or there are no linked actors, the returned Array will be empty.\n * If the Actor is a synthetic token actor, only the exact Token which it represents will be returned.\n *\n * @param linked   - Limit results to Tokens which are linked to the Actor. Otherwise return all Tokens even those which are not linked. (default: `false`)\n * @param document - Return the Document instance rather than the PlaceableObject (default: `false`)\n * @returns An array of Token instances in the current Scene which reference this Actor.\n */\ngetActiveTokens(linked:boolean,document:true):InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>[];getActiveTokens(linked?:boolean,document?:false):InstanceType<ConfiguredObjectClassForName<'Token'>>[];getActiveTokens(linked:boolean,document:boolean):|InstanceType<ConfiguredObjectClassForName<'Token'>>[]|InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>[];/**\n * Prepare a data object which defines the data schema used by dice roll commands against this Actor\n */\ngetRollData():this['data']['data'];/** @override */protected _getSheetClass():ConstructorOf<FormApplication>|null;/**\n * Create a new TokenData object which can be used to create a Token representation of the Actor.\n * @param data - Additional data, such as x, y, rotation, etc. for the created token data (default: `{}`)\n * @returns The created TokenData instance\n */\ngetTokenData(data?:object):Promise<foundry.data.TokenData>;/**\n * Get an Array of Token images which could represent this Actor\n */\ngetTokenImages():Promise<string[]>;/**\n * Handle how changes to a Token attribute bar are applied to the Actor.\n * This allows for game systems to override this behavior and deploy special logic.\n * @param attribute - The attribute path\n * @param value     - The target attribute value\n * @param isDelta   - Whether the number represents a relative change (true) or an absolute change (false) (default: `false`)\n * @param isBar     - Whether the new value is part of an attribute bar, or just a direct value (default: `true`)\n * @returns The updated Actor document\n */\nmodifyTokenAttribute(attribute:string,value:number,isDelta:boolean,isBar:boolean):Promise<this|undefined>;/** @override */\nprepareEmbeddedEntities():void;/**\n * Roll initiative for all Combatants in the currently active Combat encounter which are associated with this Actor.\n * If viewing a full Actor entity, all Tokens which map to that actor will be targeted for initiative rolls.\n * If viewing a synthetic Token actor, only that particular Token will be targeted for an initiative roll.\n *\n * @param options - Configuration for how initiative for this Actor is rolled.\n * @returns A promise which resolves to the Combat entity once rolls are complete.\n */\nrollInitiative(options?:Actor.RollInitiativeOptions):Promise<void>;/** @override */\ngetEmbeddedCollection(embeddedName:string):EmbeddedCollection<DocumentConstructor,foundry.data.ActorData>;/** @override */protected _preCreate(data:ConstructorDataType<foundry.data.ActorData>,options:DocumentModificationOptions,user:foundry.documents.BaseUser):Promise<void>;/** @override */protected _onUpdate(changed:DeepPartial<foundry.data.ActorData['_source']>,options:DocumentModificationOptions,user:string):void;/** @override */protected _onCreateEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:Record<string,unknown>[],options:DocumentModificationOptions,userId:string):void;/** @override */protected _onUpdateEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:Record<string,unknown>[],options:DocumentModificationOptions,userId:string):void;/** @override */protected _onDeleteEmbeddedDocuments(embeddedName:string,documents:foundry.abstract.Document<any,any>[],result:string[],options:DocumentModificationContext,userId:string):void;/**\n * Refresh the display of active Tokens for this Actor if ActiveEffects were changed\n */protected _refreshTokens():void;/**\n * You are referencing Actor#_data which has been deprecated in favor of Actor#data#_source. Support for this reference will be removed in 0.9.0\n * @deprecated since 0.8.0\n */get _data():this['data']['_source'];/**\n * You are referencing Actor#getOwnedItem(itemId) which is deprecated in favor of Actor#items#get(itemId). Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\ngetOwnedItem(itemId:string):InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseItem>>|undefined;/**\n * You are referencing Actor#createOwnedItem which is deprecated in favor of Item.create or Actor#createEmbeddedDocuments. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\ncreateOwnedItem(itemData:Parameters<this['createEmbeddedDocuments']>[1][]|Parameters<this['createEmbeddedDocuments']>[1],options:Parameters<this['createEmbeddedDocuments']>[2]):ReturnType<this['createEmbeddedDocuments']>;/**\n * You are referencing Actor#updateOwnedItem which is deprecated in favor of Item#update or Actor#updateEmbeddedDocuments. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\nupdateOwnedItem(itemData:Parameters<this['updateEmbeddedDocuments']>[1][]|Parameters<this['updateEmbeddedDocuments']>[1],options:Parameters<this['updateEmbeddedDocuments']>[2]):ReturnType<this['updateEmbeddedDocuments']>;/**\n * You are referencing Actor#deleteOwnedItem which is deprecated in favor of Item#delete or Actor#deleteEmbeddedDocuments. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\ndeleteOwnedItem(itemId:Parameters<this['deleteEmbeddedDocuments']>[1][]|Parameters<this['deleteEmbeddedDocuments']>[1],options:Parameters<this['deleteEmbeddedDocuments']>[2]):ReturnType<this['deleteEmbeddedDocuments']>;/**\n * You are referencing Actor.fromToken which is deprecated in favor of TokenDocument#getActor. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */static fromToken(token:InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>):InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;/**\n * You are referencing Actor.createTokenActor which is deprecated in favor of TokenDocument#getActor. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */static createTokenActor(_baseActor:unknown,token:InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>):InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;}namespace Actor{interface RollInitiativeOptions{/**\n * Create new Combatant entries for Tokens associated with this actor.\n * @defaultValue `false`\n */\ncreateCombatants?:boolean;/**\n * Re-roll the initiative for this Actor if it has already been rolled.\n * @defaultValue `false`\n */\nrerollInitiative?:boolean;/**\n * Additional options passed to the Combat#rollInitiative method.\n * @defaultValue `{}`\n * TODO: Solve once Combat is more fleshed out. @see Combat#rollInitiative\n */\ninitiativeOptions?:object;}}}"
    ]
  