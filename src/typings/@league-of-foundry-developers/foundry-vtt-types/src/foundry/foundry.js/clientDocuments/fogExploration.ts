
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\fogExploration.d.ts",
      "import{ConfiguredDocumentClass}from'../../../types/helperTypes';import{RequestOptions}from'../../common/abstract/backend.mjs';declare global{/**\n * The client-side FogExploration document which extends the common BaseFogExploration model.\n * Each FogExploration document contains FogExplorationData which defines its data schema.\n *\n * @see {@link data.FogExplorationData} The FogExploration data schema\n */class FogExploration extends ClientDocumentMixin(foundry.documents.BaseFogExploration){/**\n * @param data - Initial data provided to construct the FogExploration document\n *               (default: `{}`)\n */constructor(data?:ConstructorParameters<ConstructorOf<foundry.documents.BaseFogExploration>>[0],context?:ConstructorParameters<ConstructorOf<foundry.documents.BaseFogExploration>>[1]);/**\n * Explore fog of war for a new point source position.\n * @param source - The candidate source of exploration\n * @param force  - Force the position to be re-explored\n *                 (default: `false`)\n * @returns Is the source position newly explored?\n */\nexplore(source:PointSource,force?:boolean):boolean;/**\n * Obtain the fog of war exploration progress for a specific Scene and User.\n * @param options - (default: `{}`)\n */static get({scene,user}?:{scene?:InstanceType<ConfiguredDocumentClass<typeof Scene>>;user?:InstanceType<ConfiguredDocumentClass<typeof User>>;},options?:RequestOptions):Promise<StoredDocument<InstanceType<ConfiguredDocumentClass<typeof FogExploration>>>|null>;/**\n * Transform the explored base64 data into a PIXI.Texture object\n */\ngetTexture():PIXI.Texture|null;/**\n * Open Socket listeners which transact JournalEntry data\n * @internal\n */static _activateSocketListeners(socket:io.Socket):void;/**\n * Handle a request from the server to reset fog of war for a particular scene.\n * @internal\n */protected static _onResetFog(sceneId:string):void|Promise<void>;}}export{};"
    ]
  