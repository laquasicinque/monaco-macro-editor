
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\folder.d.ts",
      "import{DocumentModificationOptions}from'../../common/abstract/document.mjs';import{ConfiguredDocumentClass,ConstructorDataType}from'../../../types/helperTypes';declare global{/**\n * The client-side Folder document which extends the common BaseFolder model.\n * Each Folder document contains FolderData which defines its data schema.\n *\n * @see {@link data.FolderData}              The Folder data schema\n * @see {@link documents.Folders}            The world-level collection of Folder documents\n * @see {@link embedded.FolderSound}         The FolderSound embedded document within a parent Folder\n * @see {@link applications.FolderConfig}    The Folder configuration application\n *\n * @param data - Initial data provided to construct the Folder document\n */class Folder extends ClientDocumentMixin(foundry.documents.BaseFolder){/**\n * The depth of this folder in its sidebar tree\n *\n * @remarks For folders that have been populated by the {@link SidebarDirectory}, this is always be defined\n */\ndepth?:number;/**\n * Return an array of the Document instances which are contained within this Folder.\n */get contents():InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>[];/**\n * Return whether the folder is displayed in the sidebar to the current user\n */get displayed():boolean;/**\n * Return a reference to the Document type which is contained within this Folder.\n */get documentClass():typeof CONFIG[this['data']['type']]['documentClass'];/**\n * Return a reference to the WorldCollection instance which provides Documents to this Folder.\n */get documentCollection():Collection<InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>>;/**\n * Return whether the folder is currently expanded within the sidebar interface.\n */get expanded():boolean;/**\n * A reference to the parent Folder if one is set, otherwise null.\n */get parentFolder():Folder|null;/**\n * Return the named Entity type for elements in this folder.\n */get type():this['data']['type'];/**\n * Create a new Folder by rendering a dialog window to provide basic creation details\n * @param data    - Initial data with which to populate the creation form\n * @param options - Initial positioning and sizing options for the dialog form\n *                  (default: `{}`)\n * @returns An active FolderConfig instance for creating the new Folder entity\n *\n * @remarks\n * This actually returns a FolderConfig but that is incorrectly overriding\n * ClientDocumentMixin.createDialog, for which a Promise of the created\n * Document is returned.\n */static createDialog(data?:DeepPartial<|ConstructorDataType<foundry.data.FolderData>|(ConstructorDataType<foundry.data.FolderData>&Record<string,unknown>)>,options?:Dialog.Options):any;/**\n * Export all Documents contained in this Folder to a given Compendium pack.\n * Optionally update existing Documents within the Pack by name, otherwise append all new entries.\n * @param  pack         - A Compendium pack to which the entities will be exported\n * @param  updateByName - Update existing entries in the Compendium pack, matching by name\n *                        (default: `false`)\n * @returns The updated Compendium Collection instance\n */\nexportToCompendium(pack:any,{updateByName}?:{updateByName?:boolean}):Promise<any>;/**\n * Provide a dialog form that allows for exporting the contents of a Folder into an eligible Compendium pack.\n * @param pack    - A pack ID to set as the default choice in the select input\n * @param options - Additional options passed to the Dialog.prompt method\n *                  (default: `{}`)\n * @returns A Promise which resolves or rejects once the dialog has been submitted or closed\n */\nexportDialog(pack:string,options?:Dialog.Options):Promise<void>;/**\n * Get the Folder documents which are sub-folders of the current folder, either direct children or recursively.\n * @param recursive - Identify child folders recursively, if false only direct children are returned\n *                    (default: `false`)\n * @returns An array of Folder documents which are subfolders of this one\n */\ngetSubfolders(recursive?:boolean):InstanceType<ConfiguredDocumentClass<typeof Folder>>[];protected _onDelete(options:DocumentModificationOptions,userId:string):void;/**\n * @deprecated since 0.8.0\n */get entities():this['contents'];}}"
    ]
  