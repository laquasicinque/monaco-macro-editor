
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\scene.d.ts",
      "import{ConfiguredDocumentClass,ConstructorDataType,PropertiesToSource}from'../../../types/helperTypes';import{DocumentModificationOptions}from'../../common/abstract/document.mjs';import{AmbientLightDataProperties}from'../../common/data/data.mjs/ambientLightData';import{AmbientSoundDataProperties}from'../../common/data/data.mjs/ambientSoundData';import{DrawingDataProperties}from'../../common/data/data.mjs/drawingData';import{MeasuredTemplateDataProperties}from'../../common/data/data.mjs/measuredTemplateData';import{NoteDataProperties}from'../../common/data/data.mjs/noteData';import{TileDataProperties}from'../../common/data/data.mjs/tileData';import{TokenDataProperties}from'../../common/data/data.mjs/tokenData';import{WallDataProperties}from'../../common/data/data.mjs/wallData';declare global{/**\n * The client-side Scene document which extends the common BaseScene abstraction.\n * Each Scene document contains SceneData which defines its data schema.\n *\n * @see {@link data.SceneData}              The Scene data schema\n * @see {@link documents.Scenes}            The world-level collection of Scene documents\n * @see {@link applications.SceneConfig}    The Scene configuration application\n *\n */class Scene extends ClientDocumentMixin(foundry.documents.BaseScene){/**\n * @param data - Initial data provided to construct the Scene document\n */constructor(data:ConstructorParameters<typeof foundry.documents.BaseScene>[0],context?:ConstructorParameters<typeof foundry.documents.BaseScene>[1]);/**\n * Determine the canvas dimensions this Scene would occupy, if rendered\n * @defaultValue `{}`\n */\ndimensions:ReturnType<typeof Canvas.getDimensions>|{};/**\n * Track whether the scene is the active view\n */protected _view:this['data']['active'];/**\n * Track the viewed position of each scene (while in memory only, not persisted)\n * When switching back to a previously viewed scene, we can automatically pan to the previous position.\n * @defaultValue `{}`\n * @remarks This is intentionally public because it is used in Canvas._initializeCanvasPosition() and Canvas.pan()\n */\n_viewPosition:{x:number;y:number;scale:number}|{};/**\n * A convenience accessor for whether the Scene is currently active\n */get active():this['data']['active'];/**\n * A convenience accessor for the background image of the Scene\n */get img():this['data']['img'];/**\n * A convenience accessor for whether the Scene is currently viewed\n */get isView():boolean;/**\n * A reference to the JournalEntry entity associated with this Scene, or null\n */get journal():InstanceType<ConfiguredDocumentClass<typeof JournalEntry>>|null;/**\n * A reference to the Playlist entity for this Scene, or null\n */get playlist():InstanceType<ConfiguredDocumentClass<typeof Playlist>>|null;/**\n * A reference to the PlaylistSound document which should automatically play for this Scene, if any\n */get playlistSound():InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BasePlaylistSound>>|null;/**\n * Set this scene as currently active\n * @returns A Promise which resolves to the current scene once it has been successfully activated\n */\nactivate():Promise<this|undefined>;/**\n * Set this scene as the current view\n */\nview():Promise<this|undefined>;/**\n * @override\n * @param createData - (default: `{}`)\n * @param options    - (default: `{}`)\n */\nclone(createData?:DeepPartial<|ConstructorDataType<foundry.data.SceneData>|(ConstructorDataType<foundry.data.SceneData>&Record<string,unknown>)>,options?:{save?:boolean;keepId?:boolean}):TemporaryDocument<this>|Promise<TemporaryDocument<this|undefined>>;/** @override */\nprepareBaseData():void;/** @override */protected _preCreate(data:ConstructorDataType<foundry.data.SceneData>,options:DocumentModificationOptions,user:foundry.documents.BaseUser):Promise<void>;/** @override */protected _onCreate(data:foundry.data.SceneData['_source'],options:DocumentModificationOptions,userId:string):void;/** @override */protected _preUpdate(changed:DeepPartial<ConstructorDataType<foundry.data.SceneData>>,options:DocumentModificationOptions,user:foundry.documents.BaseUser):Promise<void>;/** @override */protected _onUpdate(changed:DeepPartial<foundry.data.SceneData['_source']>&Record<string,unknown>,options:DocumentModificationOptions,userId:string):void;/** @override */protected _preDelete(options:DocumentModificationOptions,user:foundry.documents.BaseUser):Promise<void>;/** @override */protected _onDelete(options:DocumentModificationOptions,userId:string):void;/**\n * Handle Scene activation workflow if the active state is changed to true\n * @param active - Is the scene now active?\n */protected _onActivate(active:boolean):ReturnType<this['view']>|ReturnType<Canvas['draw']>|void;/** @override */\n_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.DrawingData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.TokenData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.AmbientLightData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.NoteData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.AmbientSoundData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.MeasuredTemplateData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.TileData>[],options:DocumentModificationOptions,userId:string):void;_preCreateEmbeddedDocuments(embeddedName:string,result:ConstructorDataType<foundry.data.WallData>[],options:DocumentModificationOptions,userId:string):void;/** @override */\n_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],result:DeepPartial<PropertiesToSource<DrawingDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],result:DeepPartial<PropertiesToSource<TokenDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],result:DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],result:DeepPartial<PropertiesToSource<NoteDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],result:DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],result:DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],result:DeepPartial<PropertiesToSource<TileDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onCreateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],result:DeepPartial<PropertiesToSource<WallDataProperties>>[],options:DocumentModificationContext,userId:string):void;/** @override */\n_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<DrawingDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<TokenDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<NoteDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<TileDataProperties>>[],options:DocumentModificationContext,userId:string):void;_preUpdateEmbeddedDocuments(embeddedName:string,result:DeepPartial<PropertiesToSource<WallDataProperties>>[],options:DocumentModificationContext,userId:string):void;/** @override */\n_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],result:DeepPartial<PropertiesToSource<DrawingDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],result:DeepPartial<PropertiesToSource<TokenDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],result:DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],result:DeepPartial<PropertiesToSource<NoteDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],result:DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],result:DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],result:DeepPartial<PropertiesToSource<TileDataProperties>>[],options:DocumentModificationContext,userId:string):void;_onUpdateEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],result:DeepPartial<PropertiesToSource<WallDataProperties>>[],options:DocumentModificationContext,userId:string):void;/** @override */\n_preDeleteEmbeddedDocuments(embeddedName:string,result:string[],options:DocumentModificationContext,userId:string):void;/** @override */\n_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;_onDeleteEmbeddedDocuments(embeddedName:string,documents:InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],result:string[],options:DocumentModificationContext,userId:string):void;/** @override */\ntoCompendium(pack?:CompendiumCollection<CompendiumCollection.Metadata>):Omit<\nfoundry.data.SceneData['_source'],'_id'|'folder'|'permission'>&{permission?:foundry.data.SceneData extends{toObject():infer U}?U:never;};/**\n * Create a 300px by 100px thumbnail image for this scene background\n * @param data - (default: `{}`)\n * @returns The created thumbnail data.\n */\ncreateThumbnail(data?:Partial<ThumbnailCreationData>):ReturnType<typeof ImageHelper['createThumbnail']>;}}interface ThumbnailCreationData{/**\n * A background image to use for thumbnail creation, otherwise the current scene\n * background is used.\n */\nimg:string;/**\n * The desired thumbnail width. Default is 300px\n * @defaultValue `300`\n */\nwidth:number;/**\n * The desired thumbnail height. Default is 100px;\n * @defaultValue `100`\n */\nheight:number;}"
    ]
  