
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\user.d.ts",
      "import{ConfiguredDocumentClass}from'../../../types/helperTypes';import{DocumentDataType,DocumentModificationOptions}from'../../common/abstract/document.mjs';declare global{/**\n * The client-side User document which extends the common BaseUser model.\n * Each User document contains UserData which defines its data schema.\n *\n * @see {@link data.UserData}               The User data schema\n * @see {@link documents.Users}             The world-level collection of User documents\n * @see {@link applications.UserConfig}     The User configuration application\n */class User extends ClientDocumentMixin(foundry.documents.BaseUser){/**\n * @param data - Initial data provided to construct the User document\n *               (default: `{}`)\n */constructor(data?:ConstructorParameters<ConstructorOf<foundry.documents.BaseUser>>[0],context?:ConstructorParameters<ConstructorOf<foundry.documents.BaseUser>>[1]);/**\n * Track whether the user is currently active in the game\n * @defaultValue `false`\n */\nactive:boolean;/**\n * Track references to the current set of Tokens which are targeted by the User\n */\ntargets:UserTargets;/**\n * Track the ID of the Scene that is currently being viewed by the User\n * @defaultValue `null`\n */\nviewedScene:string|null;/**\n * Return the User avatar icon or the controlled actor's image\n */get avatar():string;/**\n * Return the Actor instance of the user's impersonated character (or undefined)\n */get character():ReturnType<Exclude<Game['actors'],undefined>['get']>;/**\n * A convenience shortcut for the permissions object of the current User\n */get permissions():foundry.data.UserData['permissions'];/**\n * A flag for whether the current User is a Trusted Player\n */get isTrusted():boolean;/**\n * A flag for whether this User is the connected client\n */get isSelf():boolean;/**\n * Assign a Macro to a numbered hotbar slot between 1 and 50\n * @param macro    - The Macro entity to assign\n * @param slot     - A specific numbered hotbar slot to fill\n * @param fromSlot - An optional origin slot from which the Macro is being shifted\n * @returns A Promise which resolves once the User update is complete\n */\nassignHotbarMacro(macro:InstanceType<ConfiguredDocumentClass<typeof Macro>>|null,slot:string|number,{fromSlot}?:{fromSlot:number}):Promise<this>;/**\n * Assign a specific boolean permission to this user.\n * Modifies the user permissions to grant or restrict access to a feature.\n *\n * @param permission - The permission name from USER_PERMISSIONS\n * @param allowed    - Whether to allow or restrict the permission\n */\nassignPermission(permission:keyof typeof CONST.USER_PERMISSIONS,allowed:boolean):Promise<this>;/**\n * Submit User activity data to the server for broadcast to other players.\n * This type of data is transient, persisting only for the duration of the session and not saved to any database.\n *\n * @param activityData - An object of User activity data to submit to the server for broadcast.\n *                       (default: `{}`)\n */\nbroadcastActivity(activityData?:User.ActivityData):void;/**\n * Get an Array of Macro Entities on this User's Hotbar by page\n * @param page - The hotbar page number\n *               (default: `1`)\n */\ngetHotbarMacros(page?:number):Array<{slot:number;macro:InstanceType<ConfiguredDocumentClass<typeof Macro>>|null}>;/**\n * Update the set of Token targets for the user given an array of provided Token ids.\n * @param targetIds - An array of Token ids which represents the new target set\n *                    (default: `[]`)\n */\nupdateTokenTargets(targetIds?:string[]):void;/** @override  */\n_onUpdate(data:DeepPartial<DocumentDataType<foundry.documents.BaseUser>>,options:DocumentModificationOptions,userId:string):void;/** @override  */\n_onDelete(options:DocumentModificationOptions,userId:string):void;/**\n * @deprecated since 0.8.0\n */\nisRole(role:Parameters<User['hasRole']>[0]):boolean;/**\n * @deprecated since 0.8.0\n */\nsetPermission(permission:keyof typeof CONST.USER_PERMISSIONS,allowed:boolean):Promise<this>;/** @remarks This property is set by PlayerList.getData() */\ncharname?:string;/** @remarks This property is set by PlayerList.getData() */\ncolor?:string;/** @remarks This property is set by PlayerList.getData() */\nborder?:string;}namespace User{interface ActivityData{/**\n * The coordinates of the user's cursor\n */\ncursor?:boolean;/**\n * Is the user pulling focus to the cursor coordinates?\n */\nfocus?:boolean;/**\n * Is the user emitting a ping at the cursor coordinates?\n */\nping?:boolean;/**\n * Serialized Ruler coordinate data in JSON format\n */\nruler?:string;/**\n * The id of the Scene currently being viewed by the User\n */\nsceneId?:string;/**\n * An array of Token ids which are targeted by the User\n */\ntargets?:string[];}}}"
    ]
  