
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\clientDocuments\\combat.d.ts",
      "import{ConfiguredDocumentClass,ConstructorDataType,PropertiesToSource}from'../../../types/helperTypes';import{DocumentModificationOptions}from'../../common/abstract/document.mjs';import{CombatantDataProperties}from'../../common/data/data.mjs/combatantData';declare global{/**\n * The Combat model definition which defines common behavior of an Combat document between both client and server.\n * Each Combat document contains CombatData which defines its data schema.\n *\n * @see {@link data.CombatData}               The Combat data schema\n * @see {@link documents.Combats}             The world-level collection of Combat documents\n * @see {@link embedded.Combatant}            The Combatant embedded document which exists within a Combat document\n * @see {@link applications.CombatConfig}     The Combat configuration application\n *\n * @param data - Initial data provided to construct the Combat document\n */class Combat extends ClientDocumentMixin(foundry.documents.BaseCombat){constructor(data?:ConstructorParameters<ConstructorOf<foundry.documents.BaseCombat>>[0],context?:ConstructorParameters<ConstructorOf<foundry.documents.BaseCombat>>[1]);/** Track the sorted turn order of this combat encounter */\nturns:InstanceType<ConfiguredDocumentClass<typeof Combatant>>[];/** Record the current round, turn, and tokenId to understand changes in the encounter state */protected current:RoundData;/** Track the previous round, turn, and tokenId to understand changes in the encounter state */protected previous:RoundData;/**\n * Track whether a sound notification is currently being played to avoid double-dipping\n * @defaultValue `false`\n */protected _soundPlaying:boolean;/** The configuration setting used to record Combat preferences */static CONFIG_SETTING:'combatTrackerConfig';/** Get the Combatant who has the current turn. */get combatant():this['turns'][number];/** The numeric round of the Combat encounter */get round():number;/**\n * A reference to the Scene document within which this Combat encounter occurs.\n * If a specific Scene is not set in the Combat Data, the currently viewed scene is assumed instead.\n */get scene():InstanceType<ConfiguredDocumentClass<typeof Scene>>|undefined;/** Return the object of settings which modify the Combat Tracker behavior */get settings():typeof CombatEncounters['settings'];/** Has this combat encounter been started? */get started():boolean;/** The numeric turn of the combat round in the Combat encounter */get turn():number;get visible():true;/**\n * Set the current Combat encounter as active within the Scene.\n * Deactivate all other Combat encounters within the viewed Scene and set this one as active\n * @param options - Additional context to customize the update workflow\n */\nactivate(options?:DocumentModificationContext&foundry.utils.MergeObjectOptions):Promise<InstanceType<ConfiguredDocumentClass<typeof Combat>>[]>;/** Display a dialog querying the GM whether they wish to end the combat encounter and empty the tracker */\nendCombat():Promise<InstanceType<ConfiguredDocumentClass<typeof Combat>>|undefined>;/**\n * Get a Combatant using its Token id\n * @param tokenId - The id of the Token for which to acquire the combatant\n */\ngetCombatantByToken(tokenId:string):ReturnType<this['combatants']['find']>;/** Advance the combat to the next round */\nnextRound():Promise<this|undefined>;/** Advance the combat to the next turn */\nnextTurn():Promise<this|undefined>;/** @override */\nprepareDerivedData():void;/** Rewind the combat to the previous round */\npreviousRound():Promise<this|undefined>;/** Rewind the combat to the previous turn */\npreviousTurn():Promise<this|undefined>;/** Reset all combatant initiative scores, setting the turn back to zero */\nresetAll():Promise<this|undefined>;/**\n * Roll initiative for one or multiple Combatants within the Combat entity\n * @param ids - A Combatant id or Array of ids for which to roll\n * @param options - Additional options which modify how initiative rolls are created or presented.\n *                  default `{}`\n * @returns  A promise which resolves to the updated Combat entity once updates are complete.\n */\nrollInitiative(ids:string|string[],options?:InitiativeOptions):Promise<this>;/**\n * Roll initiative for all combatants which have not already rolled\n * @param options - Additional options forwarded to the Combat.rollInitiative method\n *                  default `{}`\n */\nrollAll(options?:InitiativeOptions):this['rollInitiative'];/**\n * Roll initiative for all non-player actors who have not already rolled\n * @param options - Additional options forwarded to the Combat.rollInitiative method\n *                  default `{}`\n */\nrollNPC(options?:InitiativeOptions):this['rollInitiative'];/**\n * Assign initiative for a single Combatant within the Combat encounter.\n * Update the Combat turn order to maintain the same combatant as the current turn.\n * @param id - The combatant ID for which to set initiative\n * @param value - A specific initiative value to set\n */\nsetInitiative(id:string,value:number):Promise<void>;/** Return the Array of combatants sorted into initiative order, breaking ties alphabetically by name. */\nsetupTurns():this['turns'];/** Begin the combat encounter, advancing to round 1 and turn 1 */\nstartCombat():Promise<this|undefined>;/**\n * Define how the array of Combatants is sorted in the displayed list of the tracker.\n * This method can be overridden by a system or module which needs to display combatants in an alternative order.\n * By default sort by initiative, next falling back to name, lastly tie-breaking by combatant id.\n */protected _sortCombatants(a:InstanceType<ConfiguredDocumentClass<typeof Combatant>>,b:InstanceType<ConfiguredDocumentClass<typeof Combatant>>):number;protected _onCreate(data:this['data']['_source'],options:DocumentModificationOptions,userId:string):void;protected _onUpdate(changed:DeepPartial<this['data']['_source']>,options:DocumentModificationOptions,userId:string):void;protected _onDelete(options:DocumentModificationOptions,userId:string):void;protected _onCreateEmbeddedDocuments(embeddedName:string,documents:Combatant[],result:DeepPartial<PropertiesToSource<CombatantDataProperties>>[],options:DocumentModificationOptions,userId:string):void;protected _onUpdateEmbeddedDocuments(embeddedName:string,documents:Combatant[],result:DeepPartial<PropertiesToSource<CombatantDataProperties>>[],options:DocumentModificationOptions,userId:string):void;protected _onDeleteEmbeddedDocuments(embeddedName:string,documents:Combatant[],result:string[],options:DocumentModificationContext,userId:string):void;/** @deprecated since 0.8.0 */\ngetCombatant(id:string):this['combatants']['get'];/** @deprecated since 0.8.0 */\ncreateCombatant(data:|ConstructorDataType<foundry.data.CombatData>|(ConstructorDataType<foundry.data.CombatData>&Record<string,unknown>),options?:DocumentModificationContext):this['createEmbeddedDocuments'];/** @deprecated since 0.8.0 */\nupdateCombatant(data:DeepPartial<|ConstructorDataType<foundry.data.CombatData>|(ConstructorDataType<foundry.data.CombatData>&Record<string,unknown>)>,options?:DocumentModificationContext):NonNullable<ReturnType<this['combatants']['get']>>['update'];/** @deprecated since 0.8.0 */\ndeleteCombatant(id:string,options?:DocumentModificationContext):NonNullable<ReturnType<this['combatants']['get']>>['delete'];}}interface InitiativeOptions{/**\n * A non-default initiative formula to roll. Otherwise the system default is used.\n * @defaultValue `null`\n */\nformula?:string|null;/**\n * Update the Combat turn after adding new initiative scores to keep the turn on the same Combatant.\n * @defaultValue `true`\n */\nupdateTurn?:boolean;/**\n * Additional options with which to customize created Chat Messages\n * @defaultValue `{}`\n */\nmessageOptions?:object;}interface RoundData{round:number|null;turn:number|null;tokenId:string|null;combatantid:string|null;}"
    ]
  