
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\poolTerm.d.ts",
      "declare global{/**\n * A type of RollTerm which encloses a pool of multiple inner Rolls which are evaluated jointly.\n *\n * A dice pool represents a set of Roll expressions which are collectively modified to compute an effective total\n * across all Rolls in the pool. The final total for the pool is defined as the sum over kept rolls, relative to any\n * success count or margin.\n *\n * @example\n * ```typescript\n * // Keep the highest of the 3 roll expressions\n * let pool = new PoolTerm({\n *   rolls: [\"4d6\", \"3d8 - 1\", \"2d10 + 3\"],\n *   modifiers: [\"kh\"]\n * });\n * pool.evaluate();\n * ```\n */class PoolTerm extends RollTerm{constructor({terms,modifiers,rolls,results,options}?:PoolTermConstructorData);/**\n * The original provided terms to the Dice Pool\n */\nterms:PoolTerm.TermData['terms'];/**\n * The string modifiers applied to resolve the pool\n */\nmodifiers:PoolTerm.TermData['modifiers'];/**\n * Each component term of a dice pool is evaluated as a Roll instance\n */\nrolls:PoolTerm.TermData['rolls'];/**\n * The array of dice pool results which have been rolled\n */\nresults:PoolTerm.TermData['results'];/**\n * Define the modifiers that can be used for this particular DiceTerm type.\n */static MODIFIERS:PoolTerm.Modifiers;/**\n * The regular expression pattern used to identify the opening of a dice pool expression.\n * @defaultValue `/{/g`\n */static OPEN_REGEXP:RegExp;/**\n * A regular expression pattern used to identify the closing of a dice pool expression\n * @defaultValue\n * ```typescript\n * new RegExp(`}${DiceTerm.MODIFIERS_REGEXP_STRING}?(?:%F[0-9]+%)?`, \"g\")\n * ```\n */static CLOSE_REGEXP:RegExp;/**\n * @defaultValue `[\"terms\", \"modifiers\", \"rolls\", \"results\"]`\n */static SERIALIZE_ATTRIBUTES:string[];/**\n * Return an Array of each individual DiceTerm instances contained within the PoolTerm.\n */get dice():DiceTerm[];get expression():string;get total():undefined|number;/**\n * Return an array of rolled values which are still active within the PoolTerm\n */get values():number[];/**\n * Alter the DiceTerm by adding or multiplying the number of dice which are rolled\n * @param args - Arguments passed to each contained Roll#alter method.\n * @returns The altered pool\n */\nalter(...args:Parameters<Roll['alter']>):this;protected _evaluateSync({minimize,maximize}?:{minimize?:boolean;maximize?:boolean}):this;protected _evaluate({minimize,maximize}?:{minimize?:boolean;maximize?:boolean}):Promise<this>;/**\n * Use the same logic as for the DiceTerm to avoid duplication\n * @see DiceTerm#_evaluateModifiers\n */protected _evaluateModifiers():void;/**\n * Use the same logic as for the DiceTerm to avoid duplication\n * @see DiceTerm#_evaluateModifier\n */protected _evaluateModifier(command:string,modifier:string):void;protected static _fromData<T extends RollTerm>(this:ConstructorOf<T>,data:object):T;toJSON():object;/**\n * Given a string formula, create and return an evaluated PoolTerm object\n * @param formula - The string formula to parse\n * @param options - Additional options applied to the PoolTerm\n * @returns The evaluated PoolTerm object or null if the formula is invalid\n */static fromExpression<T extends RollTerm>(this:ConstructorOf<T>,formula:string,options?:RollTerm.Options):T|null;/**\n * Create a PoolTerm by providing an array of existing Roll objects\n * @param rolls - An array of Roll objects from which to create the pool\n * @returns The constructed PoolTerm comprised of the provided rolls\n */static fromRolls<T extends PoolTerm>(this:ConstructorOf<T>,rolls?:Roll[]):T;/**\n * Keep a certain number of highest or lowest dice rolls from the result set.\n * @example\n * `{1d6,1d8,1d10,1d12}kh2` Keep the 2 best rolls from the pool\n * @example\n * `{1d12,6}kl` Keep the lowest result in the pool\n *\n * @param modifier - The matched modifier query\n */\nkeep(modifier:string):ReturnType<Die['keep']>;/**\n * Keep a certain number of highest or lowest dice rolls from the result set.\n * @example\n * `{1d6,1d8,1d10,1d12}dl3` Drop the 3 worst results in the pool\n * @example\n * `{1d12,6}dh` Drop the highest result in the pool\n *\n * @param modifier - The matched modifier query\n */\ndrop(modifier:string):ReturnType<Die['drop']>;/**\n * Count the number of successful results which occurred in the pool.\n * Successes are counted relative to some target, or relative to the maximum possible value if no target is given.\n * Applying a count-success modifier to the results re-casts all results to 1 (success) or 0 (failure)\n * @example\n * `20d20cs` Count the number of dice which rolled a 20\n * @example\n * `20d20cs>10` Count the number of dice which rolled higher than 10\n * @example\n * `20d20cs<10` Count the number of dice which rolled less than 10\n *\n * @param modifier - The matched modifier query\n */\ncountSuccess(modifier:string):ReturnType<Die['countSuccess']>;/**\n * Count the number of failed results which occurred in a given result set.\n * Failures are counted relative to some target, or relative to the lowest possible value if no target is given.\n * Applying a count-failures modifier to the results re-casts all results to 1 (failure) or 0 (non-failure)\n * @example\n * `6d6cf` Count the number of dice which rolled a 1 as failures\n * @example\n * `6d6cf<=3` Count the number of dice which rolled less than 3 as failures\n * @example\n * `6d6cf>4` Count the number of dice which rolled greater than 4 as failures\n *\n * @param modifier - The matched modifier query\n */\ncountFailures(modifier:string):ReturnType<Die['countFailures']>;}/**\n * @deprecated since 0.8.1\n */const DicePool:typeof PoolTerm;namespace PoolTerm{/**\n * @remarks This interface is not defined by foundry itself. It only exists\n * to allow module and system authors to use it for declaration merging,\n * enabling them to add additional modifiers for {@link PoolTerm}s.\n */interface Modifiers{k:'keep';kh:'keep';kl:'keep';d:'drop';dh:'drop';dl:'drop';cs:'countSuccess';cf:'countFailures';}type TermData=Required<PoolTermConstructorData>;}}interface PoolTermConstructorData{/**\n * @defaultValue `[]`\n */\nterms?:string[];/**\n * @defaultValue `[]`\n */\nmodifiers?:string[];/**\n * @defaultValue `[]`\n */\nrolls?:Roll[];/**\n * @defaultValue `[]`\n */\nresults?:DiceTerm.Result[];/**\n * @defaultValue `{}`\n */\noptions?:RollTerm.Options;}export{};"
    ]
  