
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\rollTerms\\diceTerm.d.ts",
      "/**\n * An abstract base class for any type of RollTerm which involves randomized input from dice, coins, or other devices.\n */declare abstract class DiceTerm extends RollTerm{/**\n * @param termData  - Data used to create the Dice Term, including the following:\n *                    (default: `{}`)\n * @param number    - The number of dice of this term to roll, before modifiers are applied\n *                    (default: `1`)\n * @param faces     - The number of faces on each die of this type\n *                    (default: `6`)\n * @param modifiers - An array of modifiers applied to the results\n *                    (default: `[]`)\n * @param results   - An optional array of pre-cast results for the term\n *                    (default: `[]`)\n * @param options   - Additional options that modify the term\n *                    (default: `{}`)\n */constructor(termData?:Partial<DiceTerm.TermData>);/**\n * The number of dice of this term to roll, before modifiers are applied\n */number:DiceTerm.TermData['number'];/**\n * The number of faces on the die\n */\nfaces:DiceTerm.TermData['faces'];/**\n * An Array of dice term modifiers which are applied\n */\nmodifiers:DiceTerm.TermData['modifiers'];/**\n * The array of dice term results which have been rolled\n */\nresults:DiceTerm.Result[];/**\n * Define the denomination string used to register this DiceTerm type in CONFIG.Dice.terms\n * @defaultValue \"\"\n */static DENOMINATION:string;/**\n * Define the named modifiers that can be applied for this particular DiceTerm type.\n * @defaultValue `{}`\n */static MODIFIERS:DiceTerm.Modifiers;/**\n * A regular expression pattern which captures the full set of term modifiers\n * Anything until a space, group symbol, or arithmetic operator\n */static MODIFIERS_REGEXP_STRING:string;/** A regular expression used to separate individual modifiers */static MODIFIER_REGEXP:RegExp;/**\n * Return an array of rolled values which are still active within this term\n */get values():number[];/**\n * Alter the DiceTerm by adding or multiplying the number of dice which are rolled\n * @param multiply - A factor to multiply. Dice are multiplied before any additions.\n * @param add      - A number of dice to add. Dice are added after multiplication.\n * @returns The altered term\n */\nalter(multiply:number,add:number):this;protected _evaluateSync({minimize,maximize}?:{minimize?:boolean;maximize?:boolean}):this;/**\n * Roll the DiceTerm by mapping a random uniform draw against the faces of the dice term.\n * @param minimize - Minimize the result, obtaining the smallest possible value.\n * @param maximize - Maximize the result, obtaining the largest possible value.\n * @returns The produced result\n */\nroll({minimize,maximize}?:{minimize:boolean;maximize:boolean}):DiceTerm.Result;/**\n * Return a string used as the label for each rolled result\n * @param result - The rolled result\n * @returns The result label\n */\ngetResultLabel(result:DiceTerm.Result):string;/**\n * Get the CSS classes that should be used to display each rolled result\n * @param result - The rolled result\n * @returns The desired classes\n */\ngetResultCSS(result:DiceTerm.Result):(string|null)[];/**\n * Render the tooltip HTML for a Roll instance\n * @returns The data object used to render the default tooltip template for this DiceTerm\n */\ngetTooltipData():DiceTerm.ToolTipData;/**\n * Sequentially evaluate each dice roll modifier by passing the term to its evaluation function\n * Augment or modify the results array.\n */protected _evaluateModifiers():void;/**\n * Evaluate a single modifier command, recording it in the array of evaluated modifiers\n * @param command - The parsed modifier command\n * @param modifier -  The full modifier request\n */protected _evaluateModifier(command:string,modifier:string):void;/**\n * A helper comparison function.\n * Returns a boolean depending on whether the result compares favorably against the target.\n * @param result     - The result being compared\n * @param comparison - The comparison operator in [=,&lt;,&lt;=,\\>,\\>=]\n * @param target     - The target value\n * @returns Is the comparison true?\n */static compareResult(result:number,comparison:string,target:number):boolean;/**\n * A helper method to modify the results array of a dice term by flagging certain results are kept or dropped.\n * @param results - The results array\n * @param number  - The number to keep or drop\n * @param keep    - Keep results?\n *                  (default: `true`)\n * @param highest - Keep the highest?\n *                  (default: `true`)\n * @returns The modified results array\n */protected static _keepOrDrop(results:DiceTerm.Result[],number:number,{keep,highest}?:{keep:boolean;highest:boolean;}):DiceTerm.Result;/**\n * A reusable helper function to handle the identification and deduction of failures\n * @param flagFailure - (default: `false`)\n * @param flagSuccess - (default: `false`)\n */protected static _applyCount(results:DiceTerm.Result[],comparison:string,target:number,{flagSuccess,flagFailure}?:{flagSuccess:boolean;flagFailure:boolean;}):void;/**\n * A reusable helper function to handle the identification and deduction of failures\n * @param deductFailure - (default: `false`)\n * @param invertFailure - (default: `false`)\n */protected static _applyDeduct(results:DiceTerm.Result[],comparison:string,target:number,{deductFailure,invertFailure}?:{deductFailure:boolean;invertFailure:boolean;}):void;/**\n * @deprecated since 0.8.1\n */static fromExpression(expression:string,options:DiceTerm.Options):DiceTerm|null;/**\n * Determine whether a string expression matches this type of term\n * @param expression - The expression to parse\n * @param options - Additional options which customize the match\n * @param imputeNumber - Allow the number of dice to be optional, i.e. \"d6\"\n *                       (default: `true`)\n */static matchTerm(expression:string,{imputeNumber}?:{imputeNumber:boolean}):RegExpMatchArray|null;/**\n * Construct a term of this type given a matched regular expression array.\n * @param match - The matched regular expression array\n * @returns The constructed term\n */static fromMatch(match:RegExpMatchArray):DiceTerm;/**\n * @deprecated since 0.8.1\n */static fromResults(options:Partial<DiceTerm.TermData>,results:DiceTerm.Result[]):DiceTerm;/**\n * @deprecated since 0.8.1\n */static getResultLabel():string;}declare namespace DiceTerm{interface Data extends Partial<TermData>{class?:string;results:DiceTerm.Result[];}interface TermData{number:number;faces:number;modifiers:string[];results:Result[];options:DiceTerm.Options;}type Options=RollTerm.Options;interface Result{result:number;active?:boolean;count?:number;success?:boolean;failure?:boolean;discarded?:boolean;rerolled?:boolean;exploded?:boolean;}interface ToolTipData{formula:string;total:number;faces:number;flavor:string;rolls:{result:string;classes:string}[];}interface Modifiers{}}"
    ]
  