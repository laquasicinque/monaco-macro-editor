
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\hooks.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredObjectClassForName,DocumentConstructor,ToObjectFalseType}from'../../types/helperTypes.js';import{DocumentModificationOptions}from'../common/abstract/document.mjs.js';import{EffectChangeData}from'../common/data/data.mjs/effectChangeData.js';import{DropData}from'./clientDocumentMixin';declare global{/**\n * A simple event framework used throughout Foundry Virtual Tabletop.\n * When key actions or events occur, a \"hook\" is defined where user-defined callback functions can execute.\n * This class manages the registration and execution of hooked callback functions.\n */class Hooks{/**\n * Register a callback handler which should be triggered when a hook is triggered.\n *\n * @param hook - The unique name of the hooked event\n * @param fn   - The callback function which should be triggered when the hook event occurs\n * @returns An ID number of the hooked function which can be used to turn off the hook later\n */static on<K extends keyof Hooks.StaticCallbacks>(hook:K,fn:Hooks.StaticCallbacks[K]):number;static on<H extends Hooks.DynamicCallbacks>(hook:string,fn:H):number;static on<H extends(...args:any)=>any>(hook:string,fn:H):number;/**\n * Register a callback handler for an event which is only triggered once the first time the event occurs.\n * After a \"once\" hook is triggered the hook is automatically removed.\n *\n * @param hook - The unique name of the hooked event\n * @param fn   - The callback function which should be triggered when the hook event occurs\n * @returns An ID number of the hooked function which can be used to turn off the hook later\n */static once<K extends keyof Hooks.StaticCallbacks>(hook:K,fn:Hooks.StaticCallbacks[K]):ReturnType<typeof Hooks['on']>;static once<H extends Hooks.DynamicCallbacks>(hook:string,fn:H):ReturnType<typeof Hooks['on']>;static once<H extends(...args:any)=>any>(hook:string,fn:H):ReturnType<typeof Hooks['on']>;/**\n * Unregister a callback handler for a particular hook event\n *\n * @param hook - The unique name of the hooked event\n * @param fn   - The function, or ID number for the function, that should be turned off\n */static off<K extends keyof Hooks.StaticCallbacks>(hook:K,fn:number|Hooks.StaticCallbacks[K]):void;static off<H extends Hooks.DynamicCallbacks>(hook:string,fn:number|H):void;static off<H extends(...args:any)=>any>(hook:string,fn:number|H):void;/**\n * Call all hook listeners in the order in which they were registered\n * Hooks called this way can not be handled by returning false and will always trigger every hook callback.\n *\n * @param hook - The hook being triggered\n * @param args - Arguments passed to the hook callback functions\n */static callAll<K extends keyof Hooks.StaticCallbacks>(hook:K,...args:Parameters<Hooks.StaticCallbacks[K]>):true;static callAll<H extends Hooks.DynamicCallbacks>(hook:string,...args:Parameters<H>):true;static callAll<H extends(...args:any)=>any>(hook:string,...args:Parameters<H>):true;/**\n * Call hook listeners in the order in which they were registered.\n * Continue calling hooks until either all have been called or one returns false.\n *\n * Hook listeners which return false denote that the original event has been adequately handled and no further\n * hooks should be called.\n *\n * @param hook - The hook being triggered\n * @param args - Arguments passed to the hook callback functions\n */static call<K extends keyof Hooks.StaticCallbacks>(hook:K,...args:Parameters<Hooks.StaticCallbacks[K]>):boolean;static call<H extends Hooks.DynamicCallbacks>(hook:string,...args:Parameters<H>):boolean;static call<H extends(...args:any)=>any>(hook:string,...args:Parameters<H>):boolean;/**\n * Call a hooked function using provided arguments and perhaps unregister it.\n */protected static _call<K extends keyof Hooks.StaticCallbacks>(hook:K,fn:Hooks.StaticCallbacks[K],...args:Parameters<Hooks.StaticCallbacks[K]>):ReturnType<Hooks.StaticCallbacks[K]>|undefined;protected static _call<H extends Hooks.DynamicCallbacks>(hook:string,fn:H,...args:Parameters<H>):ReturnType<H>|undefined;protected static _call<H extends(...args:any)=>any>(hook:string,fn:H,...args:Parameters<H>):ReturnType<H>|undefined;/**\n * @defaultValue `{}`\n */protected static _hooks:Record<string,(...args:any)=>any>;/**\n * @defaultValue `[]`\n */protected static _once:Array<(...args:any)=>any>;/**\n * @defaultValue `{}`\n */protected static _ids:Record<number,Array<(...args:any)=>any>>;/**\n * @defaultValue `1`\n */protected static _id:number;}/**\n * This namespace contains typescript specific type definitions for the {@link Hooks} callback functions. It contains an\n * interface ({@link Hooks.StaticCallbacks}) for callbacks with static names. There are more function types in the\n * namespace for the dynamic hooks, whose names are generated at runtime. There is also a union of all of the dynamic\n * hooks ({@link Hooks.DynamicCallbacks}).\n *\n * Callback types remarked to be called with {@link Hooks.callAll} do not care about the return value of the callback.\n * Callback types remarked to be called with {@link Hooks.call} do care about the return value and will stop executing\n * remaining callbacks if `false` is returned. If a callback type does not have such a remark, pay attention to the\n * return value documentation.\n *\n * @example Using a callback type with a static name\n * ```typescript\n * Hooks.on('updateWorldTime', (worldTime, dt) => {\n *   // [...]\n * })\n * ```\n *\n * @example Using a callback with a dynamic name\n * ```typescript\n * Hooks.on<Hooks.GetCompendiumDirectoryEntryContext>('getJournalEntryContext', (jq, entryOptions) => {\n *   // [...]\n * })\n * ```\n *\n * @example Using a callback with a dynamic name and generic parameter\n * ```typescript\n * Hooks.on<Hooks.CloseApplication<FormApplication>>('closeFormApplication', (app, jq) => {\n *   // [...]\n * })\n * ```\n */namespace Hooks{interface StaticCallbacks{/**\n * A hook event that fires when a custom active effect is applied.\n * @param actor  - The actor the active effect is being applied to\n * @param change - The change data being applied\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link ActiveEffect#_applyCustom}\n */\napplyActiveEffect:(actor:InstanceType<ConfiguredDocumentClass<typeof Actor>>,change:EffectChangeData)=>boolean|void;/**\n * A hook event that fires when the Canvas is initialized.\n * @param canvas - the Canvas\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Canvas#draw}\n */\ncanvasInit:(canvas:Canvas)=>unknown;/**\n * A hook event that fires when the Canvas is panned.\n * @param canvas - The canvas\n * @param view   - The applied translate/transform\n * @remarks When called during animated panning, the callback is called on every tick.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Canvas#pan}\n * @see {@link Canvas#animatePan}\n */\ncanvasPan:(canvas:Canvas,view:Canvas.View)=>unknown;/**\n * A hook event that fires when the Canvas is ready.\n * @param canvas - the canvas\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link Canvas#draw}\n */\ncanvasReady:(canvas:Canvas)=>boolean|void;/**\n * A hook event that fires when the Sidebar tab is changed.\n * @param app - The SidebarTab application which is now active\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Sidebar#_onChangeTab}\n */\nchangeSidebarTab:(app:SidebarTab)=>unknown;/**\n * A hook event that fires when a chat bubble is rendered.\n * @param token   - The speaking token\n * @param html    - The HTML for the chat bubble\n * @param message - The spoken message text\n * @param options - additional options\n * @remarks This is called when creating a {@link ChatBubble}, but before displaying it.\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the chat bubble being shown.\n * @see {@link ChatBubbles#say}\n */\nchatBubble:(token:Token,html:JQuery,message:string,options:{/** Whether to style the speech bubble as an emote */\nemote:boolean;})=>boolean|void;/**\n * A hook event that fires when a user sends a message through the ChatLog.\n * @param chatLog  - The ChatLog instance\n * @param message  - The trimmed message content\n * @param chatData - The basic chat data\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the chat message from being created.\n * @see {@link ChatLog#processMessage}\n */\nchatMessage:(chatLog:ChatLog,message:string,chatData:{/** The User sending the message */\nuser:string;/** The identified speaker data, see {@link ChatMessage.getSpeaker} */\nspeaker:ReturnType<ConfiguredDocumentClass<typeof ChatMessage>['getSpeaker']>;})=>boolean|void;/**\n * A hook event that fires when the SceneNavigation menu is expanded or collapsed.\n * @param nav       - The SceneNavigation application\n * @param collapsed - Whether the navigation is now collapsed or not\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link SceneNavigation#expand}\n * @see {@link SceneNavigation#collapse}\n */\ncollapseSceneNavigation:(nav:SceneNavigation,collapsed:boolean)=>unknown;/**\n * A hook event that fires when the Sidebar is collapsed or expanded.\n * @param sidebar   - The Sidebar application\n * @param collapsed - Whether the Sidebar is now collapsed or not\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Sidebar#expand}\n * @see {@link Sidebar#collapse}\n */\ncollapseSidebar:(sidebar:Sidebar,collapsed:boolean)=>unknown;/**\n * A hook event that fires when some useful data is dropped onto an ActorSheet.\n * @param actor - The Actor\n * @param sheet - The ActorSheet application\n * @param data  - The data that has been dropped onto the sheet\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the Document being created.\n * @see {@link ActorSheet#_onDrop}\n */\ndropActorSheetData:(actor:InstanceType<ConfiguredDocumentClass<typeof Actor>>,sheet:ActorSheet,data:ActorSheet.DropData)=>boolean|void;/**\n * A hook event that fires when some useful data is dropped onto the Canvas.\n * @param canvas - The Canvas\n * @param data   - The data that has been dropped onto the Canvas\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the Document being created.\n * @see {@link Canvas#_onDrop}\n */\ndropCanvasData:(canvas:Canvas,data:TokenLayer.DropData|NotesLayer.DropData|MapLayer.DropData)=>boolean|void;/**\n * A hook event that fires when some useful data is dropped onto a RollTableConfig.\n * @param table  - The RollTable\n * @param config - The RollTableConfig application\n * @param data   - The data dropped onto the RollTableConfig\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the Document being created.\n * @see {@link RollTableConfig#_onDrop}\n */\ndropRollTableSheetData:(table:InstanceType<ConfiguredDocumentClass<typeof RollTable>>,config:RollTableConfig,data:object)=>boolean|void;/**\n * A hook event that fires when the Scene controls are initialized.\n * @param controls - The SceneControl configurations\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link SceneControls#_getControlButtons}\n */\ngetSceneControlButtons:(controls:SceneControl[])=>unknown;/**\n * A hook event that fires when the context menu for a SceneNavigation entry is constructed.\n * @param html         - The HTML element to which the context options are attached\n * @param entryOptions - The context menu entries\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link SceneNavigation#activateListeners}\n */\ngetSceneNavigationContext:(html:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires when the context menu for a PlayersList entry is constructed.\n * @param html         - The HTML element to which the context options are attached\n * @param entryOptions - The context menu entries\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link PlayerList#activateListeners}\n */\ngetUserContextOptions:(html:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires whenever data is dropped into a Hotbar slot.\n * The hook provides a reference to the Hotbar application, the dropped data, and the target slot.\n * Default handling of the drop event can be prevented by returning false within the hooked function.\n * @param hotbar - The Hotbar application instance\n * @param data   - The dropped data object\n * @param slot   - The target hotbar slot\n * @remarks This is called by {@link Hooks.call}.\n * @remarks An explicit return value of `false` prevents the Document being created.\n * @see {@link Hotbar#_onDrop}\n */\nhotbarDrop:(hotbar:Hotbar,data:DropData<InstanceType<ConfiguredDocumentClass<typeof Macro>>>,slot:number)=>boolean|void;/**\n * A hook event that fires as Foundry is initializing, right before any initialization tasks have begun.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Game#initialize}\n */\ninit:()=>unknown;/**\n * A hook event that fires after PointSource shaders have initialized.\n * @param source        - The PointSource\n * @param animationType - The animation type\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link PointSource#_initializeShaders}\n */\ninitializePointSourceShaders:(source:PointSource,animationType:string|null)=>unknown;/**\n * A hook event that fires when the LightingLayer is refreshed.\n * @param layer - the LightingLayer\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link LightingLayer#refresh}\n */\nlightingRefresh:(layer:LightingLayer)=>unknown;/**\n * A hook event that fires when a token's resource bar attribute has been modified.\n * @param data    - A object describing the modification\n * @param updates - The update delta that will be applied to the Token's actor\n * @returns whether the Actor should be updated\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link Actor#modifyTokenAttribute}\n * @see {@link Actor#update}\n */\nmodifyTokenAttribute:(data:{/** The attribute path */\nattribute:string;/** The target attribute value */\nvalue:number;/** Whether the number represents a relative change (true) or an absolute change (false) */\nisDelta:boolean;/** Whether the new value is part of an attribute bar, or just a direct value */\nisBar:boolean;},updates:Record<string,number>)=>boolean;/**\n * A hook event that fires when the game is paused or un-paused.\n * @param paused - Is the game now paused (true) or un-paused (false)\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Game#togglePause}\n */\npauseGame:(paused:boolean)=>unknown;/**\n * A hook event that fires when the game is fully ready.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Game#setupGame}\n */\nready:()=>unknown;/**\n * A hook event that fires for each ChatMessage which is rendered for addition to the ChatLog.\n * This hook allows for final customization of the message HTML before it is added to the log.\n * @param message - The ChatMessage document being rendered\n * @param html    - The pending HTML as a jQuery object\n * @param data    - The input data provided for template rendering\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link ChatMessage#render}\n */\nrenderChatMessage:(message:ChatMessage,html:JQuery,data:{message:ToObjectFalseType<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>>;user:Game['user'];author:InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>['user'];alias:InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>['alias'];cssClass:string;isWhisper:boolean;whisperTo:string;borderColor?:string;})=>boolean|void;/**\n * A hook event that fires when the AV settings are changed.\n * @param settings - The AVSettings manager\n * @param changed  - The delta of the settings that have been changed\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link AVSettings#_onSettingsChanged}\n */\nrtcSettingsChanged:(settings:AVSettings,changed:DeepPartial<AVSettings.Settings>)=>unknown;/**\n * A hook event that fires when Foundry has finished initializing but\n * before the game state has been set up. Fires before any Documents, UI\n * applications, or the Canvas have been initialized.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link Game#setupGame}\n */\nsetup:()=>unknown;/**\n * A hook event that fires when the SightLayer has been refreshed.\n * @param layer - The SightLayer\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link SightLayer#restrictVisibility}\n */\nsightRefresh:(layer:SightLayer)=>unknown;/**\n * A hook event that fires when a token is targeted or un-targeted.\n * @param user     - The User doing the targeting\n * @param token    - The targeted Token\n * @param targeted - Whether the Token has been targeted or untargeted\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link UserTargets#_hook}\n */\ntargetToken:(user:InstanceType<ConfiguredDocumentClass<typeof User>>,token:ConfiguredObjectClassForName<'Token'>,targeted:boolean)=>unknown;/**\n * A hook event that fires whenever the contents of a Compendium pack were modified.\n * This hook fires for all connected clients after the update has been processed.\n *\n * @param pack      - The Compendium pack being modified\n * @param documents - The locally-cached Documents which were modified in the operation\n * @param options   - Additional options which modified the modification request\n * @param userId    - The ID of the User who triggered the modification workflow\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link CompendiumCollection#_onModifyContents}\n */\nupdateCompendium:(pack:CompendiumCollection<any>,documents:foundry.abstract.Document<any,any>[],options:DocumentModificationOptions,userId:string)=>unknown;/**\n * A hook event that fires when the World time has been updated.\n * @param worldTime - The new canonical World time\n * @param delta     - The time delta\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link GameTime#onUpdateWorldTime}\n */\nupdateWorldTime:(worldTime:number,delta:number)=>unknown;}/**\n * A hook event that fires whenever this Application is closed.\n * @param app   - The Application instance being closed\n * @param html  - The application HTML when it is closed\n * @typeParam A - the type of the Application\n * @remarks The name for this hook is dynamically created by joining 'close' with the type name of the Application.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link Application#close}\n */type CloseApplication<A extends Application=Application>=(app:A,html:JQuery)=>boolean|void;/**\n * A hook event that fires when any PlaceableObject is selected or\n * deselected. Substitute the PlaceableObject name in the hook event to\n * target a specific PlaceableObject type, for example \"controlToken\".\n * @param object     - The PlaceableObject\n * @param controlled - Whether the PlaceableObject is selected or not\n * @typeParam P      - the type of the PlaceableObject\n * @remarks The name for this hook is dynamically created by joining 'control' and the type name of the\n * PlaceableObject.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link PlaceableObject#control}\n * @see {@link PlaceableObject#release}\n */type ControlPlaceableObject<P extends PlaceableObject=PlaceableObject>=(object:P,controlled:boolean)=>unknown;/**\n * A hook event that fires for every embedded Document type after conclusion of a creation workflow.\n * Substitute the Document name in the hook event to target a specific type, for example \"createToken\".\n * This hook fires for all connected clients after the creation has been processed.\n *\n * @param document - The new Document instance which has been created\n * @param options  - Additional options which modified the creation request\n * @param userId   - The ID of the User who triggered the creation workflow\n * @typeParam D    - the type of the Document constructor\n * @remarks The name for this hook is dynamically created by joining 'create' and the type name of the Document.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link ClientDatabaseBackend#_postCreateDocumentCallbacks}\n * @see {@link TokenDocument#_onUpdateTokenActor}\n */type CreateDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,options:DocumentModificationOptions,userId:string)=>unknown;/**\n * A hook event that fires for every Document type after conclusion of an deletion workflow.\n * Substitute the Document name in the hook event to target a specific Document type, for example \"deleteActor\".\n * This hook fires for all connected clients after the deletion has been processed.\n *\n * @param document - The existing Document which was deleted\n * @param options  - Additional options which modified the deletion request\n * @param userId   - The ID of the User who triggered the deletion workflow\n * @typeParam D    - the type of the Document constructor\n * @remarks The name for this hook is dynamically created by joining 'delete' with the type name of the Document.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link ClientDatabaseBackend#_postDeleteDocumentCallbacks}\n * @see {@link TokenDocument#_onUpdateTokenActor}\n */type DeleteDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,options:DocumentModificationOptions,userId:string)=>unknown;/**\n * A hook event that fires whenever this Application is first rendered to add buttons to its header.\n * @param app     - The Application instance being rendered\n * @param buttons - The array of header buttons which will be displayed\n * @typeParam A   - the type of the Application\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the Application and\n * 'HeaderButtons'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link Application#_getHeaderButtons}\n */type GetApplicationHeaderButtons<A extends Application=Application>=(app:A,buttons:Application.HeaderButton[])=>boolean|void;/**\n * @remarks This is called after getting the {@link ContextMenu} options for a {@link ChatLog}, but before creating\n * the ContextMenu.\n * @param jq           - the JQuery of the ContextMenu parent element\n * @param entryOptions - the already created ContextMenuOptions\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the ChatLog and\n * 'EntryContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link ChatLog#_contextMenu}\n */type GetChatLogEntryContext=(jq:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * @remarks This is called after getting the {@link ContextMenu} options for a {@link CombatTracker} entry, but before\n * creating the ContextMenu.\n * @param jq           - the JQuery of the ContextMenu parent element\n * @param entryOptions - the already created ContextMenuOptions\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the CombatTracker and\n * 'EntryContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link CombatTracker#_contextMenu}\n */type GetCombatTrackerEntryContext=(jq:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * @remarks This is called after getting the {@link ContextMenu} options for a {@link CompendiumDirectory} entry, but\n * before creating the ContextMenu.\n * @param jq           - the JQuery of the ContextMenu parent element\n * @param entryOptions - the already created ContextMenuOptions\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the\n * CompendiumDirectory and 'EntryContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link CompendiumDirectory#_contextMenu}\n */type GetCompendiumDirectoryEntryContext=(jq:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires when the context menu for a Sound in the PlaylistDirectory is constructed.\n * @param html         - The HTML element to which the context options are attached\n * @param entryOptions - The context menu entries\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the PlaylistDirectory\n * and 'SoundContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link PlaylistDirectory#_contextMenu}\n */type GetPlaylistDirectorySoundContext=(html:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires when the context menu for entries in a SidebarTab\n * is constructed. Substitute the SidebarTab name in the hook event to target\n * a specific SidebarTab, for example \"getActorDirectoryEntryContext\".\n * @param html         - The HTML element to which the context options are attached\n * @param entryOptions - The context menu entries\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the SidebarDirectory\n * and 'EntryContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link SidebarDirectory#_contextMenu}\n */type GetSidebarDirectoryEntryContext=(html:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires when the context menu for folders in a SidebarTab\n * is constructed. Substitute the SidebarTab name in the hook event to target\n * a specific SidebarTab, for example \"getActorDirectoryFolderContext\".\n * @param html         - The HTML element to which the context options are attached\n * @param entryOptions - The context menu entries\n * @remarks The name for this hook is dynamically created by joining 'get' with the type name of the SidebarDirectory\n * and 'FolderContext'.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link SidebarDirectory#_contextMenu}\n */type GetSidebarDirectoryFolderContext=(html:JQuery,entryOptions:ContextMenuEntry[])=>boolean|void;/**\n * A hook event that fires when the user modifies a global volume slider.\n * The hook name needs to be customized to include the type of global volume being changed, one of:\n * `globalPlaylistVolumeChanged`, `globalAmbientVolumeChanged`, or `globalInterfaceVolumeChanged`.\n * @param volume - The new volume level\n * @remarks The name for this hook is dynamically created by joining the name of the volume with 'Changed'.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link AudioHelper#_onChangeGlobalVolume}\n */type GlobalVolumeChanged=(volume:number)=>unknown;/**\n * A hook event that fires when any PlaceableObject is hovered over or out.\n * Substitute the PlaceableObject name in the hook event to target a specific\n * PlaceableObject type, for example \"hoverToken\".\n * @param object - The PlaceableObject\n * @param hover  - Whether the PlaceableObject is hovered over or not\n * @typeParam P  - the type of the PlaceableObject\n * @remarks The name for this hook is dynamically created by joining 'hover' and the type name of the PlaceableObject.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link PlaceableObject#_onHoverIn}\n * @see {@link PlaceableObject#_onHoverOut}\n */type HoverPlaceableObject<P extends PlaceableObject=PlaceableObject>=(object:P,hover:boolean)=>unknown;/**\n * A hook event that fires when any PlaceableObject is pasted onto the\n * Scene. Substitute the PlaceableObject name in the hook event to target a\n * specific PlaceableObject type, for example \"pasteToken\".\n * @param copied     - The PlaceableObjects that were copied\n * @param createData - The new objects that will be added to the Scene\n * @typeParam P      - the type of the PlaceableObject\n * @remarks The name for this hook is dynamically created by joining 'paste' with the type name of the\n * PlaceableObject.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link PlaceablesLayer#pasteObjects}\n */type PastePlaceableObject<P extends PlaceableObject=PlaceableObject>=(copied:P[],createData:Array<P['document']['data']['_source']>)=>boolean|void;/**\n * A hook event that fires for every Document type before execution of a creation workflow. Substitute the\n * Document name in the hook event to target a specific Document type, for example \"preCreateActor\". This hook\n * only fires for the client who is initiating the creation request.\n *\n * The hook provides the pending document instance which will be used for the Document creation. Hooked functions\n * may modify that data or prevent the workflow entirely by explicitly returning false.\n *\n * @param document - The pending document which is requested for creation\n * @param data     - The initial data object provided to the document creation request\n * @param options  - Additional options which modify the creation request\n * @param userId   - The ID of the requesting user, always game.user.id\n * @typeParam D    - the type of the Document constructor\n * @returns Explicitly return false to prevent creation of this Document\n * @remarks The name for this hook is dynamically created by joining 'preCreate' with the name of the Document.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link ClientDatabaseBackend#_preCreateDocumentArray}\n * @see {@link TokenDocument#_preUpdateTokenActor}\n */type PreCreateDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,data:ConstructorParameters<D>[0],options:DocumentModificationOptions,userId:string)=>boolean|void;/**\n * A hook event that fires for every Document type before execution of a deletion workflow. Substitute the\n * Document name in the hook event to target a specific Document type, for example \"preDeleteActor\". This hook\n * only fires for the client who is initiating the update request.\n *\n * The hook provides the Document instance which is requested for deletion. Hooked functions may prevent the\n * workflow entirely by explicitly returning false.\n *\n * @param document - The Document instance being deleted\n * @param options  - Additional options which modify the deletion request\n * @param userId   - The ID of the requesting user, always game.user.id\n * @typeParam D    - the type of the Document constructor\n * @returns Explicitly return false to prevent deletion of this Document\n * @remarks The name for this hook is dynamically created by joining 'preDelete' with the type name of the Document.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link ClientDatabaseBackend#_preDeleteDocumentArray}.\n * @see {@link TokenDocument#_preUpdateTokenActor}\n */type PreDeleteDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,options:DocumentModificationOptions,userId:string)=>boolean|void;/**\n * A hook event that fires for every Document type before execution of an update workflow. Substitute the Document\n * name in the hook event to target a specific Document type, for example \"preUpdateActor\". This hook only fires\n * for the client who is initiating the update request.\n *\n * The hook provides the differential data which will be used to update the Document. Hooked functions may modify\n * that data or prevent the workflow entirely by explicitly returning false.\n *\n * @param document - The Document instance being updated\n * @param change   - Differential data that will be used to update the document\n * @param options  - Additional options which modify the update request\n * @param userId   - The ID of the requesting user, always game.user.id\n * @typeParam D    - the type of the Document constructor\n * @returns Explicitly return false to prevent update of this Document\n * @remarks The name for this hook is dynamically created by joining 'preUpdate' with the type name of the Document.\n * @remarks This is called {@link Hooks.call}.\n * @see {@link ClientDatabaseBackend#_preUpdateDocumentArray}\n * @see {@link TokenDocument#_preUpdateTokenActor}\n */type PreUpdateDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,change:DeepPartial<ConstructorParameters<D>[0]>,options:DocumentModificationOptions,userId:string)=>boolean|void;/**\n * A hook event that fires whenever this Application is rendered.\n * The hook provides the pending application HTML which will be added to the DOM.\n * Hooked functions may modify that HTML or attach interactive listeners to it.\n *\n * @param app   - The Application instance being rendered\n * @param html  - The inner HTML of the document that will be displayed and may be modified\n * @param data  - The object of data used when rendering the application\n * @typeParam A - the type of the Application\n * @remarks The name for this hook is dynamically created by joining 'render' with the type name of the Application.\n * @remarks This is called by {@link Hooks.call}.\n * @see {@link Application#_render}\n */type RenderApplication<A extends Application=Application>=(app:A,html:JQuery,data:ReturnType<A['getData']>extends Promise<infer T>?T:ReturnType<A['getData']>)=>boolean|void;/**\n * A hook event that fires for every Document type after conclusion of an update workflow.\n * Substitute the Document name in the hook event to target a specific Document type, for example \"updateActor\".\n * This hook fires for all connected clients after the update has been processed.\n *\n * @param document - The existing Document which was updated\n * @param change   - Differential data that was used used to update the document\n * @param options  - Additional options which modified the update request\n * @param userId   - The ID of the User who triggered the update workflow\n * @typeParam D    - the type of the Document constructor\n * @remarks The name for this hook is dynamically created by joining 'update' with the type name of the Document.\n * @remarks This is called by {@link Hooks.callAll}.\n * @see {@link ClientDatabaseBackend#_postUpdateDocumentCallbacks}\n * @see {@link TokenDocument#_onUpdateTokenActor}\n */type UpdateDocument<D extends DocumentConstructor=DocumentConstructor>=(document:InstanceType<ConfiguredDocumentClass<D>>,change:DeepPartial<ConstructorParameters<D>[0]>,options:DocumentModificationOptions,userId:string)=>unknown;type DynamicCallbacks=|CloseApplication|ControlPlaceableObject|CreateDocument|DeleteDocument|GetApplicationHeaderButtons|GetChatLogEntryContext|GetCombatTrackerEntryContext|GetCompendiumDirectoryEntryContext|GetPlaylistDirectorySoundContext|GetSidebarDirectoryEntryContext|GetSidebarDirectoryFolderContext|HoverPlaceableObject|PastePlaceableObject|PreCreateDocument|PreDeleteDocument|PreUpdateDocument|RenderApplication|UpdateDocument;}}"
    ]
  