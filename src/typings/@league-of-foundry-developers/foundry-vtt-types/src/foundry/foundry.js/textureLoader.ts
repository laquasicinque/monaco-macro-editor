
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\textureLoader.d.ts",
      "import type{ConfiguredDocumentClassForName}from'../../types/helperTypes';declare global{/**\n * A Loader class which helps with loading video and image textures\n */class TextureLoader{/**\n * The cached mapping of textures\n */\ncache:Map<string,{tex:PIXI.Texture;time:number}>;/**\n * The duration in milliseconds for which a texture will remain cached\n * @defaultValue `1000`\n */static CACHE_TTL:number;/**\n * Load all the textures which are required for a particular Scene\n * @param scene   - The Scene to load\n * @param options - Additional options that configure texture loading\n *                  (default: `{}`)\n */static loadSceneTextures(scene:InstanceType<ConfiguredDocumentClassForName<'Scene'>>,options?:Partial<TextureLoader.LoadSceneTextureOptions>):Promise<void[]>;/**\n * Load an Array of provided source URL paths\n * @param sources - The source URLs to load\n * @param options - Additional options which modify loading\n * @returns A Promise which resolves once all textures are loaded\n */\nload(sources:string[],options?:Partial<TextureLoader.LoadOptions>):Promise<void[]>;/**\n * Load a single texture on-demand from a given source URL path\n * @param src - The source texture path to load\n * @returns The loaded texture object\n */\nloadTexture(src:string):Promise<PIXI.Texture>;/**\n * Log texture loading progress in the console and in the Scene loading bar\n * @internal\n */protected _onProgress(src:string,progress:TextureLoader.Progress):void;/**\n * Log failed texture loading\n * @internal\n */protected _onError(src:string,progress:TextureLoader.Progress,error:Error):void;/**\n * Load an image texture from a provided source url\n */\nloadImageTexture(src:string):Promise<PIXI.Texture>;/**\n * If an attempted image load failed, we may attempt a re-load in case the issue was CORS + caching\n * Cross-origin requests which failed might be CORS, or might be 404, no way to know - so try a 2nd time\n * @param src     - The source URL being attempted\n * @param resolve - Resolve the promise\n * @param reject  - Reject the promise\n * @internal\n */protected _attemptCORSReload<T>(src:string,resolve:(tex:PIXI.Texture)=>void,reject:(reason:string)=>T):Promise<PIXI.Texture|T>;/**\n * Load a video texture from a provided source url\n * @param src -\n */\nloadVideoTexture(src:string):Promise<PIXI.Texture>;/**\n * Add an image url to the texture cache\n * @param src - The source URL\n * @param tex - The readied texture\n */\nsetCache(src:string,tex:PIXI.Texture):void;/**\n * Retrieve a texture from the texture cache\n * @param src - The source URL\n */\ngetCache(src:string):PIXI.Texture|undefined;/**\n * Expire (and destroy) textures from the cache which have not been used for more than CACHE_TTL milliseconds.\n */\nexpireCache():void;/**\n * A global reference to the singleton texture loader\n */static loader:TextureLoader;}namespace TextureLoader{interface LoadSceneTextureOptions{/**\n * Destroy other expired textures\n * @defaultValue `true`\n */\nexpireCache:boolean;}interface LoadOptions{/**\n * The status message to display in the load bar\n */\nmessage?:string|undefined;/**\n * Expire other cached textures?\n * @defaultValue `true`\n */\nexpireCache:boolean;}interface Progress{message:string;loaded:number;failed:number;total:number;pct:number;}}}"
    ]
  