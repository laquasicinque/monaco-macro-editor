
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\canvasAnimation.d.ts",
      "/**\n * A helper class providing utility methods for PIXI Canvas animation\n */declare class CanvasAnimation{static get ticker():PIXI.Ticker;/**\n * Track an object of active animations by name, context, and function\n * This allows a currently playing animation to be referenced and terminated\n */static animations:Partial<\nRecord<string,{fn:(dt:number)=>void;context:PIXI.Container;resolve:(value:boolean)=>void}>>;/**\n * Apply a linear animation from the current value of some attribute to a new value\n * Resolve a Promise once the animation has concluded and the attributes have reached their new target\n * @param attributes - An array of attributes to animate. Structure of the Array is shown in the example\n * @param options    - Additional options which customize the animation\n *                     (default: `{}`)\n * @returns A Promise which resolves once the linear animation has concluded\n *\n * @example\n * ```typescript\n * let animation = [\n *   {\n *     parent: token,\n *     attribute: x,\n *     to: 1000\n *   },\n *   {\n *     parent: token,\n *     attribute: y,\n *     to: 2000\n *   }\n * ];\n * CanvasAnimation.animateLinear(attributes, {duration:500, ontick: console.log(\"ticking\")});\n * ```\n */static animateLinear(attributes:CanvasAnimation.Attribute[],options?:Partial<LinearAnimationOptions>):Promise<boolean>;/**\n * If an animation using a certain name already exists, terminate it\n * @param name - The animation name to terminate\n */static terminateAnimation(name:string):void;/**\n * Asynchronously animate a transition function and resolve a Promise once the animation has completed\n * @param fn         - A suitable transition function. See PIXI.Ticker for details\n * @param context    - The Canvas container providing scope for the transition\n * @param name       -  Provide a unique animation name which may be referenced later\n * @param attributes - The attributes being animated by the function\n * @param duration   - The duration in milliseconds over which the animation should occur\n * @param ontick     - A function which defines additional behaviors to apply every animation frame\n * @returns A Promise which resolves once the animation has completed\n */protected static _animatePromise(fn:TransitionFunction,context:PIXI.Container,name:string,attributes:CanvasAnimation.Attribute[],duration:number,ontick:TickFunction|undefined):Promise<boolean>;/**\n * Generic ticker function to implement the animation.\n * This animation wrapper executes once per frame for the duration of the animation event.\n * Once the animated attributes have converged to their targets, it resolves the original Promise.\n * The user-provided ontick function runs each frame update to apply additional behaviors.\n */protected static _animateFrame(deltaTime:number,resolve:(value:boolean)=>void,reject:(reason?:any)=>void,attributes:CanvasAnimation.Attribute[],duration:number,ontick:TickFunction|undefined):void;}declare namespace CanvasAnimation{interface Attribute{parent:any;attribute:string;to:number;}}interface LinearAnimationOptions{/**\n * An animation context to use which defines scope\n */\ncontext:PIXI.Container;/**\n * Provide a unique animation name which may be referenced later\n */\nname:string;/**\n * The duration in milliseconds over which the animation should occur\n * @defaultValue `1000`\n */\nduration:number;/**\n * A function which defines additional behaviors to apply every animation frame\n */\nontick:TickFunction;}type TickFunction=(dt:number,attributes:CanvasAnimation.Attribute[])=>void;type TransitionFunction=(dt:number,resolve:(value:boolean)=>void,reject:(reason?:any)=>void,attributes:CanvasAnimation.Attribute[],duration:number,ontick?:TickFunction)=>void;"
    ]
  