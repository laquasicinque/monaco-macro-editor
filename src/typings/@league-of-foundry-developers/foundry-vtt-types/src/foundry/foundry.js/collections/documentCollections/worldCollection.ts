
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollection.d.ts",
      "import{ConfiguredDocumentClass,DocumentConstructor}from'../../../../types/helperTypes';declare global{/**\n * A collection of world-level Document objects with a singleton instance per primary Document type.\n * Each primary Document type has an associated subclass of WorldCollection which contains them.\n * @see {@link Game#collections}\n */abstract class WorldCollection<T extends DocumentConstructor,Name extends string>extends DocumentCollection<\nT,Name>{/**\n *\n * @param data - An array of data objects from which to create Document instances\n *               (default: `[]`)\n */constructor(data?:StoredDocument<InstanceType<ConfiguredDocumentClass<T>>>['data']['_source'][]);readonly _source:StoredDocument<InstanceType<ConfiguredDocumentClass<T>>>['data']['_source'][];/**\n * Initialize the WorldCollection object by constructing its contained Document instances\n */protected _initialize():void;/**\n * @remarks In the abstract {@link WorldCollection}, this actually returns `null` but all deriving classes implement it properly.\n */get documentName():ConfiguredDocumentClass<T>['metadata']['name'];/**\n * The base Document type which is contained within this WorldCollection\n * @defaultValue `null`\n * @remarks\n * All deriving classes must set this to the string matching the name of the document type they contain because it\n * is used as value for {@link WorldCollection#documentName}.\n */static documentName:string|null;/**\n * Return a reference to the SidebarDirectory application for this WorldCollection, or null if it has not yet been created.\n * @remarks\n * In the case where `Lowercase<Name>` is not a property of {@link ui}, this actually always returns `null` but\n * {@link RollTables} overrides this so we need to allow a wider return type.\n */get directory():Lowercase<Name>extends keyof typeof ui?typeof ui[Lowercase<Name>]:null|SidebarDirectory<ConfiguredDocumentClass<T>['metadata']['name']>|undefined;/**\n * Return a reference to the singleton instance of this WorldCollection, or null if it has not yet been created.\n */static get instance():WorldCollection<DocumentConstructor,any>;/** @override */set(id:string,document:StoredDocument<InstanceType<ConfiguredDocumentClass<T>>>):this;delete:(id:string)=>boolean;/**\n * Import a Document from a Compendium collection, adding it to the current World.\n * @param pack       - The CompendiumCollection instance from which to import\n * @param id         - The ID of the compendium entry to import\n * @param updateData - Optional additional data used to modify the imported Document before it is created\n * @param options    - Optional arguments passed to the Document.create method\n * @returns The imported Document instance\n */\nimportFromCompendium(pack:any,id:string,updateData?:DeepPartial<InstanceType<ConfiguredDocumentClass<T>>['data']['_source']>,options?:DocumentModificationContext):Promise<StoredDocument<InstanceType<ConfiguredDocumentClass<T>>>>;/**\n * Apply data transformations when importing a Document from a Compendium pack\n * @param document - The source Document, or a plain data object\n * @returns The processed data ready for world Document creation\n */\nfromCompendium(document:InstanceType<ConfiguredDocumentClass<T>>|InstanceType<ConfiguredDocumentClass<T>>['data']['_source']):Omit<InstanceType<ConfiguredDocumentClass<T>>['data']['_source'],'_id'|'folder'>;/**\n * Prepare a document from an outside source for import into this collection.\n * @param data - The data to be prepared.\n * @returns The prepared data.\n */\nprepareForImport(data:InstanceType<ConfiguredDocumentClass<T>>['data']['_source']):Omit<InstanceType<ConfiguredDocumentClass<T>>['data']['_source'],'_id'|'folder'>;/**\n * The WorldCollection#insert method is deprecated in favor of the WorldCollection#set method and will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\ninsert(document:InstanceType<ConfiguredDocumentClass<T>>):this;/**\n * The WorldCollection#remove method is deprecated in favor of the WorldCollection#delete method and will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\nremove(id:string):boolean;/**\n * The WorldCollection#entities property is deprecated in favor of the Collection#contents attribute and will be removed in 0.9.0\n * @deprecated since 0.8.0\n */get entities():this['contents'];/**\n * The WorldCollection#object property has been deprecated in favor of WorldCollection#documentClass. Support will be removed in 0.9.0\n * @deprecated since 0.8.0\n */get object():this['documentClass'];/**\n * The WorldCollection#importFromCollection method has been deprecated in favor of WorldCollection#importFromCompendium. Support for the old method name will be removed in 0.9.0\n * @deprecated since 0.8.0\n */\nimportFromCollection(packName:string,...args:Parameters<this['importFromCompendium']>extends[any,...infer U]?U:never):ReturnType<this['importFromCompendium']>;}}"
    ]
  