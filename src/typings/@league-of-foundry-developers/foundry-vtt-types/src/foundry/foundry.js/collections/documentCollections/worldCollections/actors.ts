
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\worldCollections\\actors.d.ts",
      "import{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{/**\n * The singleton collection of Actor documents which exist within the active World.\n * This Collection is accessible within the Game object as game.actors.\n *\n * @see {@link Actor} The Actor entity\n * @see {@link ActorDirectory} The ActorDirectory sidebar directory\n *\n * @example <caption>Retrieve an existing Actor by its id</caption>\n * ```typescript\n * let actor = game.actors.get(actorId);\n * ```\n */class Actors extends WorldCollection<typeof foundry.documents.BaseActor,'Actors'>{/**\n * A mapping of synthetic Token Actors which are currently active within the viewed Scene.\n * Each Actor is referenced by the Token.id.\n */get tokens():Partial<Record<string,InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>>>;/** @override */static documentName:'Actor';/** @override */\nfromCompendium(document:|InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>|InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source']):Omit<\nInstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>['data']['_source'],'_id'|'folder'>;/**\n * Register an Actor sheet class as a candidate which can be used to display Actors of a given type\n * See EntitySheetConfig.registerSheet for details\n *\n * @example <caption>Register a new ActorSheet subclass for use with certain Actor types.</caption>\n * ```typescript\n * Actors.registerSheet(\"dnd5e\", ActorSheet5eCharacter, { types: [\"character\"], makeDefault: true });\n * ```\n */static registerSheet(scope:string,sheetClass:ConstructorOf<ActorSheet>,{label,types,makeDefault}?:{label?:string;types?:string[];makeDefault?:boolean}):void;/**\n * Unregister an Actor sheet class, removing it from the list of avaliable sheet Applications to use\n * See EntitySheetConfig.unregisterSheet for details\n *\n * @example <caption>Deregister the default ActorSheet subclass to replace it with others.</caption>\n * ```typescript\n * Actors.unregisterSheet(\"core\", ActorSheet);\n * ```\n */static unregisterSheet(scope:string,sheetClass:ConstructorOf<ActorSheet>,{types}?:{types?:string[]}):void;/**\n * Return an Array of currently registered sheet classes for this Entity type\n */static get registeredSheets():typeof ActorSheet[];}}"
    ]
  