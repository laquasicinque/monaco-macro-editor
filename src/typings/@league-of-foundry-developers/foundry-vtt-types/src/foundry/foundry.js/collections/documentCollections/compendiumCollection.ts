
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\collections\\documentCollections\\compendiumCollection.d.ts",
      "import{ConfiguredDocumentClassForName,ConstructorDataType}from'../../../../types/helperTypes';import{IdQuery}from'../../../common/abstract/backend.mjs';import{DocumentModificationOptions}from'../../../common/abstract/document.mjs';declare global{/**\n * A collection of Document objects contained within a specific compendium pack.\n * Each Compendium pack has its own associated instance of the CompendiumCollection class which contains its contents.\n *\n * @see {@link Game#packs}\n */class CompendiumCollection<T extends CompendiumCollection.Metadata>extends DocumentCollection<\nDocumentClassForCompendiumMetadata<T>,'CompendiumCollection'>{/** @param metadata - The compendium metadata, an object provided by game.data */constructor(metadata:T);/** The compendium metadata which defines the compendium content and location */\nmetadata:T;/**  A subsidiary collection which contains the more minimal index of the pack */\nindex:IndexTypeForMetadata<T>;/** A debounced function which will clear the contents of the Compendium pack if it is not accessed frequently. */\n_flush:()=>void;/**\n * The amount of time that Document instances within this CompendiumCollection are held in memory.\n * Accessing the contents of the Compendium pack extends the duration of this lifetime.\n * @defaultValue `300`\n */static CACHE_LIFETIME_SECONDS:number;/**\n * The named game setting which contains Compendium configurations.\n */static CONFIG_SETTING:'compendiumConfiguration';/** The canonical Compendium name - comprised of the originating package and the pack name */get collection():string;/** Access the compendium configuration data for this pack */get config():CompendiumCollection.Configuration|{};get documentName():this['metadata']['entity'];/** Track whether the Compendium Collection is locked for editing */get locked():boolean;/** Track whether the Compendium Collection is private */get private():boolean;/** A convenience reference to the label which should be used as the title for the Compendium pack. */get title():string;get(key:string,{strict}:{strict:true}):StoredDocument<DocumentInstanceForCompendiumMetadata<T>>;get(key:string,{strict}?:{strict?:false}):StoredDocument<DocumentInstanceForCompendiumMetadata<T>>|undefined;set(id:string,document:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>):this;delete:(id:string)=>boolean;/** Load the Compendium index and cache it as the keys and values of the Collection. */\ngetIndex():Promise<this['index']>;/**\n * Get a single Document from this Compendium by ID.\n * The document may already be locally cached, otherwise it is retrieved from the server.\n * @param id -  The requested Document id\n * @returns The retrieved Document instance\n */\ngetDocument(id:string):Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>|undefined|null>;/**\n * Load multiple documents from the Compendium pack using a provided query object.\n * @param query - A database query used to retrieve documents from the underlying database\n *                default: `{}`\n * @returns The retrieved Document instances\n */\ngetDocuments(query?:IdQuery):Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[]>;/**\n * Import a Document into this Compendium Collection.\n * @param document - The existing Document you wish to import\n * @returns The imported Document instance\n */\nimportDocument(document:DocumentInstanceForCompendiumMetadata<T>):Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>|undefined>;/**\n * Fully import the contents of a Compendium pack into a World folder.\n * @returns The imported Documents, now existing within the World\n */\nimportAll({folderId,folderName,options}:ImportAllOptions):Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[]>;/**\n * Add a Document to the index, capturing it's relevant index attributes\n * @param document -The document to index\n */\nindexDocument(document:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>):void;/**\n * Create a new Compendium Collection using provided metadata.\n * @param metadata - The compendium metadata used to create the new pack\n * @param options - Additional options which modify the Compendium creation request\n *                  default `{}`\n */static createCompendium<T extends CompendiumCollection.Metadata>(metadata:T,options?:Partial<DocumentModificationOptions>):Promise<CompendiumCollection<T>>;/**\n * Assign configuration metadata settings to the compendium pack\n * @param settings - The object of compendium settings to define\n *                   default: `{}`\n * @returns A Promise which resolves once the setting is updated\n */\nconfigure(settings?:Partial<CompendiumCollection.Configuration>):Promise<CompendiumCollection.Configuration>;/**\n * Delete an existing world-level Compendium Collection.\n * This action may only be performed for world-level packs by a Gamemaster User.\n */\ndeleteCompendium():Promise<this>;/**\n * Duplicate a compendium pack to the current World.\n * @param label - A new Compendium label\n */\nduplicateCompendium({label}?:{label?:string}):Promise<this>;/**\n * Validate that the current user is able to modify content of this Compendium pack\n * @param requireUnlocked - `(default: true)`\n */protected _assertUserCanModify({requireUnlocked}?:{requireUnlocked?:boolean}):true;/**\n * Request that a Compendium pack be migrated to the latest System data template\n * TODO: find better type for options, used in socket dispatch\n */\nmigrate(options?:object):Promise<this>;_onCreateDocuments(documents:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],result:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>['data']['_source'][],options:DocumentModificationOptions,userId:string):void;_onUpdateDocuments(documents:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],result:DeepPartial<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>>[],options:DocumentModificationOptions,userId:string):void;_onDeleteDocuments(documents:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],result:string[],options:DocumentModificationOptions,userId:string):void;/**\n * Follow-up actions taken when Documents within this Compendium pack are modified\n */protected _onModifyContents(documents:StoredDocument<DocumentInstanceForCompendiumMetadata<T>>[],options:DocumentModificationOptions,userId:string):void;/** @deprecated since 0.8.0 */get entity():this['documentClass']['documentName'];/** @deprecated since 0.8.0 */\ngetContent():ReturnType<this['getDocuments']>;/** @deprecated since 0.8.0 */\ngetEntry(id:string):Promise<StoredDocument<DocumentInstanceForCompendiumMetadata<T>>['data']>;/** @deprecated since 0.8.0 */\ngetEntity(id:string):ReturnType<this['getDocument']>;/** @deprecated since 0.8.0 */\nimportEntity(document:DocumentInstanceForCompendiumMetadata<T>):ReturnType<this['importDocument']>;/** @deprecated since 0.8.0 */\ncreateEntity(data:|ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>|(ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>&Record<string,unknown>),options?:Partial<DocumentModificationOptions>):ReturnType<this['documentClass']['create']>;/** @deprecated since 0.8.0 */\nupdateEntity(data:DeepPartial<|ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>|(ConstructorDataType<DocumentInstanceForCompendiumMetadata<T>['data']>&Record<string,unknown>)>&{_id:string;},options?:Partial<DocumentModificationOptions>):ReturnType<DocumentInstanceForCompendiumMetadata<T>['update']>;/** @deprecated since 0.8.0 */\ndeleteEntity(id:string,options?:Partial<DocumentModificationOptions>):ReturnType<DocumentInstanceForCompendiumMetadata<T>['delete']>;}namespace CompendiumCollection{interface Configuration{private:boolean;locked:boolean;}interface Metadata{entity:'Actor'|'Item'|'JournalEntry'|'Macro'|'Playlist'|'RollTable'|'Scene';name:string;label:string;path:string;private:boolean;package:string;system?:string;}}}interface ImportAllOptions{/**\n * An existing Folder _id to use.\n * @defaultValue `null`\n * */\nfolderId?:string|null;/**\n * A new Folder name to create.\n * @defaultValue `''`\n * */\nfolderName?:string;/**\n * Additional options forwarded to Document.createDocuments\n * @defaultValue `{}`\n */\noptions?:DocumentModificationContext;}type DocumentClassForCompendiumMetadata<T extends CompendiumCollection.Metadata>=ConfiguredDocumentClassForName<\nT['entity']>;type DocumentInstanceForCompendiumMetadata<T extends CompendiumCollection.Metadata>=InstanceType<\nDocumentClassForCompendiumMetadata<T>>;type IndexTypeForMetadata<T extends CompendiumCollection.Metadata>=foundry.utils.Collection<\nPick<\nStoredDocument<DocumentInstanceForCompendiumMetadata<T>>['data'],'_id'|'name'|'img'|('type'extends keyof DocumentInstanceForCompendiumMetadata<T>['data']?'type':never)>>;"
    ]
  