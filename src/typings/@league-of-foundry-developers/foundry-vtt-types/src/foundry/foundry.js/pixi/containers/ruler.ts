
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\ruler.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredObjectClassForName}from'../../../../types/helperTypes';declare global{/**\n * The Ruler - used to measure distances and trigger movements\n */class Ruler extends PIXI.Container{/**\n * @param user  - The User for whom to construct the Ruler instance\n * @param color - (default: `null`)\n */constructor(user?:InstanceType<ConfiguredDocumentClass<typeof User>>|null,{color}?:{color?:number|null});/**\n * Record the User which this Ruler references\n * @defaultValue `game.user`\n */\nuser:InstanceType<ConfiguredDocumentClass<typeof User>>;/**\n * The ruler name - used to differentiate between players\n * @defaultValue `Ruler.${user.id}`\n */\nname:string;/**\n * The ruler color - by default the color of the active user\n * @defaultValue `foundry.utils.colorStringToHex(this.user.data.color) || 0x42F4E2`\n */\ncolor:number;/**\n * This Array tracks individual waypoints along the ruler's measured path.\n * The first waypoint is always the origin of the route.\n * @defaultValue `[]`\n */\nwaypoints:PIXI.Point[];/**\n * The current destination point at the end of the measurement\n * @defaultValue `null`\n */\ndestination:PIXI.Point|null;/**\n * The Ruler element is a Graphics instance which draws the line and points of the measured path\n */\nruler:PIXI.Graphics;/**\n * The Labels element is a Container of Text elements which label the measured path\n */\nlabels:PIXI.Container;/**\n * Track the current measurement state\n * @defaultValue `Ruler.STATES.INACTIVE`\n */protected _state:ValueOf<typeof Ruler['STATES']>;/**\n * An enumeration of the possible Ruler measurement states.\n */static STATES:{INACTIVE:0;STARTING:1;MEASURING:2;MOVING:3;};/**\n * Is the Ruler being actively used to measure distance?\n */get active():boolean;/**\n * Measure the distance between two points and render the ruler UI to illustrate it\n * @param destination - The destination point to which to measure\n * @param gridSpaces  - Restrict measurement only to grid spaces\n *                      (default: `true`)\n */\nmeasure(destination:Point,{gridSpaces}?:{gridSpaces?:boolean}):{ray:Ray;label:PIXI.DisplayObject;}[];/**\n * Get the text label for a segment of the measured path\n */protected _getSegmentLabel(segmentDistance:number,totalDistance:number,isTotal:boolean):string;/**\n * Highlight the measurement required to complete the move in the minimum number of discrete spaces\n */protected _highlightMeasurement(ray:Ray):void;/**\n * Determine whether a SPACE keypress event entails a legal token movement along a measured ruler\n *\n * @returns An indicator for whether a token was successfully moved or not. If True the event should be\n *          prevented from propagating further, if False it should move on to other handlers.\n */\nmoveToken():Promise<false|undefined>;/**\n * Acquire a Token, if any, which is eligible to perform a movement based on the starting point of the Ruler\n */protected _getMovementToken():InstanceType<ConfiguredObjectClassForName<'Token'>>|null|undefined;/**\n * A helper method to return an Array of Ray objects constructed from the waypoints of the measurement\n * @param waypoints   - An Array of waypoint `{x, y}` Objects\n * @param destination - An optional destination point to append to the existing waypoints\n * @returns An Array of Ray objects which represent the segemnts of the waypoint path\n */protected _getRaysFromWaypoints(waypoints:PIXI.Point[],destination?:PIXI.Point):Ray[];/**\n * Clear display of the current Ruler\n */\nclear():void;/**\n * Handle the beginning of a new Ruler measurement workflow\n * @see Canvas._onDragLeftStart\n */protected _onDragStart(event:PIXI.InteractionEvent):void;/**\n * Handle left-click events on the Canvas during Ruler measurement.\n * @see Canvas._onClickLeft\n */protected _onClickLeft(event:PIXI.InteractionEvent):void;/**\n * Handle right-click events on the Canvas during Ruler measurement.\n * @see Canvas._onClickRight\n */protected _onClickRight(event:PIXI.InteractionEvent):boolean|void;/**\n * Continue a Ruler measurement workflow for left-mouse movements on the Canvas.\n * @see Canvas._onDragLeftMove\n */protected _onMouseMove(event:PIXI.InteractionEvent):void;/**\n * Conclude a Ruler measurement workflow by releasing the left-mouse button.\n * @see Canvas._onDragLeftDrop\n */protected _onMouseUp(event:PIXI.InteractionEvent):void;/**\n * Handle the addition of a new waypoint in the Ruler measurement path\n * @remarks point is intentionally typed as Point because it is called with event.data.origin and only uses x and y\n */protected _addWaypoint(point:Point):void;/**\n * Handle the removal of a waypoint in the Ruler measurement path\n * @param point - The current cursor position to snap to\n * @param snap  - Snap exactly to grid spaces?\n *                (default: `true`)\n */protected _removeWaypoint(point:PIXI.Point,{snap}?:{snap?:boolean}):void;/**\n * Handle the conclusion of a Ruler measurement workflow\n */protected _endMeasurement():void;toJSON():{class:'Ruler';name:string;waypoints:Ruler['waypoints'];destination:Ruler['destination'];_state:Ruler['_state'];};/**\n * Update a Ruler instance using data provided through the cursor activity socket\n * @param data - Ruler data with which to update the display\n */\nupdate(data:ReturnType<Ruler['toJSON']>):void;}}"
    ]
  