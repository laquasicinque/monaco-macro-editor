
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\lightingLayer.d.ts",
      "/**\n * The Lighting Layer which displays darkness and light within the rendered Scene.\n * Lighting Layer (Container)\n *   Illumination Container [MULTIPLY]\n *     Background (Graphics)\n *     Light (Container) [LOS Mask]\n *       Source 1, ..., Source N (Container)\n *     Darkness (Container)\n *       Source 1, ..., Source N (Container)\n *   Coloration Container [ADD_NPM]\n *\n * @example <caption>The lightingRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"lightingRefresh\", layer => {});\n * ```\n */declare class LightingLayer extends PlaceablesLayer<'AmbientLight',LightingLayer.LayerOptions>{constructor();/**\n * A mapping of light sources which are active within the rendered Scene\n */\nsources:foundry.utils.Collection<PointSource>;/**\n * Increment this whenever lighting channels are re-configured.\n * This informs lighting and vision sources whether they need to re-render.\n * @defaultValue `0`\n */\nversion:number;/**\n * The currently displayed darkness level, which may override the saved Scene value\n * @defaultValue `0`\n */protected darknessLevel:number;/**\n * The current client setting for whether global illumination is used or not\n * @defaultValue `false`\n */\nglobalLight:boolean;/**\n * The coloration container which visualizes the effect of light sources\n * @defaultValue `null`\n */\ncoloration:PIXI.Container|null;/**\n * The illumination container which visualizes darkness and light\n * @defaultValue `null`\n */\nillumination:PIXI.Container|null;/**\n * A flag for whether the darkness level is currently animating\n * @defaultValue `false`\n */protected _animating:boolean;/**\n * An array of light sources which are currently animated\n */protected _animatedSources:PointSource[];/**\n * A mapping of different light level channels\n * @defaultValue `undefined`\n */\nchannels:Record<'background'|'black'|'bright'|'canvas'|'dark'|'dim',LightChannel>|undefined;/** @override */static documentName:'AmbientLight';/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['lighting'];/**\n * @override\n * @defaultValue\n * ```\n * foundry.utils.mergeObject(super.layerOptions, {\n *  name: \"lighting\",\n *  rotatableObjects: true,\n *  quadtree: true,\n *  zIndex: 300\n * })\n * ```\n */static get layerOptions():LightingLayer.LayerOptions;/**\n * Configure the lighting channels which are inputs to the ShadowMap\n */protected _configureChannels(darkness?:number|null):Record<'background'|'black'|'bright'|'canvas'|'dark'|'dim',LightChannel>;/**\n * @override\n */\ndraw():Promise<this>;/**\n * Draw the coloration container which is responsible for rendering the visible hue of a light source.\n * Apply an additive blend to the entire container after each individual light source is blended via screen.\n */protected _drawColorationContainer():PIXI.Container;/**\n * Draw the illumination container which is responsible for displaying darkness and light.\n */protected _drawIlluminationContainer():PIXI.Container;/**\n * Does this scene currently benefit from global illumination?\n */\nhasGlobalIllumination():boolean;/**\n * Initialize all AmbientLight sources which are present on this layer\n */\ninitializeSources():void;/**\n * Refresh the active display of the LightingLayer.\n * Update the scene background color, light sources, and darkness sources\n */\nrefresh(darkness?:number|undefined):void;/** @override */\ntearDown():Promise<this>;/**\n * Activate light source animation for AmbientLight objects within this layer\n */\nactivateAnimation():void;/**\n * Deactivate light source animation for AmbientLight objects within this layer\n */\ndeactivateAnimation():void;/**\n * The ticker handler which manages animation delegation\n * @param dt - Delta time\n */protected _animateSource(dt:number):void;/**\n * Animate a smooth transition of the darkness overlay to a target value.\n * Only begin animating if another animation is not already in progress.\n * @param target   - The target darkness level between 0 and 1\n *                   (default: `1.0`)\n * @param duration - The desired animation time in milliseconds. Default is 10 seconds\n *                   (default: `10000`)\n * @returns A Promise which resolves once the animation is complete\n */\nanimateDarkness(target?:number,{duration}?:{duration?:number}):Promise<void>;/**\n * Actions to take when the darkness level of the Scene is changed\n * @param darkness - The new darkness level\n * @param prior    - The prior darkness level\n */protected _onDarknessChange(darkness:number,prior:number):void;/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):Promise<AmbientLight>;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftCancel(event:PointerEvent):void;/** @override */protected _onMouseWheel(event:WheelEvent):void|ReturnType<AmbientLight['rotate']>;}declare namespace LightingLayer{interface LayerOptions extends PlaceablesLayer.LayerOptions<'AmbientLight'>{name:'lighting';rotatableObjects:true;quadtree:true;zIndex:300;}}declare interface LightChannel{hex:number;rgb:[number,number,number];}"
    ]
  