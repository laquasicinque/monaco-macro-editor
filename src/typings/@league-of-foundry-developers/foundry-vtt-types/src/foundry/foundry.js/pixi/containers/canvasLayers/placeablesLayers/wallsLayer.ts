
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\wallsLayer.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredObjectClassForName}from'../../../../../../types/helperTypes';import{PasteOptions}from'../placeablesLayer';declare global{/**\n * The Walls canvas layer which provides a container for Wall objects within the rendered Scene.\n * @see {@link WallDocument}\n * @see {@link Wall}\n */class WallsLayer extends PlaceablesLayer<'Wall',WallsLayer.LayerOptions>{constructor();/**\n * A graphics layer used to display chained Wall selection\n * @defaultValue `null`\n */\nchain:PIXI.Graphics|null;/**\n * An array of all the unique perception-blocking endpoints which are present in the layer\n * We keep this array cached for faster sight polygon computations\n * @defaultValue `[]`\n */\nendpoints:PointArray[];/**\n * Track whether we are currently within a chained placement workflow\n * @defaultValue `false`\n */protected _chain:boolean;/**\n * Track whether the layer is currently toggled to snap at exact grid precision\n * @defaultValue `false`\n */protected _forceSnap:boolean;/**\n * Track the most recently created or updated wall data for use with the clone tool\n * @defaultValue `null`\n * @remarks This is intentional `public` because it is accessed from Wall\n */\n_cloneType:ReturnType<foundry.documents.BaseWall['toJSON']>|null;/**\n * Reference the last interacted wall endpoint for the purposes of chaining\n * @defaultValue\n * ```\n * {\n *   id: null,\n *   point: null,\n * }\n * ```\n */protected last:{id:string|null;point:PointArray|null;};/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['walls'];/**\n * @override\n * @defaultValue\n * ```\n * mergeObject(super.layerOptions, {\n *  name: \"walls\"\n *  controllableObjects: true,\n *  objectClass: Wall,\n *  quadtree: true,\n *  sheetClass: WallConfig,\n *  sortActiveTop: true,\n *  zIndex: 40\n * })\n * ```\n */static get layerOptions():WallsLayer.LayerOptions;/** @override */static documentName:'Wall';/**\n * An Array of Wall instances in the current Scene which act as Doors.\n */get doors():InstanceType<ConfiguredObjectClassForName<'Wall'>>[];/**\n * Gate the precision of wall snapping to become less precise for small scale maps.\n * @remarks Returns `1 | 4 | 8 | 16`\n */get gridPrecision():number;/**\n * @override\n */\ndraw():Promise<this>;/** @override */\ndeactivate():this;/**\n * Perform initialization steps for the WallsLayer whenever the composition of walls in the Scene is changed.\n * Cache unique wall endpoints and identify interior walls using overhead roof tiles.\n */\ninitialize():void;/**\n * Identify walls which are treated as \"interior\" because they are contained fully within a roof tile.\n */\nidentifyInteriorWalls():void;/**\n * Given a point and the coordinates of a wall, determine which endpoint is closer to the point\n * @param point - The origin point of the new Wall placement\n * @param wall  - The existing Wall object being chained to\n * @returns The [x,y] coordinates of the starting endpoint\n */static getClosestEndpoint(point:Point,wall:InstanceType<ConfiguredObjectClassForName<'Wall'>>):PointArray;/**\n * Given an array of Wall instances, identify the unique endpoints across all walls.\n * @param walls   - An array of Wall instances\n * @param options - Additional options which modify the set of endpoints identified\n *                  (defaultValue: `{}`)\n * @returns An array of endpoints\n */static getUniqueEndpoints(walls:|InstanceType<ConfiguredObjectClassForName<'Wall'>>[]|Set<InstanceType<ConfiguredObjectClassForName<'Wall'>>>,options?:EndpointOptions):PointArray[];/**\n * Test whether movement along a given Ray collides with a Wall.\n * @param ray     - The attempted movement\n * @param options - Options which customize how collision is tested\n * @returns Does a collision occur?\n */\ncheckCollision(ray:Ray,options:CollisionOptions&{mode:'all'}):boolean|RayIntersection[];checkCollision(ray:Ray,options:CollisionOptions&{mode:'closest'}):boolean|RayIntersection|null;checkCollision(ray:Ray,options:CollisionOptions&{mode:'any'}):boolean;checkCollision(ray:Ray,options:Omit<CollisionOptions,'mode'>):boolean;checkCollision(ray:Ray,options:CollisionOptions):boolean|RayIntersection|null;checkCollision(ray:Ray,options?:CollisionOptions):boolean;/**\n * Highlight the endpoints of Wall segments which are currently group-controlled on the Walls layer\n */\nhighlightControlledSegments():void;/** @override */\nreleaseAll(options?:PlaceableObject.ReleaseOptions):number;/**\n * @override\n * @param options - (unused)\n */\npasteObjects(position:Point,options?:PasteOptions):Promise<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseWall>>[]>;/**\n * Pan the canvas view when the cursor position gets close to the edge of the frame\n * @param event - The originating mouse movement event\n * @param x     - The x-coordinate\n * @param y     - The y-coordinate\n */protected _panCanvasEdge(event:MouseEvent,x:number,y:number):void|ReturnType<Canvas['animatePan']>;/**\n * Get the endpoint coordinates for a wall placement, snapping to grid at a specified precision\n * Require snap-to-grid until a redesign of the wall chaining system can occur.\n * @param  point - The initial candidate point\n * @param  snap  - Whether to snap to grid\n *                 (default: `true`)\n * @returns The endpoint coordinates [x,y]\n */protected _getWallEndpointCoordinates(point:Point,{snap}?:{snap?:boolean}):PointArray;/**\n * The Scene Controls tools provide several different types of prototypical Walls to choose from\n * This method helps to translate each tool into a default wall data configuration for that type\n * @param tool - The active canvas tool\n */protected _getWallDataFromActiveTool(tool:string):|{move:foundry.CONST.WallMovementType;sense:foundry.CONST.WallSenseType;door?:foundry.CONST.WallDoorType;}|this['_cloneType'];/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):Promise<Wall>;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftDrop(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftCancel(event:PointerEvent):void;/** @override */protected _onClickRight(event:PIXI.InteractionEvent):void;/**\n * Compute source polygons of a requested type for a given origin position and maximum radius.\n * This method returns two polygons, one which is unrestricted by the provided radius, and one that is constrained\n * by the maximum radius.\n *\n * @param origin  - An point with coordinates x and y representing the origin of the test\n * @param radius  - A distance in canvas pixels which reflects the visible range\n * @param options - Additional options which modify the sight computation\n *                  (default: `{}`)\n * @returns The computed rays and polygons\n */\ncomputePolygon(origin:Point,radius:number,options?:ComputePolygonOptions):{rays:Ray[];los:PIXI.Polygon;fov:PIXI.Polygon};/**\n * Get the set of wall collisions for a given Ray\n * @param ray     - The Ray being tested\n * @param options - Options which customize how collision is tested\n *                  (default: `{}`)\n * @returns An array of collisions, if mode is \"all\"\n *          The closest collision, if mode is \"closest\"\n *          Whether any collision occurred if mode is \"any\"\n */\ngetRayCollisions(ray:Ray,options:RayCollisionsOptions&{mode:'all'}):RayIntersection[];getRayCollisions(ray:Ray,options:RayCollisionsOptions&{mode:'closest'}):RayIntersection|null;getRayCollisions(ray:Ray,options:RayCollisionsOptions&{mode:'any'}):boolean;getRayCollisions(ray:Ray,options?:Partial<Omit<RayCollisionsOptions,'mode'>>):RayIntersection[];getRayCollisions(ray:Ray,options?:RayCollisionsOptions):RayIntersection[]|RayIntersection|boolean|null;/**\n * A helper method responsible for casting rays at wall endpoints.\n * Rays are restricted by limiting angles.\n *\n * @param x          - The origin x-coordinate\n * @param y          - The origin y-coordinate\n * @param distance   - The ray distance\n * @param density    - The desired radial density\n *                     (default: `4`)\n * @param endpoints  - An array of endpoints to target\n * @param limitAngle - Whether the rays should be cast subject to a limited angle of emission\n *                     (default: `false`)\n * @param aMin       - The minimum bounding angle\n * @param aMax       - The maximum bounding angle\n *\n * @returns An array of Ray objects\n */static castRays(x:number,y:number,distance:number,{density,endpoints,limitAngle,aMin,aMax}?:{density?:number;endpoints?:PointArray[];limitAngle?:boolean;aMin?:number;aMax?:number}):Ray[];/**\n * Test a single Ray against a single Wall\n * @param ray  - The Ray being tested\n * @param wall - The Wall against which to test\n * @returns A RayIntersection if a collision occurred, or null\n */static testWall(ray:Ray,wall:InstanceType<ConfiguredObjectClassForName<'Wall'>>):RayIntersection|null;/**\n * Identify the closest collision point from an array of collisions\n * @param collisions - An array of intersection points\n * @returns The closest blocking intersection or null if no collision occurred\n */static getClosestCollision(collisions:RayIntersection[]):RayIntersection|null;/**\n * Normalize an angle to ensure it is baselined to be the smallest angle that is greater than a minimum.\n * @param aMin  - The lower-bound minimum angle\n * @param angle - The angle to adjust\n * @returns The adjusted angle which is greater than or equal to aMin.\n */protected static _normalizeAngle(aMin:number,angle:number):number;/**\n * Map source types to wall collision types\n * @param type - The source polygon type\n * @returns The wall collision attribute\n */protected static _mapCollisionType(type:'movement'):'move';protected static _mapCollisionType(type:'light'):'sense';protected static _mapCollisionType(type:'sight'):'sense';protected static _mapCollisionType(type:'sound'):'sound';/**\n * @deprecated since 0.8.0\n */get blockVision():InstanceType<ConfiguredObjectClassForName<'Wall'>>[];/**\n * @deprecated since 0.8.0\n */get blockMovement():InstanceType<ConfiguredObjectClassForName<'Wall'>>[];}namespace WallsLayer{interface LayerOptions extends PlaceablesLayer.LayerOptions<'Wall'>{name:'walls';controllableObjects:true;objectClass:typeof Wall;quadtree:true;sheetClass:ConstructorOf<FormApplication>;sortActiveTop:boolean;zIndex:number;}}}interface EndpointOptions{/**\n * An optional bounding rectangle within which the endpoint must lie.\n */\nbounds?:NormalizedRectangle;/**\n * The type of polygon being computed: \"movement\", \"sight\", or \"sound\"\n * @defaultValue `'movement'`\n */type?:'movement'|'sight'|'sound';}interface CollisionOptions{/**\n * Which collision type to check: movement, sight, sound\n * @defaultValue `'movement'`\n */type?:'movement'|'sight'|'sound';/**\n * Which type of collisions are returned: any, closest, all\n * @defaultValue `'any'`\n */\nmode?:'any'|'closest'|'all';}interface ComputePolygonOptions{/**\n * The type of polygon being computed: \"movement\", \"sight\", or \"sound\"\n * @defaultValue `'sight'`\n */type?:'movement'|'sight'|'sound';/**\n * An optional limited angle of emission with which to restrict polygons\n * @defaultValue `360`\n */\nangle?:number;/**\n * The desired radial density of emission for rays, in degrees\n * @defaultValue `6`\n */\ndensity?:number;/**\n * The current angle of rotation, used when the angle is limited\n * @defaultValue `0`\n */\nrotation?:number;/**\n * Compute sight that is fully unrestricted by walls\n * @defaultValue `false`\n */\nunrestricted?:boolean;}interface RayCollisionsOptions{/**\n * Which collision type to check: movement, sight, sound\n * @defaultValue `'movement'`\n */type?:'movement'|'sight'|'sound';/**\n * Which type of collisions are returned: any, closest, all\n * @defaultValue `'all'`\n */\nmode?:`any`|`closest`|`all`;/**\n * Internal performance tracking\n */\n_performance?:{tests:number};}"
    ]
  