
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\gridLayer.d.ts",
      "/**\n * A CanvasLayer responsible for drawing a square grid\n */declare class GridLayer extends CanvasLayer<GridLayer.LayerOptions>{constructor();/**\n * The Grid container\n * @defaultValue `undefined`\n */\ngrid:BaseGrid|undefined;/**\n * The Grid Highlight container\n * @defaultValue `undefined`\n */\nhighlight:PIXI.Container|undefined;/**\n * Map named highlight layers\n * @defaultValue `{}`\n */\nhighlightLayers:Record<string,GridHighlight>;/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['grid'];/**\n * @override\n * @defaultValue\n * ```typescript\n * mergeObject(super.layerOptions, {\n *   name: \"grid\",\n *   zIndex: 30\n * }\n * ```\n */static get layerOptions():GridLayer.LayerOptions;/**\n * The grid type rendered in this Scene\n */get type():foundry.CONST.GridType;/**\n * A convenient reference to the pixel grid size used throughout this layer\n */get size():number;/**\n * Get grid unit width\n */get w():BaseGrid['w'];/**\n * Get grid unit height\n */get h():BaseGrid['h'];/**\n * A boolean flag for whether the current grid is hexagonal\n */get isHex():boolean;/**\n * Draw the grid\n * @param preview - Override settings used in place of those saved to the Scene data\n */\ndraw(preview?:DrawOptions):Promise<this>;/**\n * Given a pair of coordinates (x1,y1), return the grid coordinates (x2,y2) which represent the snapped position\n * @param x        - The exact target location x\n * @param y        - The exact target location y\n * @param interval - An interval of grid spaces at which to snap, default is 1. If the interval is zero, no snapping occurs.\n *                   (defaultValue: `1`)\n */\ngetSnappedPosition(x:number,y:number,interval?:number):{x:number;y:number};/**\n * Given a pair of coordinates (x, y) - return the top-left of the grid square which contains that point\n * @returns An Array [x, y] of the top-left coordinate of the square which contains (x, y)\n */\ngetTopLeft(x:number,y:number):PointArray;/**\n * Given a pair of coordinates (x, y), return the center of the grid square which contains that point\n * @returns An Array [x, y] of the central point of the square which contains (x, y)\n */\ngetCenter(x:number,y:number):PointArray;/**\n * Measure the grid-wise distance between two point coordinates.\n * @param origin - The origin point\n * @param target - The target point\n * @returns The measured distance between these points\n *\n * @example\n * ```typescript\n * let distance = canvas.grid.measureDistance({x: 1000, y: 1000}, {x: 2000, y: 2000});\n * ```\n */\nmeasureDistance(origin:{x:number;y:number;},target:{x:number;y:number;}):number;/**\n * Measure the distance traveled over an array of distance segments.\n * @param segments - An array of measured segments\n * @param options  - Additional options which modify the measurement\n */\nmeasureDistances(segments:GridLayer.Segment[],options?:{gridSpaces?:boolean}):number[];/**\n * Define a new Highlight graphic\n * @param name - The name for the referenced highlight layer\n */\naddHighlightLayer(name:string):GridHighlight;/**\n * Clear a specific Highlight graphic\n * @param name - The name for the referenced highlight layer\n */\nclearHighlightLayer(name:string):void;/**\n * Destroy a specific Highlight graphic\n * @param name - The name for the referenced highlight layer\n */\ndestroyHighlightLayer(name:string):void;/**\n * Obtain the highlight layer graphic by name\n * @param name - The name for the referenced highlight layer\n */\ngetHighlightLayer(name:string):GridHighlight|undefined;/**\n * Add highlighting for a specific grid position to a named highlight graphic\n * @param name    - The name for the referenced highlight layer\n * @param options - Options for the grid position that should be highlighted\n */\nhighlightPosition(name:string,options?:Parameters<BaseGrid['highlightGridPosition']>[1]):false|void;/**\n * Test if a specific row and column position is a neighboring location to another row and column coordinate\n * @param r0 - The original row position\n * @param c0 - The original column position\n * @param r1 - The candidate row position\n * @param c1 - The candidate column position\n */\nisNeighbor(r0:number,c0:number,r1:number,c1:number):boolean;}declare namespace GridLayer{interface LayerOptions extends CanvasLayer.LayerOptions{name:'grid';zIndex:30;}interface Segment{ray:Ray;label?:Ruler['labels']['children'][number];}}interface DrawOptions{/**\n * @defaultValue `null`\n */type?:foundry.CONST.GridType|null;/**\n * @defaultValue `null`\n */\ndimensions?:Canvas['dimensions']|null;/**\n * @defaultValue `null`\n */\ngridColor?:number|string|null;/**\n * @defaultValue `null`\n */\ngridAlpha?:number|null;}"
    ]
  