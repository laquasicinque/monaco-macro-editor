
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayer.d.ts",
      "import{DataSourceForPlaceable,ConfiguredDocumentClass,ConfiguredObjectClassForName,ConfiguredDocumentClassForName,PlaceableDocumentType}from'../../../../../types/helperTypes';import EmbeddedCollection from'../../../../common/abstract/embedded-collection.mjs';type ConcretePlaceableOrPlaceableObject<T>=T extends PlaceableObject?T:PlaceableObject;declare global{/**\n * A subclass of Canvas Layer which is specifically designed to contain multiple PlaceableObject instances,\n * each corresponding to an embedded Document.\n * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n * @typeParam Options      - The type of the options in this layer.\n */abstract class PlaceablesLayer<\nDocumentName extends PlaceableDocumentType,Options extends PlaceablesLayer.LayerOptions<DocumentName>=PlaceablesLayer.LayerOptions<DocumentName>>extends CanvasLayer<Options>{constructor();/**\n * Placeable Layer Objects\n * @defaultValue `null`\n */\nobjects:PIXI.Container|null;/**\n * Preview Object Placement\n * @defaultValue `null`\n */\npreview:PIXI.Container|null;/**\n * Keep track of history so that CTRL+Z can undo changes\n */\nhistory:Array<\nCanvasHistory<ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>>;/**\n * Track the PlaceableObject on this layer which is currently being hovered upon\n * @defaultValue `null`\n */protected _hover:ConcretePlaceableOrPlaceableObject<\nInstanceType<ConfiguredObjectClassForName<DocumentName>>>|null;/**\n * Track the set of PlaceableObjects on this layer which are currently controlled by their id\n * @defaultValue `{}`\n */protected _controlled:Record<string,InstanceType<ConfiguredObjectClassForName<DocumentName>>>;/**\n * Keep track of an object copied with CTRL+C which can be pasted later\n * @defaultValue `[]`\n */protected _copy:ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>[];/**\n * A Quadtree which partitions and organizes Walls into quadrants for efficient target identification.\n */\nquadtree:Quadtree<\nConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>|null;/** @override */static get layerOptions():PlaceablesLayer.LayerOptions<any>;/**\n * A reference to the named Document type which is contained within this Canvas Layer.\n * @remarks This getter is abstract in {@link PlaceablesLayer}.\n */static documentName:PlaceableDocumentType;/**\n * Obtain a reference to the Collection of embedded Document instances within the currently viewed Scene\n */get documentCollection():EmbeddedCollection<\nConfiguredDocumentClassForName<DocumentName>,foundry.data.SceneData>|null;/**\n * Define a Container implementation used to render placeable objects contained in this layer\n */static get placeableClass():ConstructorOf<PlaceableObject>;/**\n * Return the precision relative to the Scene grid with which Placeable objects should be snapped\n */get gridPrecision():number;/**\n * If objects on this PlaceableLayer have a HUD UI, provide a reference to its instance\n * @remarks Returns `null` unless overridden\n */get hud():BasePlaceableHUD<InstanceType<ConfiguredObjectClassForName<DocumentName>>>|null;/**\n * A convenience method for accessing the placeable object instances contained in this layer\n */get placeables():InstanceType<ConfiguredObjectClassForName<DocumentName>>[];/**\n * An Array of placeable objects in this layer which have the _controlled attribute\n */get controlled():InstanceType<ConfiguredObjectClassForName<DocumentName>>[];/**\n * Obtain an iterable of objects which should be added to this PlaceableLayer\n */\ngetDocuments():Exclude<this['documentCollection'],null>|[];/**\n * @override\n * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n */\ndraw():Promise<this|undefined>;/**\n * Draw a single placeable object\n */\ncreateObject(data:InstanceType<ConfiguredDocumentClassForName<DocumentName>>):InstanceType<ConfiguredObjectClassForName<DocumentName>>;/** @override */\ntearDown():Promise<this>;/** @override */\nactivate():this;/** @override */\ndeactivate():this;/**\n * Get a PlaceableObject contained in this layer by it's ID\n *\n * @param objectId - The ID of the contained object to retrieve\n * @returns The object instance, or undefined\n */get(objectId:string):InstanceType<ConfiguredObjectClassForName<DocumentName>>|undefined;/**\n * Acquire control over all PlaceableObject instances which are visible and controllable within the layer.\n *\n * @param options - Options passed to the control method of each object\n *                  (default: `{}`)\n * @returns An array of objects that were controlled\n */\ncontrolAll(options?:PlaceableObject.ControlOptions):InstanceType<ConfiguredObjectClassForName<DocumentName>>[];/**\n * Release all controlled PlaceableObject instance from this layer.\n *\n * @param options - Options passed to the release method of each object\n *                  (default: `{}`)\n * @returns The number of PlaceableObject instances which were released\n */\nreleaseAll(options?:PlaceableObject.ReleaseOptions):number;/**\n * Simultaneously rotate multiple PlaceableObjects using a provided angle or incremental.\n * This executes a single database operation using Scene.update.\n * If rotating only a single object, it is better to use the PlaceableObject.rotate instance method.\n *\n * @param options - Options which configure how multiple objects are rotated\n *                  (default: `{}`)\n * @returns An array of objects which were rotated\n */\nrotateMany(options?:RotationOptions):Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]>;/**\n * Simultaneously move multiple PlaceableObjects via keyboard movement offsets.\n * This executes a single database operation using Scene.update.\n * If moving only a single object, this will delegate to PlaceableObject.update for performance reasons.\n *\n * @param options - Options which configure how multiple objects are moved\n *                  (default: `{}`)\n * @returns An array of objects which were moved during the operation\n */\nmoveMany(options?:MovementOptions):Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]>|undefined;/**\n * Undo a change to the objects in this layer\n * This method is typically activated using CTRL+Z while the layer is active\n */\nundoHistory():Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;/**\n * A helper method to prompt for deletion of all PlaceableObject instances within the Scene\n * Renders a confirmation dialogue to confirm with the requester that all objects will be deleted\n * @returns An array of Document objects which were deleted by the operation\n */\ndeleteAll():Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]|false|null>;/**\n * Record a new CRUD event in the history log so that it can be undone later\n * @param type - The event type (create, update, delete)\n * @param data - The object data\n */\nstoreHistory(type:PlaceablesLayer.HistoryEventType,data:DataSourceForPlaceable<\nConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>):void;/**\n * Copy currently controlled PlaceableObjects to a temporary Array, ready to paste back into the scene later\n * @returns The Array of copied PlaceableObject instances\n */\ncopyObjects():InstanceType<ConfiguredObjectClassForName<DocumentName>>[];/**\n * Paste currently copied PlaceableObjects back to the layer by creating new copies\n * @param position - The destination position for the copied data.\n * @param options  - (default: `{}`);\n * @returns An Array of created PlaceableObject instances\n */\npasteObjects(position:Point,options?:PasteOptions):Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;/**\n * Select all PlaceableObject instances which fall within a coordinate rectangle.\n * @param options        - (default: `{}`)\n * @returns A boolean for whether the controlled set was changed in the operation\n */\nselectObjects(options?:SelectOptions):boolean;/**\n * Update all objects in this layer with a provided transformation.\n * Conditionally filter to only apply to objects which match a certain condition.\n * @param transformation - An object of data or function to apply to all matched objects\n * @param condition      - A function which tests whether to target each object\n *                         (default: `null`)\n * @param options        - Additional options passed to Entity.update\n *                         (default: `{}`)\n * @returns An array of updated data once the operation is complete\n */\nupdateAll(transformation:|((placeable:InstanceType<ConfiguredObjectClassForName<DocumentName>>)=>Partial<\nDataSourceForPlaceable<\nConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>>)|Partial<\nDataSourceForPlaceable<\nConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>>,condition?:((placeable:InstanceType<ConfiguredObjectClassForName<DocumentName>>)=>boolean)|null,options?:DocumentModificationContext):Promise<Array<InstanceType<ConfiguredDocumentClassForName<DocumentName>>>>;/**\n * Handle left mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n * @param event - (unused)\n * @see {@link Canvas#_onClickLeft}\n */protected _onClickLeft(event:PIXI.InteractionEvent):number|void;/**\n * Handle double left-click events which originate from the Canvas stage and are dispatched to this Layer.\n * @param event - (unused)\n * @see {@link Canvas#_onClickLeft2}\n */protected _onClickLeft2(event:PIXI.InteractionEvent):void;/**\n * Start a left-click drag workflow originating from the Canvas stage.\n * @see {@link Canvas#_onDragLeftStart}\n * @remarks This returns Promise<void> but is overridden by some subclasses.\n */protected _onDragLeftStart(event:PIXI.InteractionEvent):Promise<void|PlaceableObject>;/**\n * Continue a left-click drag workflow originating from the Canvas stage.\n * @see {@link Canvas#_onDragLeftMove}\n */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/**\n * Conclude a left-click drag workflow originating from the Canvas stage.\n * @see {@link Canvas#_onDragLeftDrop}\n * @remarks Returns always a promise but is overridden in subclasses.\n */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>|void>|void;/**\n * Cancel a left-click drag workflow originating from the Canvas stage.\n * @param event - (unused)\n * @see {@link Canvas#_onDragLeftDrop}\n */protected _onDragLeftCancel(event:PointerEvent):void;/**\n * Handle right mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n * @param event - (unused)\n * @see {@link Canvas#_onClickRight}\n */protected _onClickRight(event:PIXI.InteractionEvent):void;/**\n * Handle mouse-wheel events at the PlaceableObjects layer level to rotate multiple objects at once.\n * This handler will rotate all controlled objects by some incremental angle.\n * @param event - The mousewheel event which originated the request\n * @remarks This methods just returns ReturnType\\<this['rotateMany']\\>|void but is overridden by subclasses\n */protected _onMouseWheel(event:WheelEvent):|ReturnType<this['rotateMany']>|ReturnType<InstanceType<ConfiguredObjectClassForName<DocumentName>>['rotate']>|void;/**\n * Handle a DELETE keypress while a placeable object is hovered\n * @param event - The delete key press event which triggered the request\n *                (unused)\n */protected _onDeleteKey(event?:any):Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]|undefined>;/**\n * @deprecated since 0.8.0\n */static get dataArray():string;/**\n * @deprecated since 0.8.0\n */\ncreateMany(data:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1],options:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[2]):ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>;/**\n * @deprecated since 0.8.0\n */\nupdateMany(data:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[1],options:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[2]):ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>;/**\n * @deprecated since 0.8.0\n */\ndeleteMany(data:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[1],options:Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[2]):ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>;}interface CanvasHistory<Placeable extends PlaceableObject>{/**\n * The type of operation stored as history (create, update, delete)\n */type:PlaceablesLayer.HistoryEventType;/**\n * The data corresponding to the action which may later be un-done\n */\ndata:DataSourceForPlaceable<Placeable>[];}namespace PlaceablesLayer{type HistoryEventType='create'|'update'|'delete';/**\n * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n */interface LayerOptions<DocumentName extends PlaceableDocumentType>extends CanvasLayer.LayerOptions{/**\n * Does this layer support a mouse-drag workflow to create new objects?\n * @defaultValue `game.user.isGM`\n */\ncanDragCreate:boolean;/**\n * Can placeable objects in this layer be controlled?\n * @defaultValue `false`\n */\ncontrollableObjects:boolean;/**\n * Can placeable objects in this layer be rotated?\n * @defaultValue `false`\n */\nrotatableObjects:boolean;/**\n * Do objects in this layer snap to the grid\n * @defaultValue `true`\n */\nsnapToGrid:boolean;/**\n * The class used to represent an object on this layer.\n * @defaultValue `getDocumentClass(this.documentName)`\n */\nobjectClass:ConfiguredObjectClassForName<DocumentName>;/**\n * Does this layer use a quadtree to track object positions?\n * @defaultValue `false`\n */\nquadtree:boolean;/**\n * The FormApplication class used to configure objects on this layer.\n * @defaultValue `CONFIG[this.documentName].sheetClass`\n */\nsheetClass:ConstructorOf<FormApplication>;}}}interface RotationOptions{/**\n * A target angle of rotation (in degrees) where zero faces \"south\"\n */\nangle?:number;/**\n * An incremental angle of rotation (in degrees)\n */\ndelta?:number;/**\n * Snap the resulting angle to a multiple of some increment (in degrees)\n */\nsnap?:number;/**\n * An Array of object IDs to target for rotation\n */\nids?:string[];}interface MovementOptions{/**\n * The number of incremental grid units in the horizontal direction\n * @defaultValue `0`\n */\ndx?:number;/**\n * The number of incremental grid units in the vertical direction\n * @defaultValue `0`\n */\ndy?:number;/**\n * Rotate the token to the keyboard direction instead of moving\n * @defaultValue\n */\nrotate?:boolean;/**\n * An Array of object IDs to target for movement\n * @defaultValue `this.controlled.filter(o => !o.data.locked).map(o => o.id)`\n */\nids?:string[];}interface PasteOptions{/**\n * Paste data in a hidden state, if applicable. Default is false.\n * @defaultValue `false`\n */\nhidden?:boolean;/**\n * Snap the resulting objects to the grid. Default is true.\n * @defaultValue `true`\n */\nsnap?:boolean;}interface SelectOptions{/**\n * The top-left x-coordinate of the selection rectangle\n */\nx?:number;/**\n * The top-left y-coordinate of the selection rectangle\n */\ny?:number;/**\n * The width of the selection rectangle\n */\nwidth?:number;/**\n * The height of the selection rectangle\n */\nheight?:number;/**\n * Optional arguments provided to any called release() method\n * @defaultValue `{}`\n */\nreleaseOptions?:PlaceableObject.ReleaseOptions;/**\n * Optional arguments provided to any called control() method\n * @defaultValue `{ releaseOthers: false }`\n */\ncontrolOptions?:PlaceableObject.ControlOptions;}"
    ]
  