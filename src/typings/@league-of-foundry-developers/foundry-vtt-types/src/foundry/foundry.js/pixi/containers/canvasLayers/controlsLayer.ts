
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\controlsLayer.d.ts",
      "/**\n * A CanvasLayer for displaying UI controls which are overlayed on top of other layers.\n *\n * We track three types of events:\n * 1) Cursor movement\n * 2) Ruler measurement\n * 3) Map pings\n */import{ConfiguredDocumentClass,ConfiguredObjectClassForName}from'../../../../../types/helperTypes';declare global{class ControlsLayer extends CanvasLayer<ControlsLayer.LayerOptions>{constructor();/**\n * Cursor position indicators\n * @defaultValue `null`\n */\ncursors:PIXI.Container|null;/**\n * A mapping of user IDs to Cursor instances for quick access\n * @defaultValue `{}`\n */protected _cursors:Partial<Record<string,Cursor>>;/**\n * Door control icons\n * @defaultValue `null`\n */\ndoors:PIXI.Container|null;/**\n * Status effect icons\n * @remarks Always `null`\n */\neffects:null;/**\n * Ruler tools, one per connected user\n * @defaultValue `null`\n */\nrulers:PIXI.Container|null;/**\n * A convenience mapping of user IDs to Ruler instances for quick access\n */protected _rulers:Partial<Record<string,Ruler>>;/**\n * Canvas selection rectangle\n * @defaultValue `null`\n */\nselect:PIXI.Graphics|null;interactiveChildren:true;/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():undefined;/**\n * @override\n * @defaultValue `mergeObject(super.layerOptions, { name: \"controls\", zIndex: 1000 })`\n */static get layerOptions():ControlsLayer.LayerOptions;/**\n * A convenience accessor to the Ruler for the active game user\n */get ruler():ReturnType<ControlsLayer['getRulerForUser']>;/**\n * Get the Ruler display for a specific User ID\n */\ngetRulerForUser(userId:string):Ruler|null;/** @override */\ndraw():this;/**\n * Draw the cursors container\n */\ndrawCursors():void;/**\n * Draw the Door controls container\n */\ndrawDoors():void;/**\n * Create a Door Control icon for a given Wall object\n * @param wall - The Wall for which to create a DoorControl\n * @returns The created DoorControl\n */\ncreateDoorControl(wall:InstanceType<ConfiguredObjectClassForName<'Wall'>>):ReturnType<DoorControl['draw']>|null;/**\n * Draw Ruler tools\n */\ndrawRulers():void;/**\n * Draw the select rectangle given an event originated within the base canvas layer\n * @param coords - The rectangle coordinates of the form `{x, y, width, height}`\n */\ndrawSelect({x,y,width,height}:{x:number;y:number;width:number;height:number}):void;/** @override */\ndeactivate():void;/**\n * Handle mousemove events on the game canvas to broadcast activity of the user's cursor position\n */protected _onMoveCursor(event:PIXI.InteractionEvent):void;/**\n * Create and draw the Cursor object for a given User\n * @param user - The User entity for whom to draw the cursor Container\n */\ndrawCursor(user:InstanceType<ConfiguredDocumentClass<typeof User>>):Cursor;/**\n * Update the cursor when the user moves to a new position\n * @param user     - The User for whom to update the cursor\n * @param position - The new cursor position\n */\nupdateCursor(user:InstanceType<ConfiguredDocumentClass<typeof User>>,position:Point|null):void;/**\n * Update display of an active Ruler object for a user given provided data\n */\nupdateRuler(user:InstanceType<ConfiguredDocumentClass<typeof User>>,rulerData:Parameters<Ruler['update']>[0]|null):void;}namespace ControlsLayer{interface LayerOptions extends CanvasLayer.LayerOptions{name:'controls';zIndex:1000;}}}"
    ]
  