
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayer.d.ts",
      "/**\n * An abstract pattern for primary layers of the game canvas to implement\n * @typeParam Options - The type of the options in this layer.\n */declare abstract class CanvasLayer<Options extends CanvasLayerOptions=CanvasLayerOptions>extends PIXI.Container{constructor();/**\n * Options for this layer instance.\n * @defaultValue `this.constructor.layerOptions`\n */\noptions:Options;/**\n * @defaultValue `false`\n */\ninteractive:boolean;/**\n * @defaultValue `false`\n */\ninteractiveChildren:boolean;/**\n * Track whether the canvas layer is currently active for interaction\n * @defaultValue `false`\n */protected _active:boolean;/**\n * Customize behaviors of this CanvasLayer by modifying some behaviors at a class level.\n */static get layerOptions():CanvasLayerOptions;/**\n * Return a reference to the active instance of this canvas layer\n */static get instance():CanvasLayer|undefined;/**\n * The canonical name of the CanvasLayer\n * @remarks Foundry defines this as a getter, but since CanvasLayer extends PIXI.Container, it has to be a property.\n */readonly name:string;/**\n * Draw the canvas layer, rendering its internal components and returning a Promise\n * The Promise resolves to the drawn layer once its contents are successfully rendered.\n * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n */\ndraw():Promise<this|undefined>|this;/**\n * Deconstruct data used in the current layer in preparation to re-draw the canvas\n */\ntearDown():Promise<this>;/**\n * Activate the CanvasLayer, deactivating other layers and marking this layer's children as interactive.\n * @returns The layer instance, now activated\n */\nactivate():this;/**\n * Deactivate the CanvasLayer, removing interactivity from its children.\n * @returns The layer instance, now inactive\n * @remarks It returns Promise<this> but is overridden by a subclass returning void.\n */\ndeactivate():this|void;/**\n * Get the zIndex that should be used for ordering this layer vertically relative to others in the same Container.\n */\ngetZIndex():number;}/**\n * Options which configure the behavior of a Canvas Layer.\n */declare interface CanvasLayerOptions{/**\n * The layer name by which the instance is referenced within the Canvas\n */\nname:string;/**\n * The zIndex sorting of this layer relative to other layers\n */\nzIndex:number;/**\n * Should this layer be sorted to the top when it is active?\n */\nsortActiveTop:boolean;}declare namespace CanvasLayer{/**\n * Options which configure the behavior of a Canvas Layer.\n * @remarks This type exists for consistency\n */type LayerOptions=CanvasLayerOptions;}"
    ]
  