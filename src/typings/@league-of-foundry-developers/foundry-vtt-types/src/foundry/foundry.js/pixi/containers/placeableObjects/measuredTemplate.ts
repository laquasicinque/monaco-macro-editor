
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\measuredTemplate.d.ts",
      "import{ConfiguredDocumentClass}from'../../../../../types/helperTypes';import{DocumentModificationOptions}from'../../../../common/abstract/document.mjs';declare global{/**\n * A MeasuredTemplate is an implementation of PlaceableObject which represents an area of the canvas grid which is\n * covered by some effect.\n */class MeasuredTemplate extends PlaceableObject<\nInstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>>{constructor(document:InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>);controlIcon:ControlIcon|null;template:PIXI.Graphics|null;ruler:PreciseText|null;/**\n * The tiling texture used for this template, if any\n */\ntexture:PIXI.Texture|null;/**\n * The template shape used for testing point intersection\n */\nshape:PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle;/**\n * Internal property used to configure the control border thickness\n */protected _borderThickness:number;/** @override */static embeddedName:'MeasuredTemplate';/**\n * A convenience accessor for the border color as a numeric hex code\n */get borderColor():string|number;/**\n * A convenience accessor for the fill color as a numeric hex code\n */get fillColor():string|number;/**\n * A flag for whether the current User has full ownership over the MeasuredTemplate document.\n */get owner():boolean;/** @override */\ndraw():Promise<this>;/**\n * Draw the ControlIcon for the MeasuredTemplate\n */protected _drawControlIcon():ControlIcon;/**\n * Draw the Text label used for the MeasuredTemplate\n */protected _drawRulerText():PreciseText;/** @override */\nrefresh():this;/**\n * Get a Circular area of effect given a radius of effect\n */protected _getCircleShape(distance:number):PIXI.Circle;/**\n * Get a Conical area of effect given a direction, angle, and distance\n */protected _getConeShape(direction:number,angle:number,distance:number):PIXI.Polygon;/**\n * Get a Rectangular area of effect given a width and height\n */protected _getRectShape(direction:number,distance:number):NormalizedRectangle;/**\n * Get a rotated Rectangular area of effect given a width, height, and direction\n */protected _getRayShape(direction:number,distance:number,width:number):PIXI.Polygon;/**\n * Draw the rotation control handle and assign event listeners\n */protected _drawRotationHandle(radius:number):void;/**\n * Update the displayed ruler tooltip text\n */protected _refreshRulerText():void;/**\n * Highlight the grid squares which should be shown under the area of effect\n */\nhighlightGrid():void;/** @override */\nrotate(angle:number,snap:number):Promise<this>;/** @override */protected _canControl(user:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:any):boolean;/** @override */protected _canConfigure(user:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:any):boolean;/** @override */protected _canView(user:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:any):boolean;/** @override */protected _onUpdate(data:DeepPartial<InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>['data']['_source']>,options?:DocumentModificationOptions,userId?:string):void;/** @override */protected _onDelete(options:DocumentModificationOptions,userId:string):void;}}"
    ]
  