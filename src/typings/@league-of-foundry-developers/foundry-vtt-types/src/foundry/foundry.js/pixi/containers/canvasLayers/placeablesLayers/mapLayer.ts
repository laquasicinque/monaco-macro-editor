
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\mapLayer.d.ts",
      "import{ConfiguredDocumentClassForName,ConfiguredObjectClassForName}from'../../../../../../types/helperTypes';declare global{/**\n * A PlaceablesLayer designed for rendering the visual Scene for a specific vertical cross-section.\n * Each MapLayer contains a single background image as well as an arbitrary number of Tile objects.\n */class MapLayer<Options extends MapLayer.LayerOptions=MapLayer.LayerOptions<'background'>>extends PlaceablesLayer<'Tile',Options>{/**\n * @param data - (default: `{}`)\n */constructor(data?:MapLayerConstructorData);/**\n * The numeric Scene level to which this layer belongs\n */\nlevel:number;/**\n * The background source path\n */\nbgPath:string|undefined;/**\n * The layer background image\n */\nbg:PIXI.Sprite|undefined;static documentName:'Tile';/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n * It returns the BackgroundLayer but ForegroundLayer has been added for subclasses.\n */static get instance():Canvas['background']|Canvas['foreground'];/**\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.layerOptions, {\n *   name: 'background',\n *   zIndex: 0,\n *   controllableObjects: true,\n *   rotatableObjects: true\n * })\n * ```\n */static get layerOptions():MapLayer.LayerOptions;/**\n * Return the base HTML image or video element which is used to generate the background Sprite.\n */get bgSource():HTMLImageElement|HTMLVideoElement|null;get hud():TileHUD;/**\n * Is the background texture used in this layer a video?\n */get isVideo():boolean;/**\n * An array of Tile objects which are rendered within the objects container\n */get tiles():InstanceType<ConfiguredObjectClassForName<'Tile'>>[];deactivate():this;tearDown():Promise<this>;/**\n * @override\n * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n */\ndraw():Promise<this|undefined>;/**\n * Draw the background Sprite for the layer, aligning its dimensions with those configured for the canvas.\n * @returns The rendered Sprite, or undefined if no background is present\n */protected _drawBackground():PIXI.Sprite|undefined;protected _onDragLeftStart(event:PIXI.InteractionEvent):Promise<void>;protected _onDragLeftMove(event:PIXI.InteractionEvent):void;protected _onDragLeftDrop(event:PIXI.InteractionEvent):void;protected _onDragLeftCancel(event:PointerEvent):void;/**\n * Handle drop events for Tile data on the Tiles Layer\n * @param event - The concluding drag event\n * @param data - The extracted Tile data\n */protected _onDropData(event:DragEvent,data:|{type:'Tile';img:string;tileSize?:number;x:number;y:number}|({type:string}&Partial<Record<string,unknown>>)):Promise<InstanceType<ConfiguredDocumentClassForName<'Tile'>>|undefined>;/**\n * Prepare the data object when a new Tile is dropped onto the canvas\n * @param event - The concluding drag event\n * @param data  - The extracted Tile data\n * @returns The prepared data to create\n */protected _getDropData(event:DragEvent,data:MapLayer.DropData):Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;}namespace MapLayer{interface LayerOptions<Name extends'background'|'foreground'='background'|'foreground'>extends PlaceablesLayer.LayerOptions<'Tile'>{name:Name;zIndex:0;controllableObjects:true;rotatableObjects:true;}type DropData=|{type:'Tile';img:string;tileSize?:number;x:number;y:number}|({type:string}&Partial<Record<string,unknown>>);}}interface MapLayerConstructorData{bgPath?:string;/**\n * @defaultValue `1`\n */\nlevel?:number;}"
    ]
  