
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\sightLayer.d.ts",
      "/**\n * The Sight Layer which implements dynamic vision, lighting, and fog of war\n * This layer uses an event-driven workflow to perform the minimal required calculation in response to changes.\n * @see PointSource\n *\n * The container structure of this layer is as follows:\n * sight: SightLayer              The SightLayer itself\n *   msk: PIXI.Graphics           A masking rectangle that restricts exploration to the scene background\n *   unexplored: PIXI.Graphics    An unexplored background that spans the entire scene canvas\n *   explored: PIXI.Container     The exploration container\n *      revealed: PIXI.Container  The container of areas which have been previously revealed\n *        saved: PIXI.Sprite      The saved FOW exploration texture from the database\n *        pending: PIXI.Container A container of pending exploration polygons that have not yet been saved\n *        roofs: PIXI.Container   A container of occluded roof sprites which should not be marked as explored\n *      current: PIXI.Container   The current vision container\n *        los: PIXI.Graphics      The current line-of-sight polygon\n *        fov: PIXI.Graphics      The current filed-of-view polygon\n *      msk: PIXI.Graphics        The masking rectangle that limits exploration to the Scene background\n *\n * @example <caption>The sightRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"sightRefresh\", layer => {});\n * ```\n */import{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{class SightLayer extends CanvasLayer<SightLayer.LayerOptions>{constructor();/**\n * The FogExploration document which applies to this canvas view\n * @defaultValue `null`\n */\nexploration:InstanceType<ConfiguredDocumentClass<typeof FogExploration>>|null;/**\n * A Collection of vision sources which are currently active within the rendered Scene.\n */\nsources:foundry.utils.Collection<PointSource>;/**\n * The canonical line-of-sight polygon which defines current Token visibility.\n */\nlos:PIXI.Graphics;/**\n * A status flag for whether the layer initialization workflow has succeeded\n * @defaultValue `false`\n */protected _initialized:boolean;/**\n * A pool of fog of war exploration containers that can be recycled\n * @defaultValue `[]`\n */protected _visionPool:PIXI.Container[];/**\n * Track whether fog of war exploration has been updated and required saving\n * @defaultValue `false`\n */protected _fogUpdated:boolean;/**\n * Track the number of moves which have updated fog of war\n * @defaultValue `0`\n */protected _fogUpdates:number;/**\n * A debounced function to save fog of war exploration once a stream of updates have stopped\n */\ndebounceSaveFog:(...args:Parameters<this['saveFog']>)=>void;/**\n * The configured resolution used for the saved fog-of-war texture\n * @defaultValue `undefined`\n */protected _fogResolution:{resolution:number;width:number;height:number}|undefined;/**\n * Define the threshold value for the number of distinct Wall endpoints.\n * Below this threshold, exact vision computation is used by casting a Ray at every endpoint.\n * Above this threshold, approximate vision computation is used by culling to only nearby endpoints.\n * @defaultValue `200`\n */static EXACT_VISION_THRESHOLD:number;/**\n * Define the number of positions that are explored before a set of fog updates are pushed to the server.\n * @defaultValue `10`\n */static FOG_COMMIT_THRESHOLD:number;/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['sight'];/**\n * @override\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.layerOptions, {\n *  name: 'sight',\n *  zIndex: 400\n * })\n * ```\n */static get layerOptions():SightLayer.LayerOptions;/**\n * Does the currently viewed Scene support Token field of vision?\n */get tokenVision():boolean;/**\n * Does the currently viewed Scene support fog of war exploration?\n */get fogExploration():boolean;/** @override */\ntearDown():Promise<this>;/**\n * Initialize the Sight Layer. Initialization has the following hierarchical workflow:\n *\n * Initialize Layer (reset entire layer)\n *  InitializeLights (used to reset all lights)\n *    UpdateLight (update a single light)\n *  InitializeTokens (reset all tokens)\n *    UpdateToken (update a single token)\n *  Initialize Fog (reset FOW state)\n */\ninitialize():Promise<void>;/**\n * Initialize fog of war - resetting it when switching scenes or re-drawing the canvas\n */\ninitializeFog():Promise<void>;/**\n * Initialize all Token sight sources which are present on this layer\n */\ninitializeSources():Promise<void>;/** @override */\ndraw():Promise<this>;/**\n * Construct a vision container that is used to render a single view position.\n * These containers are placed into the _visionPool and recycled as needed.\n */protected _createVisionContainer():PIXI.Container;/**\n * Obtain a vision container from the recycling pool, or create one if no container exists.\n * Assign the container as the current fog exploration and the current LOS polygon.\n */protected _getVisionContainer():PIXI.Container;/**\n * Return a vision container back to the pool, recycling it for future use.\n * @param c - The container to recycle\n */protected _recycleVisionContainer(c:PIXI.Container):void;/**\n * Update the display of the sight layer.\n * Organize sources into rendering queues and draw lighting containers for each source\n *\n * @param forceUpdateFog - Always update the Fog exploration progress for this update\n *                         (default: `false`)\n * @param noUpdateFog    - Never update the Fog exploration progress for this update\n *                         (default: `false`)\n */\nrefresh({forceUpdateFog,noUpdateFog}?:{forceUpdateFog?:boolean;noUpdateFog?:boolean;}):void|ReturnType<this['restrictVisibility']>;/**\n * Restrict the visibility of certain canvas assets (like Tokens or DoorControls) based on the visibility polygon\n * These assets should only be displayed if they are visible given the current player's field of view\n */\nrestrictVisibility():void;/**\n * Test whether a point on the Canvas is visible based on the current vision and LOS polygons\n *\n * @param point     - The point in space to test, an object with coordinates x and y.\n * @param tolerance - A numeric radial offset which allows for a non-exact match. For example, if\n *                    tolerance is 2 then the test will pass if the point is within 2px of a vision\n *                    polygon.\n *                    (defaultValue: `2`)\n * @param object    - An optional reference to the object whose visibility is being tested\n *                    (defaultValue: `null`)\n *\n * @returns Whether the point is currently visible.\n */\ntestVisibility(point:Point,{tolerance,object}?:{tolerance?:number;object?:PIXI.DisplayObject|null}):boolean;/**\n * Once a new Fog of War location is explored, composite the explored container with the current staging sprite\n * Save that staging Sprite as the rendered fog exploration and swap it out for a fresh staging texture\n * Do all this asynchronously, so it doesn't block token movement animation since this takes some extra time\n */\ncommitFog():void;/**\n * Load existing fog of war data from local storage and populate the initial exploration sprite\n */\nloadFog():Promise<PIXI.Texture|void>;/**\n * Dispatch a request to reset the fog of war exploration status for all users within this Scene.\n * Once the server has deleted existing FogExploration documents, the _onResetFog handler will re-draw the canvas.\n */\nresetFog():Promise<void>;/**\n * Save Fog of War exploration data to a base64 string to the FogExploration document in the database.\n * Assumes that the fog exploration has already been rendered as fog.rendered.texture.\n */\nsaveFog():Promise<void>;/**\n * Update the fog layer when a player token reaches a board position which was not previously explored\n * @param source - The vision source for which the fog layer should update\n * @param force  - Force fog to be updated even if the location is already explored\n *                 (default: `false`)\n */\nupdateFog(source:PointSource,force?:boolean):void;/**\n * Choose an adaptive fog rendering resolution which downscales the saved fog textures for larger dimension Scenes.\n * It is important that the width and height of the fog texture is evenly divisible by the downscaling resolution.\n */protected _configureFogResolution():{resolution:number;width:number;height:number};/**\n * If fog of war data is reset from the server, re-draw the canvas\n */protected _handleResetFog():Promise<void>;/**\n * Visualize the sight layer to understand algorithm performance.\n * @param bounds    - The initial rectangular bounds of the vision check\n * @param endpoints - The wall endpoints being tested\n * @param rays      - The array of cast vision Rays\n * @param los       - The resulting line-of-sight polygon\n * @param fov       - The resulting field-of-vision polygon\n */protected static _visualizeSight(bounds:Rectangle,endpoints:PointArray[],rays:Ray[],los:PIXI.Polygon,fov:PIXI.Polygon):void;/**\n * @deprecated since 0.8.2\n * @see WallsLayer#computePolygon\n * Compute line-of-sight and field-of-vision polygons for a given origin position and visibility radius.\n * The line-of-sight polygon defines the unrestricted area of visibility for the source.\n * The field-of-vision polygon defines the restricted area of visibility for the source.\n * @param angle        - (default: `360`)\n * @param density      - (default: `6`)\n * @param rotation     - (default: `0`)\n * @param unrestricted - (default: `false`)\n */static computeSight(origin:Point,radius:number,{angle,density,rotation,unrestricted}?:{angle?:number;density?:number;rotation?:number;unrestricted?:boolean}):{rays:Ray[];los:PIXI.Polygon;fov:PIXI.Polygon};}namespace SightLayer{interface LayerOptions extends CanvasLayer.LayerOptions{name:'sight';zIndex:400;}}}"
    ]
  