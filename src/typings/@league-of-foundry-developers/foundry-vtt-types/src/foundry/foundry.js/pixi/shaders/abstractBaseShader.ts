
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\shaders\\abstractBaseShader.d.ts",
      "/**\n * This class defines an interface which all shaders utilize\n */declare abstract class AbstractBaseShader extends PIXI.Shader{constructor(program:PIXI.Program,uniforms:AbstractBaseShader.Uniforms);/**\n * The initial default values of shader uniforms\n */protected _defaults:AbstractBaseShader.Uniforms;/**\n * The default vertex shader used by all instances of AbstractBaseShader\n */static vertexShader:string;/**\n * The fragment shader which renders this source.\n * A subclass of AbstractBaseShader must implement the fragmentShader static field.\n * @defaultValue `\"\"`\n *\n * @remarks This is abstract, subclasses must implement it.\n */static fragmentShader:string;/**\n * The default uniform values for the shader.\n * A subclass of AbstractBaseShader must implement the defaultUniforms static field.\n * @defaultValue `{}`\n *\n * @remarks This is abstract, subclasses must implement it.\n */static defaultUniforms:AbstractBaseShader.Uniforms;/**\n * A factory method for creating the shader using its defined default values\n */static create<T extends AbstractBaseShader>(this:ConstructorOf<T>,defaultUniforms?:AbstractBaseShader.Uniforms):T;/**\n * Reset the shader uniforms back to their provided default values\n */protected reset():void;/**\n * A Vec3 pseudo-random generator, based on uv position\n */static PRNG3D:string;/**\n * A conventional pseudo-random number generator with the \"golden\" numbers, based on uv position\n */static PRNG:string;/**\n * A conventional noise generator\n */static NOISE:string;/**\n * Fractional Brownian Motion for a given number of octaves\n * @param octaves - (default: `4`)\n * @param amp     - (default: `1.0`)\n */static FBM(octaves?:number,amp?:number):string;/**\n * Fade easing to use with distance in interval [0,1]\n * @param amp  - (default: `3`)\n * @param coef - (default: `0.80`)\n */static FADE(amp?:number,coef?:number):string;/**\n * Convert a Hue-Saturation-Brightness color to RGB - useful to convert polar coordinates to RGB\n */static HSB2RGB:string;}declare namespace AbstractBaseShader{type UniformValue=|boolean|number|Int32List|Float32List|{x:number;y:number}|{x:number;y:number;z:number}|{x:number;y:number;z:number;w:number}|{x:number;y:number}[]|{x:number;y:number;z:number}[]|{x:number;y:number;z:number;w:number}[]|PIXI.Texture;type Uniforms=Partial<Record<string,AbstractBaseShader.UniformValue>>;}"
    ]
  