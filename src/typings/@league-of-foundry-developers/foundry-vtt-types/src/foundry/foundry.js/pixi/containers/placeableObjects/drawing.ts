
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\drawing.d.ts",
      "import{ConfiguredDocumentClass}from'../../../../../types/helperTypes';import{DocumentModificationOptions}from'../../../../common/abstract/document.mjs';declare global{/**\n * The Drawing object is an implementation of the PlaceableObject container.\n * Each Drawing is a placeable object in the DrawingsLayer.\n */class Drawing extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>>{constructor(document:InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>);/**\n * @remarks Not used for `Drawing`\n */\ncontrolIcon:null;/**\n * The inner drawing container\n * @defaultValue `null`\n */\ndrawing:PIXI.Container|null;/**\n * The primary drawing shape\n * @defaultValue `null`\n */\nshape:PIXI.Graphics|null;/**\n * Text content, if included\n * @defaultValue `null`\n */\ntext:PIXI.Text|null;/**\n * The Graphics outer frame and handles\n * @defaultValue `null`\n */\nframe:PIXI.Container|null;/**\n * Internal timestamp for the previous freehand draw time, to limit sampling\n * @defaultValue `0`\n */protected _drawTime:number;protected _sampleTime:number;/**\n * Internal flag for the permanent points of the polygon\n * @defaultValue `foundry.utils.deepClone(this.data.points || [])`\n */protected _fixedPoints:Array<[x:number,y:number]>;/** @override */static get embeddedName():'Drawing';/**\n * The rate at which points are sampled (in milliseconds) during a freehand drawing workflow\n * @defaultValue `75`\n */static FREEHAND_SAMPLE_RATE:number;/**\n * A Boolean flag for whether or not the Drawing utilizes a tiled texture background\n */get isTiled():boolean;/**\n * A Boolean flag for whether or not the Drawing is a Polygon type (either linear or freehand)\n */get isPolygon():boolean;/** @override */\ndraw():Promise<this>;/**\n * Clean the drawing data to constrain its allowed position\n */protected _cleanData():void;/**\n * Create the components of the drawing element, the drawing container, the drawn shape, and the overlay text\n */protected _createDrawing():void;/**\n * Create elements for the foreground text\n */protected _createText():PreciseText;/**\n * Create elements for the Drawing border and handles\n */protected _createFrame():void;/** @override */\nrefresh():void;/**\n * Draw rectangular shapes\n */protected _drawRectangle():void;/**\n * Draw ellipsoid shapes\n */protected _drawEllipse():void;/**\n * Draw polygonal shapes\n */protected _drawPolygon():void;/**\n * Draw freehand shapes with bezier spline smoothing\n */protected _drawFreehand():void;/**\n * Attribution: The equations for how to calculate the bezier control points are derived from Rob Spencer's article:\n * http://scaledinnovation.com/analytics/splines/aboutSplines.html\n * @param factor   - The smoothing factor\n * @param previous - The prior point\n * @param point    - The current point\n * @param next     - The next point\n */protected _getBezierControlPoints(factor:number,previous:[number,number],point:[number,number],next:[number,number]):{cp1:{x:number;y:number;};next_cp0:{x:number;y:number;};};/**\n * Refresh the boundary frame which outlines the Drawing shape\n */protected _refreshFrame({x,y,width,height}:Rectangle):void;/**\n * Add a new polygon point to the drawing, ensuring it differs from the last one\n * @param temporary - (default: `true`)\n */protected _addPoint(position:Point,temporary?:boolean):void;/**\n * Remove the last fixed point from the polygon\n */protected _removePoint():void;/** @override */protected _onControl(options:PlaceableObject.ControlOptions&{isNew?:boolean}):void;/** @override */protected _onRelease(options:PlaceableObject.ReleaseOptions):void;/** @override */protected _onDelete(options:DocumentModificationOptions,userId:string):void;/**\n * Handle text entry in an active text tool\n */protected _onDrawingTextKeydown(event:KeyboardEvent):|ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>|ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['delete']>|void;/** @override */protected _onUpdate(data:DeepPartial<foundry.data.DrawingData['_source']>):void;/**\n * @override\n * @param event - unused\n */protected _canControl(user:User,event?:any):boolean;/**\n * @override\n * @param user  - unused\n * @param event - unused\n */protected _canConfigure(user:User,event?:any):boolean;/** @override */\nactivateListeners():void;/**\n * Handle mouse movement which modifies the dimensions of the drawn shape\n */protected _onMouseDraw(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<unknown>;/** @override */protected _onDragLeftCancel(event:MouseEvent):void;/**\n * Handle mouse-over event on a control handle\n * @param event - The mouseover event\n */protected _onHandleHoverIn(event:PIXI.InteractionEvent):void;/**\n * Handle mouse-out event on a control handle\n * @param event - The mouseout event\n */protected _onHandleHoverOut(event:PIXI.InteractionEvent):void;/**\n * When we start a drag event - create a preview copy of the Tile for re-positioning\n * @param event - The mousedown event\n */protected _onHandleMouseDown(event:PIXI.InteractionEvent):void;/**\n * Handle the beginning of a drag event on a resize handle\n */protected _onHandleDragStart(event:PIXI.InteractionEvent):void;/**\n * Handle mousemove while dragging a tile scale handler\n * @param event - The mousemove event\n */protected _onHandleDragMove(event:PIXI.InteractionEvent):void;/**\n * Handle mouseup after dragging a tile scale handler\n * @param event - The mouseup event\n */protected _onHandleDragDrop(event:PIXI.InteractionEvent):ReturnType<InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>['update']>;/**\n * Handle cancellation of a drag event for one of the resizing handles\n */protected _onHandleDragCancel(event:PIXI.InteractionEvent):void;/**\n * Apply a vectorized rescaling transformation for the drawing data\n * @param original - The original drawing data\n * @param dx       - The pixel distance dragged in the horizontal direction\n * @param dy       - The pixel distance dragged in the vertical direction\n */protected _rescaleDimensions(original:Pick<foundry.data.DrawingData['_source'],'x'|'y'|'points'|'width'|'height'>,dx:number,dy:number):Pick<foundry.data.DrawingData['_source'],'x'|'y'|'width'|'height'|'points'>;/**\n * Adjust the location, dimensions, and points of the Drawing before committing the change\n * @param data - The Drawing data pending update\n * @returns The adjusted data\n * @remarks This is intentionally public because it is called by the DrawingsLayer\n */static normalizeShape(data:Pick<foundry.data.DrawingData['_source'],'x'|'y'|'width'|'height'|'points'>):Pick<foundry.data.DrawingData['_source'],'x'|'y'|'width'|'height'|'points'>;/**\n * @deprecated since 0.8.0\n */get author():InstanceType<ConfiguredDocumentClass<typeof User>>;/**\n * @deprecated since 0.8.0\n */get owner():boolean;}}"
    ]
  