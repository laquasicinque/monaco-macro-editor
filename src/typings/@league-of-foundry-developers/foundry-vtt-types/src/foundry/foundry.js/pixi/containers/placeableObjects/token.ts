
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\token.d.ts",
      "import{ConfiguredDocumentClass,ConfiguredDocumentClassForName}from'../../../../../types/helperTypes';import{DocumentModificationOptions}from'../../../../common/abstract/document.mjs';declare global{/**\n * A Token is an implementation of PlaceableObject which represents an Actor within a viewed Scene on the game canvas.\n * @see TokenDocument\n * @see TokenLayer\n */class Token extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>>{/**\n * A Ray which represents the Token's current movement path\n */protected _movement:Ray|null;/**\n * An Object which records the Token's prior velocity dx and dy\n * This can be used to determine which direction a Token was previously moving\n */protected _velocity:Token.Velocity;/**\n * The Token's most recent valid position\n */protected _validPosition:{x:number;y:number};/**\n * Track the set of User entities which are currently targeting this Token\n */\ntargeted:Set<User>;/**\n * A reference to the PointSource object which defines this vision source area of effect\n */\nvision:PointSource;/**\n * A reference to the PointSource object which defines this light source area of effect\n */\nlight:PointSource;/** @override */static get embeddedName():'Token';/**\n * Establish an initial velocity of the token based on it's direction of facing.\n * Assume the Token made some prior movement towards the direction that it is currently facing.\n */protected _getInitialVelocity():Token.Velocity;/**\n * A convenient reference to the Actor object associated with the Token embedded document.\n */get actor():this['document']['actor'];/**\n * A convenient reference for whether the current User has full control over the Token document.\n */get owner():boolean;get isOwner():boolean;/**\n * A boolean flag for whether the current game User has observer permission for the Token\n */get observer():boolean;/**\n * Is the HUD display active for this token?\n */get hasActiveHUD():boolean;/**\n * Convenience access to the token's nameplate string\n * @remarks\n * This is actually a getter that returns data.name\n */readonly name:string;/**\n * Translate the token's grid width into a pixel width based on the canvas size\n */get w():number;/**\n * Translate the token's grid height into a pixel height based on the canvas size\n */get h():number;/**\n * The Token's current central position\n */get center():ReturnType<this['getCenter']>;/**\n * An indicator for whether or not this token is currently involved in the active combat encounter.\n */get inCombat():boolean;/**\n * Return a reference to a Combatant that represents this Token, if one is present in the current encounter.\n */get combatant():InstanceType<ConfiguredDocumentClass<typeof Combatant>>|null;/**\n * An indicator for whether the Token is currently targeted by the active game User\n */get isTargeted():boolean;/**\n * Determine whether the Token is visible to the calling user's perspective.\n * Hidden Tokens are only displayed to GM Users.\n * Non-hidden Tokens are always visible if Token Vision is not required.\n * Controlled tokens are always visible.\n * All Tokens are visible to a GM user if no Token is controlled.\n *\n * @see {@link SightLayer#testVisibility}\n */get isVisible():boolean;/**\n * Test whether the Token has sight (or blindness) at any radius\n */get hasSight():boolean;/**\n * Test whether the Token emits light (or darkness) at any radius\n */get emitsLight():boolean;/**\n * Test whether the Token has a limited angle of vision or light emission which would require sight to update on Token rotation\n */get hasLimitedVisionAngle():boolean;/**\n * Translate the token's sight distance in units into a radius in pixels.\n * @returns The sight radius in pixels\n */get dimRadius():number;/**\n * Translate the token's bright light distance in units into a radius in pixels.\n * @returns The bright radius in pixels\n */get brightRadius():number;/**\n * The named identified for the source object associated with this Token\n */get sourceId():string;/**\n * Update the light and vision source objects associated with this Token\n * @param defer       - Defer refreshing the SightLayer to manually call that refresh later.\n *                      (default: `false`)\n * @param deleted     - Indicate that this light source has been deleted.\n *                      (default: `false`)\n * @param noUpdateFog - Never update the Fog exploration progress for this update.\n *                      (default: `false`)\n */\nupdateSource({defer,deleted,noUpdateFog}?:{defer?:boolean;deleted?:boolean;noUpdateFog?:boolean}):void;/**\n * Test whether this Token is a viable vision source for the current User\n */protected _isVisionSource():boolean;/** @override */\ndraw():Promise<this>;/**\n * Apply initial sanitizations to the provided input data to ensure that a Token has valid required attributes.\n */protected _cleanData():void;/**\n * Draw resource bars for the Token\n */protected _drawAttributeBars():PIXI.Container;/**\n * Draw the Sprite icon for the Token\n */protected _drawIcon():Promise<PIXI.Sprite>;/**\n * Update display of the Token, pulling latest data and re-rendering the display of Token components\n */\nrefresh():this;/**\n * Draw the Token border, taking into consideration the grid type and border color\n */protected _refreshBorder():void;/**\n * Get the hex color that should be used to render the Token border\n * @returns The hex color used to depict the border color\n */protected _getBorderColor():number|null;/**\n * Refresh the target indicators for the Token.\n * Draw both target arrows for the primary User as well as indicator pips for other Users targeting the same Token.\n */protected _refreshTarget():void;/**\n * Refresh the display of Token attribute bars, rendering latest resource data\n * If the bar attribute is valid (has a value and max), draw the bar. Otherwise hide it.\n */\ndrawBars():void;/**\n * Draw a single resource bar, given provided data\n * @param number - The Bar number\n * @param bar    - The Bar container\n * @param data   - Resource data for this bar\n */protected _drawBar(number:number,bar:PIXI.Graphics,data:ReturnType<Token['getBarAttribute']>):void;/**\n * Draw the token's nameplate as a text object\n * @returns The Text object for the Token nameplate\n */protected _drawNameplate():PreciseText;/**\n * Draw a text tooltip for the token which can be used to display Elevation or a resource value\n */\ndrawTooltip():void;/**\n * Return the text which should be displayed in a token's tooltip field\n */protected _getTooltipText():string;protected _getTextStyle():PIXI.TextStyle;/**\n * Draw the active effects and overlay effect icons which are present upon the Token\n */\ndrawEffects():Promise<void>;/**\n * Draw the overlay effect icon\n */protected _drawOverlay({src,tint}?:{src?:string;tint?:number}):Promise<void>;/**\n * Draw a status effect icon\n */protected _drawEffect(src:string,i:number,bg:PIXI.Graphics,w:number,tint:number):Promise<void>;/**\n * Helper method to determine whether a token attribute is viewable under a certain mode\n * @param mode - The mode from CONST.TOKEN_DISPLAY_MODES\n * @returns Is the attribute viewable?\n */protected _canViewMode(mode:foundry.CONST.TokenDisplayMode):boolean;/**\n * Animate Token movement along a certain path which is defined by a Ray object\n * @param ray - The path along which to animate Token movement\n */\nanimateMovement(ray:Ray):Promise<void>;/**\n * Animate the continual revealing of Token vision during a movement animation\n */protected _onMovementFrame(dt:number,anim:Array<{context:unknown;name:string|null;duration:number;ontick:(dt:number,attributes:CanvasAnimation.Attribute[])=>void;}>,config:{fog?:boolean;sound?:boolean;source?:boolean}):void;/**\n * Update perception each frame depending on the animation configuration\n * @param source - (default: `false`)\n * @param sound  - (default: `false`)\n * @param fog    - (default: `false`)\n */protected _animatePerceptionFrame({source,sound,fog}?:{source?:boolean;sound?:boolean;fog?:boolean;}):void;/**\n * Terminate animation of this particular Token\n */\nstopAnimation():void;/**\n * Check for collision when attempting a move to a new position\n * @param destination - The destination point of the attempted movement\n * @returns A true/false indicator for whether the attempted movement caused a collision\n */\ncheckCollision(destination:Point):boolean;/**\n * @param releaseOthers - (default: `true`)\n * @param pan           - (default: `false`)\n */protected _onControl({releaseOthers,pan}?:{releaseOthers?:boolean;pan?:boolean}):void;/** @override */protected _onRelease(options:PlaceableObject.ReleaseOptions):Promise<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>>|undefined;/**\n * Get the center-point coordinate for a given grid position\n * @param x - The grid x-coordinate that represents the top-left of the Token\n * @param y - The grid y-coordinate that represents the top-left of the Token\n * @returns The coordinate pair which represents the Token's center at position (x, y)\n */\ngetCenter(x:number,y:number):{x:number;y:number;};/**\n * Set the token's position by comparing its center position vs the nearest grid vertex\n * Return a Promise that resolves to the Token once the animation for the movement has been completed\n * @param x       - The x-coordinate of the token center\n * @param y       - The y-coordinate of the token center\n * @param options - Additional options which configure the token movement\n *                  (defaultValue: `{}`)\n * @returns The Token after animation has completed\n */\nsetPosition(x:number,y:number,options?:PositionOptions):Promise<this>;/**\n * Update the Token velocity auto-regressively, shifting increasing weight towards more recent movement\n * Employ a magic constant chosen to minimize (effectively zero) the likelihood of trigonometric edge cases\n * @param ray - The proposed movement ray\n * @returns An updated velocity with directional memory\n */protected _updateVelocity(ray:Ray):Token.Velocity;/**\n * Set this Token as an active target for the current game User\n * @param targeted       - Is the Token now targeted?\n *                         (default: `true`)\n * @param user           - Assign the token as a target for a specific User\n *                         (default: `null` which will use the current user)\n * @param releaseOthers  - Release other active targets for the same player?\n *                         (default: `true`)\n * @param groupSelection - Is this target being set as part of a group selection workflow?\n *                         (default: `false`)\n */\nsetTarget(targeted?:boolean,{user,releaseOthers,groupSelection}?:{user?:InstanceType<ConfiguredDocumentClass<typeof User>>|null;releaseOthers?:boolean;groupSelection?:boolean;}):void;/**\n * Add or remove the currently controlled Tokens from the active combat encounter\n * @param combat - A specific combat encounter to which this Token should be added\n * @returns The Token which initiated the toggle\n */\ntoggleCombat(combat?:InstanceType<ConfiguredDocumentClass<typeof Combat>>):Promise<this>;/**\n * Toggle an active effect by it's texture path.\n * Copy the existing Array in order to ensure the update method detects the data as changed.\n *\n * @param effect  - The texture file-path of the effect icon to toggle on the Token.\n * @param options - Additional optional arguments which configure how the effect is handled.\n *                  (defaultValue: `{}`)\n * @returns Was the texture applied (true) or removed (false)\n */\ntoggleEffect(effect:string|ConstructorParameters<ConfiguredDocumentClassForName<'ActiveEffect'>>[0],options?:EffectToggleOptions):Promise<boolean>;/**\n * A helper function to toggle a status effect which includes an Active Effect template\n */protected _toggleActiveEffect(effectData:ConstructorParameters<ConfiguredDocumentClassForName<'ActiveEffect'>>[0],{overlay}?:{overlay?:boolean}):Promise<boolean>;/**\n * A helper function to toggle the overlay status icon on the Token\n */protected _toggleOverlayEffect(texture:string,{active}?:{active:boolean}):Promise<this>;/**\n * Toggle the visibility state of any Tokens in the currently selected set\n * @returns A Promise which resolves to the updated Token documents\n */\ntoggleVisibility():Promise<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[]>;/**\n * Return the token's sight origin, tailored for the direction of their movement velocity to break ties with walls\n */\ngetSightOrigin():{x:number;y:number;};/**\n * A generic transformation to turn a certain number of grid units into a radius in canvas pixels.\n * This function adds additional padding to the light radius equal to half the token width.\n * This causes light to be measured from the outer token edge, rather than from the center-point.\n * @param units - The radius in grid units\n * @returns The radius in canvas units\n */\ngetLightRadius(units:number):number;/** @override */protected _getShiftedPosition(dx:number,dy:number):{x:number;y:number};/**\n * Extend the PlaceableObject.rotate method to prevent rotation if the Token is in the midst of a movement animation\n * @returns Actually a Promise<void>\n */\nrotate(angle:number,snap:number):Promise<this>;/** @override */protected _onCreate(options:InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source'],userId:DocumentModificationOptions):void;/** @override */protected _onUpdate(data?:DeepPartial<InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source']>,options?:DocumentModificationOptions&{animate?:boolean},userId?:string):void;/** @override */protected _onDelete(options?:DocumentModificationOptions,userId?:string):void;/** @override */protected _canControl(user?:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:PIXI.InteractionEvent):boolean;/** @override */protected _canHUD(user:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:PIXI.InteractionEvent):boolean;/** @override */protected _canConfigure(user?:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:PIXI.InteractionEvent):true;/** @override */protected _canHover(user?:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:PIXI.InteractionEvent):true;/** @override */protected _canView(user?:InstanceType<ConfiguredDocumentClass<typeof User>>,event?:PIXI.InteractionEvent):boolean;/** @override */protected _canDrag(user:InstanceType<ConfiguredDocumentClass<typeof User>>,event:PIXI.InteractionEvent):boolean;/** @override */protected _onHoverIn(event:PIXI.InteractionEvent,options?:{hoverOutOthers?:boolean}):void;/** @override */protected _onHoverOut(event:PIXI.InteractionEvent):false|void;/** @override */protected _onClickLeft(event:PIXI.InteractionEvent):void;/** @override */protected _onClickLeft2(event?:PIXI.InteractionEvent):void;/** @override */protected _onClickRight2(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<any>;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/**\n * @deprecated since 0.8.0\n */static fromActor(actor:InstanceType<ConfiguredDocumentClass<typeof Actor>>,tokenData?:InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>['data']['_source']):never;/**\n * @deprecated since 0.8.0\n */\ngetBarAttribute(barName:string,{alternative}?:{alternative?:string}):ReturnType<this['document']['getBarAttribute']>;/**\n * @remarks This does not exist in foundry. It marks the controlIcon as not used because `Token` does never store a value here.\n */\ncontrolIcon:null;}namespace Token{interface Bar{attribute:string;}interface Velocity{dx:number;sx:number;dy:number;sy:number;}}}interface PositionOptions{/**\n * Animate the movement path\n * @defaultValue `true`\n */\nanimate?:boolean;}interface EffectToggleOptions{/**\n * Force a certain active state for the effect\n * @defaultValue `false`\n */\nactive?:boolean;/**\n * Whether to set the effect as the overlay effect?\n * @defaultValue `false`\n */\noverlay?:boolean;}"
    ]
  