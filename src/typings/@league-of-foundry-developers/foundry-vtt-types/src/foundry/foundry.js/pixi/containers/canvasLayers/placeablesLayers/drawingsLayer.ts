
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\placeablesLayers\\drawingsLayer.d.ts",
      "/**\n * The DrawingsLayer subclass of PlaceablesLayer.\n * This layer implements a container for drawings which are rendered immediately above the BackgroundLayer.\n */declare class DrawingsLayer extends PlaceablesLayer<'Drawing',DrawingsLayer.LayerOptions>{/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['drawings'];/**\n * @override\n * @defaultValue\n * ```\n * mergeObject(super.layerOptions, {\n *   name: \"drawings\"\n *   canDragCreate: true,\n *   controllableObjects: true,\n *   rotatableObjects: true,\n *   zIndex: 20\n * })\n * ```\n */static get layerOptions():DrawingsLayer.LayerOptions;/** @override */static documentName:'Drawing';/**\n * The named game setting which persists default drawing configuration for the User\n */static DEFAULT_CONFIG_SETTING:'defaultDrawingConfig';/**\n * Use an adaptive precision depending on the size of the grid\n */get gridPrecision():0|8|16;/** @override */get hud():Exclude<Canvas['hud'],null>['drawing'];/**\n * Render a configuration sheet to configure the default Drawing settings\n */\nconfigureDefault():void;/**\n * Override the deactivation behavior of this layer.\n * Placeables on this layer remain visible even when the layer is inactive.\n */\ndeactivate():this;/**\n * Get initial data for a new drawing.\n * Start with some global defaults, apply user default config, then apply mandatory overrides per tool.\n * @param origin - The initial coordinate\n * @returns The new drawing data\n * @remarks This is used from DrawingConfig and hence public on purpose.\n */\n_getNewDrawingData(origin:Point|{}):NewDrawingData;/** @override */protected _onClickLeft(event:PIXI.InteractionEvent):void;/** @override */protected _onClickLeft2(event:PIXI.InteractionEvent):void|Promise<void>;/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):ReturnType<Drawing['draw']>;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/**\n * Handling of mouse-up events which conclude a new object creation after dragging\n */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<void>;/** @override */protected _onDragLeftCancel(event:PointerEvent):void;/** @override */protected _onClickRight(event:PIXI.InteractionEvent):void;}declare namespace DrawingsLayer{interface LayerOptions extends PlaceablesLayer.LayerOptions<'Drawing'>{name:'drawings';canDragCreate:true;controllableObjects:true;rotatableObjects:true;zIndex:20;}}type NewDrawingData=ClientSettings.Values['core.defaultDrawingConfig']&(|{type:typeof foundry.CONST.DRAWING_TYPES.RECTANGLE|typeof foundry.CONST.DRAWING_TYPES.ELLIPSE;points:[];}|{type:typeof foundry.CONST.DRAWING_TYPES.POLYGON;points:PointArray[];}|{type:typeof foundry.CONST.DRAWING_TYPES.FREEHAND;points:PointArray[];bezierFactor:number;}|{type:typeof foundry.CONST.DRAWING_TYPES.TEXT;fillColor:string;fillAlpha:number;strokeColor:string;text:string;})&{author:string;fillColor:string;strokeColor:string;fontFamily:typeof CONFIG.defaultFontFamily;x:number|undefined;y:number|undefined;};"
    ]
  