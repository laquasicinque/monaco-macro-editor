
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\tile.d.ts",
      "import type{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{/**\n * A Tile is an implementation of PlaceableObject which represents a static piece of artwork or prop within the Scene.\n * Tiles are drawn above the {@link BackgroundLayer} but below the {@link TokenLayer}.\n *\n * @example\n * ```typescript\n * Tile.create<Tile>({\n *   img: \"path/to/tile-artwork.png\",\n *   width: 300,\n *   height: 300,\n *   scale: 1,\n *   x: 1000,\n *   y: 1000,\n *   z: 370,\n *   rotation: 45,\n *   hidden: false,\n *   locked: true\n * });\n * ```\n *\n * @see {@link TilesLayer}\n * @see {@link TileSheet}\n * @see {@link TileHUD}\n */class Tile extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof TileDocument>>>{/**\n * @remarks Not used for `Tile`\n */\ncontrolIcon:null;/**\n * The Tile border frame\n */\nframe:PIXI.Container|null;/**\n * The Tile image container\n */\ntile:PIXI.Container|null;/**\n * The primary tile image texture\n */\ntexture:PIXI.Texture|null;/** @override */static get embeddedName():'Tile';/**\n * Apply initial sanitizations to the provided input data to ensure that a Tile has valid required attributes.\n */protected _cleanData():void;/**\n * @remarks\n * Not implemented by Tile\n */get bounds():never;/**\n * Get the native aspect ratio of the base texture for the Tile sprite\n */get aspectRatio():number;/** @override */\ndraw():Promise<this>;/** @override */\nrefresh():this;/**\n * Refresh the display of the Tile border\n */protected _refreshBorder(b:Rectangle):void;/**\n * Refresh the display of the Tile resizing handle\n */protected _refreshHandle(b:Rectangle):void;/** @override */\nactivateListeners():void;/** @override */protected _onUpdate(data:Tile.Data):void;/** @override */protected _canHUD(user?:User,event?:any):boolean;/** @override */protected _canConfigure(user:User,event?:any):boolean;/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<unknown>;/** @override */protected _onDragLeftCancel(event:MouseEvent):void;/**\n * Handle mouse-over event on a control handle\n * @param event - The mouseover event\n */protected _onHandleHoverIn(event:PIXI.InteractionEvent):void;/**\n * Handle mouse-out event on a control handle\n * @param event - The mouseout event\n */protected _onHandleHoverOut(event:PIXI.InteractionEvent):void;/**\n * When we start a drag event - create a preview copy of the Tile for re-positioning\n * @param event - The mousedown event\n */protected _onHandleMouseDown(event:PIXI.InteractionEvent):void;/**\n * Handle the beginning of a drag event on a resize handle\n */protected _onHandleDragStart(event:PIXI.InteractionEvent):void;/**\n * Handle mousemove while dragging a tile scale handler\n * @param event - The mousemove event\n */protected _onHandleDragMove(event:PIXI.InteractionEvent):void;/**\n * Handle mouseup after dragging a tile scale handler\n * @param event - The mouseup event\n */protected _onHandleDragDrop(event:PIXI.InteractionEvent):Promise<this>;/**\n * Handle cancellation of a drag event for one of the resizing handles\n */protected _onHandleDragCancel(event:PIXI.InteractionEvent):void;/**\n * Create a preview tile with a background texture instead of an image\n */static createPreview(data:Tile.Data):Tile;}namespace Tile{interface Data{height:number;hidden:boolean;img:string;locked:boolean;rotation:number;scale:number;width:number;x:number;y:number;z:number;}}}"
    ]
  