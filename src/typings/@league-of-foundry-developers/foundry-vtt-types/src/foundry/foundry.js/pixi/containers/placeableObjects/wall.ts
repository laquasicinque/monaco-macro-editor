
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\placeableObjects\\wall.d.ts",
      "import type{ConfiguredDocumentClass}from'../../../../../types/helperTypes';declare global{/**\n * A Wall is an implementation of PlaceableObject which represents a physical or visual barrier within the Scene.\n * Walls are used to restrict Token movement or visibility as well as to define the areas of effect for ambient lights\n * and sounds.\n *\n * @see {@link WallsLayer}\n * @see {@link WallConfig}\n *\n * @example\n * ```typescript\n * Wall.create<Wall>({\n *  c = [100, 200, 400, 600],\n *  move: CONST.WALL_MOVEMENT_TYPES.NORMAL,\n *  sense: CONST.WALL_SENSE_TYPES.NORMAL,\n *  dir: CONST.WALL_DIRECTIONS.BOTH,\n *  door: CONST.WALL_DOOR_TYPES.DOOR,\n *  ds: CONST.WALL_DOOR_STATES.CLOSED\n * });\n * ```\n */class Wall extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof WallDocument>>>{/**\n * @remarks Not used for `Wall`\n */\ncontrolIcon:null;/**\n * @remarks Type is `MouseInteractionManager<this, this['endpoints']>`\n */\nmouseInteractionManager:MouseInteractionManager<this,any>|null;/**\n * An reference the Door Control icon associated with this Wall, if any\n */protected doorControl:DoorControl|null;/** @override */static get embeddedName():'Wall';/**\n * A convenience reference to the coordinates Array for the Wall endpoints, [x0,y0,x1,y1].\n */get coords():Wall.Data['c'];/** @override */get bounds():NormalizedRectangle;/**\n * Return the coordinates [x,y] at the midpoint of the wall segment\n */get midpoint():[number,number];/** @override */get center():PIXI.Point;/**\n * Get the direction of effect for a directional Wall\n * @returns The angle of wall effect\n */get direction():number|null;/**\n * This helper converts the wall segment to a Ray\n * @returns The wall in Ray representation\n */\ntoRay():Ray;/** @override */\ndraw():Promise<this>;endpoints:PIXI.Graphics;/** @override */protected _createInteractionManager():NonNullable<this['mouseInteractionManager']>;/** @override */\nactivateListeners():void;/**\n * Draw a directional prompt icon for one-way walls to illustrate their direction of effect.\n * @returns The drawn icon\n */protected _drawDirection():PIXI.Sprite|void;/** @override */\nrefresh():this;/**\n * Compute an approximate Polygon which encloses the line segment providing a specific hitArea for the line\n * @param coords - The original wall coordinates\n * @param pad    - The amount of padding to apply\n * @returns A constructed Polygon for the line\n */protected _getWallHitPolygon(coords:[number,number,number,number],pad:number):PIXI.Polygon;/**\n * Given the properties of the wall - decide upon a color to render the wall for display on the WallsLayer\n */protected _getWallColor():number;/** @override */protected _onControl({chain}?:PlaceableObject.ControlOptions&{chain?:boolean}):void;/** @override */protected _onRelease():void;/** @override */\ndestroy(options?:{children?:boolean;texture?:boolean;baseTexture?:boolean}):void;/**\n * Test whether the Wall direction lies between two provided angles\n * This test is used for collision and vision checks against one-directional walls\n */\nisDirectionBetweenAngles(lower:number,upper:number):boolean;/**\n * A simple test for whether a Ray can intersect a directional wall\n * @param ray - The ray to test\n * @returns Can an intersection occur?\n */\ncanRayIntersect(ray:Ray):boolean;/**\n * Get an Array of Wall objects which are linked by a common coordinate\n * @returns An object reporting ids and endpoints of the linked segments\n */\ngetLinkedSegments():{ids:string;walls:Wall[];endpoints:Array<[number,number]>;};/** @override */protected _onCreate():void;/** @override */protected _onUpdate(changed:DeepPartial<foundry.data.WallData>,options?:any,userId?:string):void;/** @override */protected _onDelete():void;/**\n * Callback actions when a wall that contains a door is moved or its state is changed\n * @param doorChange - Update vision and sound restrictions\n */protected _onModifyWall(doorChange?:boolean):Promise<void>;/** @override */protected _canControl(user?:User,event?:PIXI.InteractionEvent):boolean;/** @override */protected _onHoverIn(event:PIXI.InteractionEvent,options?:{hoverOutOthers:boolean}):void;/** @override */protected _onHoverOut(event:PIXI.InteractionEvent):void;/**\n * Handle mouse-hover events on the line segment itself, pulling the Wall to the front of the container stack\n */protected _onMouseOverLine(event:PIXI.InteractionEvent):void;/** @override */protected _onClickLeft(event:PIXI.InteractionEvent):boolean;/** @override */protected _onClickLeft2(event:PIXI.InteractionEvent):void;/** @override */protected _onClickRight2(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftStart(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftMove(event:PIXI.InteractionEvent):void;/** @override */protected _onDragLeftDrop(event:PIXI.InteractionEvent):Promise<any>;}namespace Wall{interface Data{/**\n * Coordinates of the endpoints\n */\nc:[number,number,number,number];/**\n * 0 - both\n * 1 - left\n * 2 - right\n */\ndir?:foundry.CONST.WallDirection;/**\n * 0 - wall\n * 1 - door\n * 2 - secret\n */\ndoor:foundry.CONST.WallDoorType;/**\n * 0 - closed\n * 1 - open\n * 2 - locked\n */\nds:foundry.CONST.WallDoorState;/**\n * 0 - blocked\n * 1 - allowed\n */\nmove:foundry.CONST.WallMovementType;/**\n * 0 - opaque\n * 1 - transparent\n * 2 - terrain\n */\nsense:foundry.CONST.WallSenseType;}}}"
    ]
  