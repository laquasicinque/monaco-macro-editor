
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pixi\\containers\\canvasLayers\\effectsLayer.d.ts",
      "/**\n * A CanvasLayer for displaying visual effects like weather, transitions, flashes, or more\n */declare class EffectsLayer extends CanvasLayer<EffectsLayer.LayerOptions>{/**\n * The weather overlay container\n * @defaultValue `undefined`\n */\nweather:PIXI.Container|undefined;/**\n * The currently active weather effect\n * @defaultValue `undefined`\n */\nweatherEffect:SpecialEffect|undefined;/**\n * Track any active emitters within this Scene\n * @defaultValue `[]`\n */\nemitters:PIXI.particles.Emitter[];/**\n * An occlusion filter that prevents weather from being displayed in certain regions\n * @defaultValue `undefined`\n */\nweatherOcclusionFilter:AbstractBaseMaskFilter|undefined;/**\n * @remarks This is not overridden in foundry but reflects the real behavior.\n */static get instance():Canvas['effects'];/**\n * @defaultValue\n * ```typescript\n * foundry.utils.mergeObject(super.layerOptions, {\n *  name: \"effects\",\n *  zIndex: 700\n * })\n * ```\n */static get layerOptions():EffectsLayer.LayerOptions;/** @override */\ntearDown():Promise<this>;/** @override */\ndraw():Promise<undefined>;/**\n * Draw the weather container.\n * @returns The weather container, or null if no effect is present\n */\ndrawWeather():Exclude<this['weather'],undefined>|null;}declare namespace EffectsLayer{interface LayerOptions extends CanvasLayer.LayerOptions{name:'effects';zIndex:700;}}"
    ]
  