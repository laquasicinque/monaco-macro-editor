
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\avClients\\simplePeerAVClient.d.ts",
      "/**\n * An implementation of the AVClient which uses the simple-peer library and the Foundry socket server for signaling.\n * Credit to bekit#4213 for identifying simple-peer as a viable technology and providing a POC implementation.\n */declare class SimplePeerAVClient extends AVClient{/**\n * The local Stream which captures input video and audio\n * @defaultValue `null`\n */\nlocalStream:MediaStream|null;/**\n * A mapping of connected peers\n */\npeers:Map<string,SimplePeer.Instance>;/**\n * A mapping of connected remote streams\n */\nremoteStreams:Map<string,MediaStream>;/**\n * Has the client been successfully initialized?\n * @defaultValue `false`\n * @internal\n */\n_initialized:boolean;/**\n * Is outbound broadcast of local audio enabled?\n * @defaultValue `false`\n */\naudioBroadcastEnabled:boolean;/** @override */\nconnect():Promise<boolean>;/** @override */\ndisconnect():Promise<boolean>;/** @override */\ninitialize():Promise<void>;/** @override */\ngetConnectedUsers():string[];/** @override */\ngetMediaStreamForUser(userId:string):MediaStream|null|undefined;/** @override */\nisAudioEnabled():boolean;/** @override */\nisVideoEnabled():boolean;/** @override */\ntoggleAudio(enable:boolean):void;/** @override */\ntoggleBroadcast(broadcast:boolean):void;/** @override */\ntoggleVideo(enable:boolean):void;/** @override */\nsetUserVideo(userId:string,videoElement:HTMLVideoElement):Promise<void>;/**\n * Initialize a local media stream for the current user\n */\ninitializeLocalStream():Promise<MediaStream|null>;/**\n * Listen for Audio/Video updates on the av socket to broker connections between peers\n */\nactivateSocketListeners():void;/**\n * Initialize a stream connection with a new peer\n * @param userId - The Foundry user ID for which the peer stream should be established\n * @returns A Promise which resolves once the peer stream is initialized\n */\ninitializePeerStream(userId:string):Promise<SimplePeer.Instance>;/**\n * Receive a request to establish a peer signal with some other User id\n * @param userId - The Foundry user ID who is requesting to establish a connection\n * @param data   - The connection details provided by SimplePeer\n */\nreceiveSignal(userId:string,data:SimplePeer.SignalData):void;/**\n * Connect to a peer directly, either as the initiator or as the receiver\n * @param userId      - The Foundry user ID with whom we are connecting\n * @param isInitiator - Is the current user initiating the connection, or responding to it?\n *                      (default: `false`)\n * @returns The constructed and configured SimplePeer instance\n */\nconnectPeer(userId:string,isInitiator?:boolean):SimplePeer.Instance;/**\n * Create the SimplePeer instance for the desired peer connection.\n * Modules may implement more advanced connection strategies by overriding this method.\n * @param userId      - The Foundry user ID with whom we are connecting\n * @param isInitiator - Is the current user initiating the connection, or responding to it?\n * @internal\n */\n_createPeerConnection(userId:string,isInitiator:boolean):SimplePeer.Instance;/**\n * Setup the custom TURN relay to be used in subsequent calls if there is one configured.\n * TURN credentials are mandatory in WebRTC.\n * @param options - The SimplePeer configuration object.\n * @internal\n */\n_setupCustomTURN(options:SimplePeer.Options):void;/**\n * Disconnect from a peer by stopping current stream tracks and destroying the SimplePeer instance\n * @param userId - The Foundry user ID from whom we are disconnecting\n * @returns A Promise which resolves once the disconnection is complete\n */\ndisconnectPeer(userId:string):Promise<void>;/**\n * Disconnect from all current peer streams\n * @returns A Promise which resolves once all peers have been disconnected\n */\ndisconnectAll():Promise<Array<void>>;/** @override */\nonSettingsChanged(changed:DeepPartial<AVSettings.Settings>):Promise<void>;/**\n * Replace the local stream for each connected peer with a re-generated MediaStream\n */\nupdateLocalStream():Promise<void>;}"
    ]
  