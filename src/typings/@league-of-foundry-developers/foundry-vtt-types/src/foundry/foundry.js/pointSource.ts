
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\pointSource.d.ts",
      "/**\n * A helper class used by the Sight Layer to represent a source of vision or illumination.\n */declare class PointSource{constructor();/**\n * The light or darkness container for this source\n */\nillumination:PIXI.Container;/**\n * This visible color container for this source\n */\ncoloration:PIXI.Container;/**\n * A flag for whether this source is currently active (rendered) or not\n * @defaultValue `false`\n */\nactive:boolean;/**\n * Internal flag for whether this is a darkness source\n * @defaultValue `false`\n */\ndarkness:boolean;/**\n * Is the light source limited by an angle of emission?\n * @defaultValue `false`\n */\nlimited:boolean;/**\n * The maximum radius of emission for this source\n * @defaultValue `0`\n */\nradius:number;/**\n * Internal flag for animation throttling time\n * @defaultValue `0`\n */protected _animateTime:number;/**\n * An integer seed which de-synchronizes otherwise similar animations\n * @defaultValue `null`\n */protected _animateSeed:number|null;/**\n * A flag for whether to re-initialize illumination shader uniforms the next time the light is rendered.\n * @defaultValue `true`\n */protected _resetIlluminationUniforms:boolean;/**\n * A flag for whether to re-initialize coloration shader uniforms the next time the light is rendered.\n * @defaultValue `true`\n */protected _resetColorationUniforms:boolean;/**\n * The x-coordinate of the source location\n * @defaultValue `undefined`\n */\nx?:number;/**\n * The y-coordinate of the source location\n * @defaultValue `undefined`\n */\ny?:number;/**\n * An optional z-index sorting for the source\n * @defaultValue `undefined`\n */\nz?:number|null;/**\n * The allowed radius of dim vision or illumination\n * @defaultValue `undefined`\n */\ndim?:number;/**\n * The allowed radius of bright vision or illumination\n * @defaultValue `undefined`\n */\nbright?:number;/**\n * The angle of emission for this point source\n * @defaultValue `undefined`\n */\nangle?:number;/**\n * The angle of rotation for this point source\n * @defaultValue `undefined`\n */\nrotation?:number;/**\n * A tint color for the emitted light, if any\n * @defaultValue `undefined`\n */\ncolor?:number|null;/**\n * An opacity for the emitted light, if any\n * @defaultValue `undefined`\n */\nalpha?:number;/**\n * A level of darkness beyond which this light is active\n * @defaultValue `undefined`\n */\ndarknessThreshold?:number;/**\n * The source type from {@link SOURCE_TYPES}\n * @defaultValue `undefined`\n */type?:foundry.CONST.SourceType;/**\n * An animation configuration for the source\n * @defaultValue `undefined`\n */\nanimation?:PointSource.Animation;/**\n * An integer seed to synchronize (or de-synchronize) animations\n * @defaultValue `undefined`\n */\nseed?:number;/**\n * @defaultValue `undefined`\n */\ncolorRGB?:[number,number,number];/**\n * @defaultValue `undefined`\n */\nratio?:number;/**\n * @defaultValue `undefined`\n */\nfov?:PIXI.Polygon;/**\n * @defaultValue `undefined`\n */\nlos?:PIXI.Polygon;/**\n * Create the structure of a source Container which can be rendered to the sight layer shadow-map\n * @returns The constructed light source container\n */protected _createContainer(shaderCls:ConstructorOf<AbstractBaseShader>):PIXI.Container;/**\n * Initialize the source with provided object data.\n *\n * @param x                 - The x-coordinate of the source location\n *                            (default: `0`)\n * @param y                 - The y-coordinate of the source location\n *                            (default: `0`)\n * @param z                 - An optional z-index sorting for the source\n *                            (default: `null`)\n * @param dim               - The allowed radius of dim vision or illumination\n *                            (default: `0`)\n * @param bright            - The allowed radius of bright vision or illumination\n *                            (default: `0`)\n * @param angle             - The angle of emission for this point source\n *                            (default: `360`)\n * @param rotation          - The angle of rotation for this point source\n *                            (default: `0`)\n * @param color             - A tint color for the emitted light, if any\n *                            (default: `null`)\n * @param alpha             - An opacity for the emitted light, if any\n *                            (default: `0.5`)\n * @param darknessThreshold - A level of darkness beyond which this light is active\n *                            (default: `0`)\n * @param type              - The source type from SOURCE_TYPES\n *                            (default: `SOURCE_TYPES.LOCAL`)\n * @param animation         - An animation configuration for the source\n *                            (default: `{type: null}`)\n * @param seed              - An integer seed to synchronize (or de-synchronize) animations\n *                            (default: `undefined`)\n *\n * @returns A reference to the initialized source\n */\ninitialize({x,y,z,dim,bright,angle,rotation,color,alpha,darknessThreshold,type,animation,seed}?:{x?:number;y?:number;z?:number|null;dim?:number;bright?:number;angle?:number;rotation?:number;color?:number|string|null;alpha?:number;darknessThreshold?:number;type?:string;animation?:PointSource.Animation;seed?:number;}):this;/**\n * Initialize the shaders used for this animation.\n * Reset the current shader values back to defaults.\n * Swap to a different Shader instance if necessary.\n */protected _initializeShaders():void;/**\n * Initialize the blend mode and vertical sorting of this source relative to others in the container.\n */protected _initializeBlending():void;/**\n * Draw the display of this source for the darkness/light container of the SightLayer.\n * @param updateChannels - Is this drawing initiated because lighting channels have changed?\n * @returns The rendered light container\n */\ndrawLight({updateChannels}?:{updateChannels?:boolean}):PIXI.Container;/**\n * Draw and return a container used to depict the visible color tint of the light source on the LightingLayer\n * @returns An updated color container for the source\n */\ndrawColor():PIXI.Container;/**\n * A common helper function for updating the display of a source container.\n * Assign the container position, dimensions, and polygons.\n */protected _drawContainer(c:PIXI.Container):PIXI.Container;/**\n * Animate the PointSource, if an animation is enabled and if it currently has rendered containers.\n * @param dt - Delta time\n */\nanimate(dt:number):void;/**\n * A torch animation where the luminosity and coloration decays each frame and is revitalized by flashes\n * @param dt        - Delta time\n * @param speed     - The animation speed, from 1 to 10\n * @param intensity - The animation intensity, from 1 to 10\n */\nanimateTorch:PointSource.AnimationFunction;/**\n * A basic \"pulse\" animation which expands and contracts.\n * @param dt        - Delta time\n * @param speed     - The animation speed, from 1 to 10\n * @param intensity - The animation intensity, from 1 to 10\n */\nanimatePulse:PointSource.AnimationFunction;/**\n * Emanate waves of light from the source origin point\n * @param dt        - Delta time\n * @param speed     - The animation speed, from 1 to 10\n * @param intensity - The animation intensity, from 1 to 10\n */\nanimateTime:PointSource.AnimationFunction;/**\n * Evolve a value using a stochastic AR(1) process\n * @param y      - The current value\n * @param phi    - The decay rate of prior values\n * @param center - The stationary mean of the series\n * @param sigma  - The volatility of the process - standard deviation of the error term\n * @param max    - The maximum allowed outcome, or null\n * @param min    - The minimum allowed outcome, or null\n * @returns The new value of the process\n */protected _ar1(y:number,{phi,center,sigma,max,min}:{phi?:number;center?:number;sigma?:number;max?:number|null;min?:number|null}):number;static GEOMETRY:PIXI.Geometry;}declare namespace PointSource{interface AnimationProperties{speed?:number;intensity?:number;}interface Animation extends AnimationProperties{type:null|keyof typeof CONFIG.Canvas.lightAnimations;}type AnimationFunction=(this:PointSource,dt:number,{speed,intensity}?:AnimationProperties)=>void;}"
    ]
  