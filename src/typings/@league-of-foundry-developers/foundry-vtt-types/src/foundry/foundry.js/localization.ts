
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\localization.d.ts",
      "import{ModuleData,SystemData}from'../common/packages.mjs';declare global{/**\n * A helper class which assists with localization and string translation\n */class Localization{/**\n * @param serverLanguage - The default language configuration setting for the server\n */constructor(serverLanguage?:string);/**\n * The target language for localization\n * @defaultValue `'en'`\n */\nlang:string;/**\n * The package authorized to provide default language configurations\n * @defaultValue `'core'`\n */\ndefaultModule:string;/**\n * The translation dictionary for the target language\n * @defaultValue `{}`\n */\ntranslations:Translations;/**\n * Fallback translations if the target keys are not found\n * @defaultValue `{}`\n */protected _fallback:Translations;/**\n * Initialize the Localization module\n * Discover available language translations and apply the current language setting\n * @returns A Promise which resolves once languages are initialized\n */\ninitialize():Promise<void>;/**\n * Set a language as the active translation source for the session\n * @param lang - A language string in CONFIG.supportedLanguages\n * @returns A Promise which resolves once the translations for the requested language are ready\n */\nsetLanguage(lang:string):Promise<void>;/**\n * Discover the available supported languages from the set of packages which are provided\n */protected _discoverSupportedLanguages():Record<string,string>;/**\n * Prepare the dictionary of translation strings for the requested language\n * @param lang - The language for which to load translations\n * @returns The retrieved translations object\n */protected _getTranslations(lang:string):Promise<Translations>;/**\n * Reduce the languages array provided by a package to an array of file paths of translations to load\n * @param pkg  - The package data\n * @param lang - The target language to filter on\n * @returns An array of translation file paths\n */protected _filterLanguagePaths(pkg:ModuleData|SystemData,lang:string):string[];/**\n * Load a single translation file and return its contents as processed JSON\n * @param src - The translation file path to load\n * @returns The loaded translation dictionary\n */protected _loadTranslationFile(src:string):Promise<Translations>;/**\n * Return whether a certain string has a known translation defined.\n * @param stringId - The string key being translated\n * @param fallback - Allow fallback translations to count?\n *                   (unused)\n */\nhas(stringId:string,fallback?:boolean):boolean;/**\n * Localize a string by drawing a translation from the available translations dictionary, if available\n * If a translation is not available, the original string is returned\n * @param stringId - The string ID to translate\n * @returns The translated string\n *\n * @example <caption>Localizing a simple string in JavaScript</caption>\n * ```typescript\n * {\n *   \"MYMODULE.MYSTRING\": \"Hello, this is my module!\"\n * }\n * game.i18n.localize(\"MYMODULE.MYSTRING\"); // Hello, this is my module!\n * ```\n *\n * @example <caption>Localizing a simple string in Handlebars</caption>\n * ```handlebars\n * {{localize \"MYMODULE.MYSTRING\"}} <!-- Hello, this is my module! -->\n * ```\n */\nlocalize(stringId:string):string;/**\n * Localize a string including variable formatting for input arguments.\n * Provide a string ID which defines the localized template.\n * Variables can be included in the template enclosed in braces and will be substituted using those named keys.\n *\n * @param stringId - The string ID to translate\n * @param data     - Provided input data\n *                   (defaultValue: `{}`)\n * @returns The translated and formatted string\n *\n * @example <caption>Localizing a formatted string in JavaScript</caption>\n * ```typescript\n * {\n *   \"MYMODULE.GREETING\": \"Hello {name}, this is my module!\"\n * }\n * game.i18n.format(\"MYMODULE.GREETING\" {name: \"Andrew\"}); // Hello Andrew, this is my module!\n * ```\n *\n * @example <caption>Localizing a formatted string in Handlebars</caption>\n * ```handlebars\n * {{localize \"MYMODULE.GREETING\" name=\"Andrew\"}} <!-- Hello, this is my module! -->\n * ```\n */\nformat(stringId:string,data?:Record<string,unknown>):string;}}type Translations={[K:string]:string|Translations;};"
    ]
  