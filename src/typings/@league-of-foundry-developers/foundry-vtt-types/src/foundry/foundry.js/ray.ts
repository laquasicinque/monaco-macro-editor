
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\ray.d.ts",
      "declare interface RayIntersection{/** The x-coordinate of intersection */\nx:number;/** The y-coordinate of intersection */\ny:number;/** The proximity to the Ray origin, as a ratio of distance */\nt0:number;/** The proximity to the Ray destination, as a ratio of distance */\nt1:number;}/**\n * A ray for the purposes of computing sight and collision\n * Given points A[x,y] and B[x,y]\n *\n * Slope-Intercept form:\n * y = a + bx\n * y = A.y + ((B.y - A.Y) / (B.x - A.x))x\n *\n * Parametric form:\n * R(t) = (1-t)A + tB\n */declare class Ray{/**\n * @param A - The origin of the Ray\n * @param B - The destination of the Ray\n */constructor(A:Point,B:Point);/**\n * The origin point, `{x, y}`\n */\nA:Point;/**\n * The destination point, `{x, y}`\n */\nB:Point;/**\n * The origin y-coordinate\n */\ny0:number;/**\n * The origin x-coordinate\n */\nx0:number;/**\n * The horizontal distance of the ray, x1 - x0\n */\ndx:number;/**\n * The vertical distance of the ray, y1 - y0\n */\ndy:number;/**\n * The slope of the ray, dy over dx\n */\nslope:number;/**\n * The cached angle, computed lazily in Ray#angle\n * @defaultValue `undefined`\n * @internal\n */protected _angle:number|undefined;/**\n * The cached distance, computed lazily in Ray#distance\n * @defaultValue `undefined`\n * @internal\n */protected _distance:number|undefined;/**\n * The normalized angle of the ray in radians on the range (-PI, PI).\n * The angle is computed lazily (only if required) and cached.\n */get angle():number;set angle(value:number);/**\n * A bounding rectangle that encompasses the Ray\n */get bounds():NormalizedRectangle;/**\n * The distance (length) of the Ray in pixels.\n * The distance is computed lazily (only if required) and cached.\n */get distance():number;set distance(value:number);/**\n * A factory method to construct a Ray from an origin point, an angle, and a distance\n * @param x        - The origin x-coordinate\n * @param y        - The origin y-coordinate\n * @param radians  - The ray angle in radians\n * @param distance - The distance of the ray in pixels\n * @returns The constructed Ray instance\n */static fromAngle(x:number,y:number,radians:number,distance:number):Ray;/**\n * A factory method to construct a Ray from points in array format.\n * @param A - The origin point [x,y]\n * @param B - The destination point [x,y]\n * @returns The constructed Ray instance\n */static fromArrays(A:PointArray,B:PointArray):Ray;/**\n * Project the Array by some proportion of it's initial distance.\n * Return the coordinates of that point along the path.\n * @param t - The distance along the Ray\n * @returns The coordinates of the projected point\n */\nproject(t:number):{x:number;y:number};/**\n * Reverse the direction of the Ray, returning a second Ray\n */\nreverse():Ray;/**\n * Create a new ray which uses the same origin point, but a slightly offset angle and distance\n * @param offset   - An offset in radians which modifies the angle of the original Ray\n * @param distance - A distance the new ray should project, otherwise uses the same distance.\n * @returns A new Ray with an offset angle\n */\nshiftAngle(angleOffset:number,distance?:number):Ray;/**\n * Find the point I[x,y] and distance t* on ray R(t) which intersects another ray\n * http://paulbourke.net/geometry/pointlineplane/\n *\n * @param coords - An array of coordinates [x0, y0, x1, y1] which defines a line segment to test\n *\n * @returns\n *    The point of collision [x,y] the position of that collision point along the Ray (t0) an the tested\n *    segment (t1). Returns false if no collision occurs.\n */\nintersectSegment(coords:[x0:number,y0:number,x1:number,y1:number]):RayIntersection|false;/**\n * An internal helper method for computing the intersection between two lines.\n * @internal\n */protected static _getIntersection(x1:number,y1:number,x2:number,y2:number,x3:number,y3:number,x4:number,y4:number):RayIntersection|false;/**\n * @deprecated since 0.8.0\n */get normAngle():number;}"
    ]
  