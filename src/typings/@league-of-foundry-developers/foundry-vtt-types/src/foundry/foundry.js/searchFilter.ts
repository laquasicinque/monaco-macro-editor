
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\foundry.js\\searchFilter.d.ts",
      "/**\n * A controller class for managing a text input widget that filters the contents of some other UI element\n * @see {@link Application}\n */declare class SearchFilter{/**\n * @param options - Options which customize the behavior of the filter\n */constructor(options:SearchFilter.Options);/**\n * The value of the current query string\n */\nquery:string;/**\n * A callback function to trigger when the tab is changed\n */\ncallback:(event:KeyboardEvent,query:string,rgx:RegExp,content:string)=>void;/**\n * The regular expression corresponding to the query that should be matched against\n * @defaultValue `undefined`\n */\nrgx:RegExp|undefined;/**\n * The CSS selector used to target the tab navigation element\n */protected _inputSelector:string;/**\n * A reference to the HTML navigation element the tab controller is bound to\n */protected _input:HTMLElement|null;/**\n * The CSS selector used to target the tab content element\n */protected _contentSelector:string;/**\n * A reference to the HTML container element of the tab content\n */protected _content:HTMLElement|null;/**\n * A debounced function which applies the search filtering\n */protected _filter:this['callback'];/**\n * Bind the SearchFilter controller to an HTML application\n */\nbind(html:HTMLElement):void;/**\n * Perform a filtering of the content by invoking the callback function\n * @param event - The triggering keyboard event\n * @param query - The input search string\n */\nfilter(event:KeyboardEvent,query:string):void;/**\n * Clean a query term to standardize it for matching.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n * @param query - An input string which may contain leading/trailing spaces or diacritics\n * @returns A cleaned string of ASCII characters for comparison\n */static cleanQuery(query:string):string;}declare namespace SearchFilter{interface Options{/**\n * The CSS selector used to target the text input element.\n */\ninputSelector:string;/**\n * The CSS selector used to target the content container for these tabs.\n */\ncontentSelector:string;/**\n * The initial value of the search query.\n * @defaultValue `''`\n */\ninitial?:SearchFilter['query'];/**\n * A callback function which executes when the filter changes.\n */\ncallback:SearchFilter['callback'];/**\n * The number of milliseconds to wait for text input before processing.\n * @defaultValue `100`\n */\ndelay?:number;}}"
    ]
  