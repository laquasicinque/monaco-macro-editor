
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\documents.mjs\\baseUser.d.ts",
      "import{DocumentMetadata}from'../abstract/document.mjs';import{Document}from'../abstract/module.mjs';import*as data from'../data/data.mjs';/**\n * The base User model definition which defines common behavior of an User document between both client and server.\n */export declare class BaseUser extends Document<data.UserData,null>{constructor(...args:ConstructorParameters<ConstructorOf<Document<data.UserData,null>>>);/**\n * Define an immutable property for the User's role\n */readonly role:ValueOf<typeof CONST.USER_ROLES>;static get schema():typeof data.UserData;static get metadata():Merge<\nDocumentMetadata,{name:'User';collection:'users';label:'DOCUMENT.User';isPrimary:true;}>;/**\n * Test whether the User has a GAMEMASTER or ASSISTANT role in this World?\n */get isGM():boolean;/**\n * Test whether the User is able to perform a certain permission action.\n * The provided permission string may pertain to an explicit permission setting or a named user role.\n * Alternatively, Gamemaster users are assumed to be allowed to take all actions.\n *\n * @param action - The action to test\n * @returns Does the user have the ability to perform this action?\n */\ncan(action:ValueOf<typeof CONST.USER_ROLES>|keyof typeof CONST.USER_ROLES|keyof typeof CONST.USER_PERMISSIONS):boolean;getUserLevel(user:BaseUser):typeof CONST.ENTITY_PERMISSIONS.OWNER|typeof CONST.ENTITY_PERMISSIONS.NONE;/**\n * Test whether the User has at least a specific permission\n * @param permission - The permission name from USER_PERMISSIONS to test\n * @returns Does the user have at least this permission\n */\nhasPermission(permission:keyof typeof CONST.USER_PERMISSIONS):boolean;/**\n * Test whether the User has at least the permission level of a certain role\n * @param role  - The role name from USER_ROLES to test\n * @param exact - Require the role match to be exact\n *                (default: `false`)\n * @returns Does the user have at this role level (or greater)?\n */\nhasRole(role:ValueOf<typeof CONST.USER_ROLES>|keyof typeof CONST.USER_ROLES,{exact}?:{exact?:boolean}):boolean;}"
    ]
  