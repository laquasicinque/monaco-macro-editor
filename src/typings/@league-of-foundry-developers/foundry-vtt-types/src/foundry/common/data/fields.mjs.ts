
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\fields.mjs.d.ts",
      "import*as CONST from'../constants.mjs';import{hasImageExtension,isColorString,isJSON}from'./validators.mjs';import{Document}from'../abstract/module.mjs';import{FieldReturnType}from'../../../types/helperTypes';/**\n * A required boolean field which may be used in a Document.\n * @remarks\n * Property type: `boolean`\n * Constructor type: `boolean | undefined | null`\n * Default: `false`\n */export declare const BOOLEAN_FIELD:BooleanField;interface BooleanField extends DocumentField<boolean>{type:typeof Boolean;required:true;default:false;}/**\n * A standard string color field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */export declare const COLOR_FIELD:ColorField;interface ColorField extends DocumentField<string>{type:typeof String;required:false;nullable:true;validate:typeof isColorString;validationError:'{name} {field} \"{value}\" is not a valid hexadecimal color string';}/**\n * A standard string field for an image file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */export declare const IMAGE_FIELD:ImageField;interface ImageField extends DocumentField<string>{type:typeof String;required:false;nullable:true;validate:typeof hasImageExtension;validationError:'{name} {field} \"{value}\" does not have a valid image file extension';}/**\n * A standard string field for a video or image file path may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */export declare const VIDEO_FIELD:VideoField;interface VideoField extends DocumentField<string>{type:typeof String;required:false;nullable:true;validate:(src:string|null)=>boolean;validationError:'{name} {field} \"{value}\" does not have a valid image or video file extension';}/**\n * A standard string field for an audio file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */export declare const AUDIO_FIELD:AudioField;interface AudioField extends DocumentField<string>{type:typeof String;required:false;nullable:true;validate:(src:string|null)=>boolean;validationError:'{name} {field} \"{value}\" does not have a valid audio file extension';}/**\n * A standard integer field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */export declare const INTEGER_FIELD:IntegerField;interface IntegerField extends DocumentField<number>{type:typeof Number;required:false;validate:typeof Number.isInteger;validationError:'{name} {field} \"{value}\" does not have an integer value';}/**\n * A string field which contains serialized JSON data that may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | object | undefined | null`\n */export declare const JSON_FIELD:JSONField;interface JSONField extends DocumentField<string>{type:typeof String;required:false;clean:(s:unknown)=>string;validate:typeof isJSON;validationError:'{name} {field} \"{value}\" is not a valid JSON string';}/**\n * A non-negative integer field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */export declare const NONNEGATIVE_INTEGER_FIELD:NonnegativeIntegerField;interface NonnegativeIntegerField extends DocumentField<number>{type:typeof Number;required:false;validate:(n:unknown)=>boolean;validationError:'{name} {field} \"{value}\" does not have an non-negative integer value';}/**\n * A non-negative integer field which may be used in a Document.\n *\n * @remarks The validation actually checks for `> 0`, the JSDoc is incorrect in foundry.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */export declare const POSITIVE_INTEGER_FIELD:PositiveIntegerField;interface PositiveIntegerField extends DocumentField<number>{type:typeof Number;required:false;validate:(n:unknown)=>boolean;validationError:'{name} {field} \"{value}\" does not have an non-negative integer value';}/**\n * A template for a required inner-object field which may be used in a Document.\n * @remarks\n * Property type: `object`\n * Constructor type: `object | undefined | null`\n * Default `{}`\n */export declare const OBJECT_FIELD:ObjectField;interface ObjectField extends DocumentField<object>{type:typeof Object;default:{};required:true;}/**\n * An optional string field which may be included by a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */export declare const STRING_FIELD:StringField;interface StringField extends DocumentField<string>{type:typeof String;required:false;nullable:false;}/**\n * An optional numeric field which may be included in a Document.\n * @remarks\n * Property type: `number | undefined | null`\n * Constructor type: `number | undefined | null`\n */export declare const NUMERIC_FIELD:NumericField;interface NumericField extends DocumentField<number>{type:typeof Number;required:false;nullable:true;}/**\n * A required numeric field which may be included in a Document and may not be null.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */export declare const REQUIRED_NUMBER:RequiredNumber;interface RequiredNumber extends DocumentField<number>{type:typeof Number;required:true;nullable:false;default:0;}/**\n * A required numeric field which must be a positive finite value that may be included in a Document.\n * @remarks\n * Property type: `number`\n * Constructor type: `number`\n */export declare const REQUIRED_POSITIVE_NUMBER:RequiredPositiveNumber;interface RequiredPositiveNumber extends DocumentField<number>{type:typeof Number;required:true;nullable:false;validate:(n:unknown)=>boolean;validationError:'{name} {field} \"{value}\" is not a positive number';}/**\n * A required numeric field which represents an angle of rotation in degrees between 0 and 360.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `360`\n */export declare const ANGLE_FIELD:AngleField;interface AngleField extends DocumentField<number>{type:typeof Number;required:true;nullable:false;default:360;clean:(n:unknown)=>number;validate:(n:number)=>boolean;validationError:'{name} {field} \"{value}\" is not a number between 0 and 360';}/**\n * A required numeric field which represents a uniform number between 0 and 1.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `1`\n */export declare const ALPHA_FIELD:AlphaField;interface AlphaField extends DocumentField<number>{type:typeof Number;required:true;nullable:false;default:1;validate:(n:number)=>boolean;validationError:'{name} {field} \"{value}\" is not a number between 0 and 1';}/**\n * A string field which requires a non-blank value and may not be null.\n * @remarks\n * Property type: `string`\n * Constructor type: `string`\n */export declare const REQUIRED_STRING:RequiredString;interface RequiredString extends DocumentField<string>{type:typeof String;required:true;nullable:false;clean:<T>(v:T)=>T extends undefined?undefined:string;}/**\n * A string field which is required, but may be left blank as an empty string.\n * @remarks\n * Property type: `string`\n * Constructor type: `string | undefined | null`\n * Default: `''`\n */export declare const BLANK_STRING:BlankString;interface BlankString extends DocumentField<string>{type:typeof String;required:true;nullable:false;clean:(v:unknown)=>string;default:'';}/**\n * A field used for integer sorting of a Document relative to its siblings\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */export declare const INTEGER_SORT_FIELD:IntegerSortField;interface IntegerSortField extends DocumentField<number>{type:typeof Number;required:true;default:0;validate:typeof Number.isInteger;validationError:'{name} {field} \"{value}\" is not an integer';}/**\n * A numeric timestamp field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n * Default: `Date.now`\n */export declare const TIMESTAMP_FIELD:TimestampField;interface TimestampField extends DocumentField<number>{type:typeof Number;required:false;default:typeof Date.now;nullable:false;}/**\n * Validate that the ID of a Document object is either null (not yet saved) or a valid string.\n * @param id - The _id to test\n * @returns Is it valid?\n */declare function _validateId(id:string|null):boolean;/**\n * The standard identifier for a Document.\n * @remarks\n * Property type: `string | null`\n * Constructor type: `string | undefined | null`\n * Default: `null`\n */export declare const DOCUMENT_ID:DocumentId;interface DocumentId extends DocumentField<string|null>{type:typeof String;required:true;default:null;nullable:false;validate:typeof _validateId;validationError:'{name} {field} \"{value}\" is not a valid document ID string';}/**\n * The standard permissions object which may be included by a Document.\n * @remarks\n * Property type: `Partial<Record<string, foundry.CONST.EntityPermission>>`\n * Constructor type: `Partial<Record<string, foundry.CONST.EntityPermission>> | undefined | null`\n * Default: `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n */export declare const DOCUMENT_PERMISSIONS:DocumentPermissions;interface DocumentPermissions extends DocumentField<Partial<Record<string,foundry.CONST.EntityPermission>>>{type:typeof Object;required:true;nullable:false;default:{default:typeof CONST.ENTITY_PERMISSIONS.NONE};validate:typeof _validatePermissions;validationError:'{name} {field} \"{value}\" is not a mapping of user IDs and document permission levels';}/**\n * Validate the structure of the permissions object: all keys are valid IDs and all values are permission levels\n * @param perms - The provided permissions object\n * @returns Is the object valid?\n */declare function _validatePermissions(perms:object):boolean;interface ForeignDocumentFieldOptions{type:{readonly documentName:string;};required?:boolean;nullable?:boolean;default?:any;}/**\n * Create a foreign key field which references a primary Document id\n */export declare function foreignDocumentField<T extends ForeignDocumentFieldOptions>(options:T):ForeignDocumentField<T>;interface ForeignDocumentField<T extends ForeignDocumentFieldOptions>extends DocumentField<string|null>{type:typeof String;required:T extends{required:true;}?true:false;nullable:T extends{nullable?:true;}?true:T extends{nullable:false;}?false:boolean;default:T extends{default:infer U;}?U:null;clean:(d:unknown)=>string|null;validate:typeof _validateId;validationError:`{name} {field} \"{value}\" is not a valid ${T['type']['documentName']}id`;\n}\n\ninterface EmbeddedCollectionFieldOptions {\n  required?: boolean;\n  default?: any[];\n}\n\n/**\n * Create a special field which contains a Collection of embedded Documents\n * @param document - The Document class definition\n * @param options  - Additional field options\n *                   (default: `{}`)\n */\nexport declare function embeddedCollectionField<\n  ConcreteDocumentConstructor extends { readonly documentName: string } & ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions\n>(\n  document: ConcreteDocumentConstructor,\n  options?: Options\n): EmbeddedCollectionField<ConcreteDocumentConstructor, Options>;\n// TODO: Improve\ninterface EmbeddedCollectionField<\n  ConcreteDocumentConstructor extends ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions = {}\n> extends DocumentField<any> {\n  type: Partial<Record<string, ConcreteDocumentConstructor>>;\n  required: Options extends { required?: true } ? true : Options extends { required: false } ? false : boolean;\n  default: Options extends { default?: Array<infer U> } ? Array<U> : unknown[];\n  isCollection: true;\n}\n\n/**\n * Return a document field which is a modification of a static field type\n */\nexport declare function field<T extends DocumentField<any>, U extends Partial<DocumentField<any>>>(\n  field: T,\n  options?: U\n): FieldReturnType<T, U>;\n"
    ]
  