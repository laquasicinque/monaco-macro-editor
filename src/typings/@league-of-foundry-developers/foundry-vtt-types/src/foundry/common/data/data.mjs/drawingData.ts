
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\drawingData.d.ts",
      "import DocumentData from'../../abstract/data.mjs';import{BaseUser}from'../../documents.mjs';import{ForeignDocumentField}from'../fields.mjs';import*as fields from'../fields.mjs';import*as documents from'../../documents.mjs';import{ConfiguredDocumentClass,FieldReturnType,PropertiesToSource}from'../../../../types/helperTypes';interface DrawingDataSchema extends DocumentSchema{_id:typeof fields.DOCUMENT_ID;author:ForeignDocumentField<{type:typeof documents.BaseUser;required:true}>;type:DocumentField<foundry.CONST.DrawingType>&{type:typeof String;required:true;default:typeof CONST.DRAWING_TYPES.POLYGON;validate:(t:unknown)=>t is foundry.CONST.DrawingType;validationError:'Invalid {name} {field} which must be a value in CONST.DRAWING_TYPES';};x:typeof fields.REQUIRED_NUMBER;y:typeof fields.REQUIRED_NUMBER;width:typeof fields.REQUIRED_NUMBER;height:typeof fields.REQUIRED_NUMBER;rotation:FieldReturnType<typeof fields.ANGLE_FIELD,{default:0}>;z:typeof fields.REQUIRED_NUMBER;points:DocumentField<Array<[x:number,y:number]>>&{type:[typeof Array];required:true;default:[];validate:typeof _validateDrawingPoints;validationError:'Invalid {name} {field} which must be an array of points [x,y]';};bezierFactor:FieldReturnType<typeof fields.ALPHA_FIELD,{default:0}>;fillType:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.DRAWING_FILL_TYPES.NONE;validate:(v:unknown)=>v is foundry.CONST.DrawingFillType;validationError:'Invalid {name} {field} which must be a value in CONST.DRAWING_FILL_TYPES';}>;fillColor:typeof fields.COLOR_FIELD;fillAlpha:FieldReturnType<typeof fields.ALPHA_FIELD,{default:0.5}>;strokeWidth:FieldReturnType<typeof fields.NONNEGATIVE_INTEGER_FIELD,{default:8}>;strokeColor:typeof fields.COLOR_FIELD;strokeAlpha:typeof fields.ALPHA_FIELD;texture:typeof fields.IMAGE_FIELD;text:typeof fields.STRING_FIELD;fontFamily:FieldReturnType<typeof fields.REQUIRED_STRING,{default:'Signika'}>;fontSize:FieldReturnType<typeof fields.POSITIVE_INTEGER_FIELD,{default:48;validate:(n:unknown)=>boolean;validationError:'Invalid {name} {field} which must be an integer between 8 and 256';}>;textColor:FieldReturnType<typeof fields.COLOR_FIELD,{default:'#FFFFFF'}>;textAlpha:typeof fields.ALPHA_FIELD;hidden:typeof fields.BOOLEAN_FIELD;locked:typeof fields.BOOLEAN_FIELD;flags:typeof fields.OBJECT_FIELD;}interface DrawingDataProperties{/**\n * The _id which uniquely identifies this BaseDrawing embedded document\n * @defaultValue `null`\n */\n_id:string|null;/**\n * The _id of the user who created the drawing\n * @defaultValue `null`\n */\nauthor:string|null;/**\n * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n */type:foundry.CONST.DrawingType;/**\n * The x-coordinate position of the top-left corner of the drawn shape\n * @defaultValue `0`\n */\nx:number;/**\n * The y-coordinate position of the top-left corner of the drawn shape\n * @defaultValue `0`\n */\ny:number;/**\n * The pixel width of the drawing figure\n * @defaultValue `0`\n */\nwidth:number;/**\n * The pixel height of the drawing figure\n * @defaultValue `0`\n */\nheight:number;/**\n * The angle of rotation for the drawing figure\n * @defaultValue `0`\n */\nrotation:number;/**\n * The z-index of this drawing relative to other siblings\n * @defaultValue `0`\n */\nz:number;/**\n * An array of points [x,y] which define polygon vertices\n * @defaultValue `[]`\n */\npoints:Array<[x:number,y:number]>;/**\n * An amount of bezier smoothing applied, between 0 and 1\n * @defaultValue `0`\n */\nbezierFactor:number;/**\n * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n */\nfillType:foundry.CONST.DrawingFillType;/**\n * An optional color string with which to fill the drawing geometry\n */\nfillColor?:string|null;/**\n * The opacity of the fill applied to the drawing geometry\n * @defaultValue `0.5`\n */\nfillAlpha:number;/**\n * The width in pixels of the boundary lines of the drawing geometry\n * @defaultValue `8`\n */\nstrokeWidth:number;/**\n * The color of the boundary lines of the drawing geometry\n */\nstrokeColor?:string|null;/**\n * The opacity of the boundary lines of the drawing geometry\n * @defaultValue `1`\n */\nstrokeAlpha:number;/**\n * The path to a tiling image texture used to fill the drawing geometry\n */\ntexture?:string|null;/**\n * Optional text which is displayed overtop of the drawing\n */\ntext?:string;/**\n * The font family used to display text within this drawing\n * @defaultValue `'Signika'`\n */\nfontFamily:string;/**\n * The font size used to display text within this drawing\n * @defaultValue `48`\n */\nfontSize:number;/**\n * The color of text displayed within this drawing\n * @defaultValue `'#FFFFFF'`\n */\ntextColor:string|null;/**\n * The opacity of text displayed within this drawing\n * @defaultValue `1`\n */\ntextAlpha:number;/**\n * Is the drawing currently hidden?\n * @defaultValue `false`\n */\nhidden:boolean;/**\n * Is the drawing currently locked?\n * @defaultValue `false`\n */\nlocked:boolean;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags:Record<string,unknown>;}interface DrawingDataConstructorData{/**\n * The _id which uniquely identifies this BaseDrawing embedded document\n * @defaultValue `null`\n */\n_id?:string|null;/**\n * The _id of the user who created the drawing\n * @defaultValue `null`\n */\nauthor?:InstanceType<ConfiguredDocumentClass<typeof BaseUser>>|string|null;/**\n * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n */type?:foundry.CONST.DrawingType|null;/**\n * The x-coordinate position of the top-left corner of the drawn shape\n * @defaultValue `0`\n */\nx?:number|null;/**\n * The y-coordinate position of the top-left corner of the drawn shape\n * @defaultValue `0`\n */\ny?:number|null;/**\n * The pixel width of the drawing figure\n * @defaultValue `0`\n */\nwidth?:number|null;/**\n * The pixel height of the drawing figure\n * @defaultValue `0`\n */\nheight?:number|null;/**\n * The angle of rotation for the drawing figure\n * @defaultValue `0`\n */\nrotation?:number|null;/**\n * The z-index of this drawing relative to other siblings\n * @defaultValue `0`\n */\nz?:number|null;/**\n * An array of points [x,y] which define polygon vertices\n * @defaultValue `[]`\n */\npoints?:Array<[x:number,y:number]>|null;/**\n * An amount of bezier smoothing applied, between 0 and 1\n * @defaultValue `0`\n */\nbezierFactor?:number|null;/**\n * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n */\nfillType?:foundry.CONST.DrawingFillType|null;/**\n * An optional color string with which to fill the drawing geometry\n */\nfillColor?:string|null;/**\n * The opacity of the fill applied to the drawing geometry\n * @defaultValue `0.5`\n */\nfillAlpha?:number|null;/**\n * The width in pixels of the boundary lines of the drawing geometry\n * @defaultValue `8`\n */\nstrokeWidth?:number|null;/**\n * The color of the boundary lines of the drawing geometry\n */\nstrokeColor?:string|null;/**\n * The opacity of the boundary lines of the drawing geometry\n * @defaultValue `1`\n */\nstrokeAlpha?:number|null;/**\n * The path to a tiling image texture used to fill the drawing geometry\n */\ntexture?:string|null;/**\n * Optional text which is displayed overtop of the drawing\n */\ntext?:string|null;/**\n * The font family used to display text within this drawing\n * @defaultValue `'Signika'`\n */\nfontFamily?:string|null;/**\n * The font size used to display text within this drawing\n * @defaultValue `48`\n */\nfontSize?:number|null;/**\n * The color of text displayed within this drawing\n * @defaultValue `'#FFFFFF'`\n */\ntextColor?:string|null;/**\n * The opacity of text displayed within this drawing\n * @defaultValue `1`\n */\ntextAlpha?:number|null;/**\n * Is the drawing currently hidden?\n * @defaultValue `false`\n */\nhidden?:boolean|null;/**\n * Is the drawing currently locked?\n * @defaultValue `false`\n */\nlocked?:boolean|null;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags?:Record<string,unknown>|null;}/**\n * The data schema for a Drawing embedded document.\n * @see BaseDrawing\n *\n * @param data     - Initial data used to construct the data object\n * @param document - The embedded document to which this data object belongs\n */export declare class DrawingData extends DocumentData<\nDrawingDataSchema,DrawingDataProperties,PropertiesToSource<DrawingDataProperties>,DrawingDataConstructorData,documents.BaseFolder>{static defineSchema():DrawingDataSchema;/** @override */protected _initialize():void;/** @override */protected _validateDocument():void;}export declare interface DrawingData extends DrawingDataProperties{}/**\n * Validate the array of points which comprises a polygon drawing\n * @param points - The candidate points\n * @returns Is the array valid?\n */declare function _validateDrawingPoints(points:number[][]):boolean;"
    ]
  