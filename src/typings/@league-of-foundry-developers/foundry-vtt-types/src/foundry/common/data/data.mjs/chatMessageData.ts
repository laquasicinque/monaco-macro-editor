
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\chatMessageData.d.ts",
      "import{ConfiguredFlags,FieldReturnType,PropertiesToSource}from'../../../../types/helperTypes';import{DocumentData}from'../../abstract/module.mjs';import{CONST,documents}from'../../module.mjs';import*as fields from'../fields.mjs';import{ChatSpeakerData,ChatSpeakerDataConstructorData}from'./chatSpeakerData';interface ChatMessageDataSchema extends DocumentSchema{_id:typeof fields.DOCUMENT_ID;type:DocumentField<CONST.ChatMessageType>&{type:typeof Number;required:true;default:typeof CONST.CHAT_MESSAGE_TYPES.OTHER;validate:typeof _validateChatMessageType;validationError:'The provided ChatMessage type must be in CONST.CHAT_MESSAGE_TYPES';};user:fields.ForeignDocumentField<{type:typeof documents.BaseUser;required:true}>;timestamp:FieldReturnType<typeof fields.TIMESTAMP_FIELD,{required:true}>;flavor:typeof fields.STRING_FIELD;content:typeof fields.BLANK_STRING;speaker:DocumentField<ChatSpeakerData>&{type:typeof ChatSpeakerData;required:true;default:{}};whisper:DocumentField<string[]>&{type:typeof String[];clean:(users:Array<{id:string}|string>)=>string[];required:true;default:string[];};blind:typeof fields.BOOLEAN_FIELD;roll:typeof fields.JSON_FIELD;sound:typeof fields.AUDIO_FIELD;emote:typeof fields.BOOLEAN_FIELD;flags:typeof fields.OBJECT_FIELD;}interface ChatMessageDataProperties{/**\n * The _id which uniquely identifies this ChatMessage document\n */\n_id:string|null;/**\n * The message type from CONST.CHAT_MESSAGE_TYPES\n * @defaultValue `CONST.CHAT_MESSAGE_TYPES.OTHER`\n */type:CONST.ChatMessageType;/**\n * The _id of the User document who generated this message\n */\nuser:string|null;/**\n * The timestamp at which point this message was generated\n * @defaultValue `Date.now()`\n */\ntimestamp:number;/**\n * An optional flavor text message which summarizes this message\n */\nflavor?:string;/**\n * The HTML content of this chat message\n * @defaultValue `\"\"`\n */\ncontent:string;/**\n * A ChatSpeakerData object which describes the origin of the ChatMessage\n */\nspeaker:ChatSpeakerData;/**\n * An array of User _id values to whom this message is privately whispered\n * @defaultValue `[]`\n */\nwhisper:string[];/**\n * Is this message sent blindly where the creating User cannot see it?\n * @defaultValue `false`\n */\nblind:boolean;/**\n * The serialized content of a Roll instance which belongs to the ChatMessage\n * @defaultValue `undefined`\n */\nroll?:string;/**\n * The URL of an audio file which plays when this message is received\n * @defaultValue `undefined`\n */\nsound?:string|null;/**\n * Is this message styled as an emote?\n * @defaultValue `false`\n */\nemote:boolean;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags:ConfiguredFlags<'ChatMessage'>;}export interface ChatMessageDataConstructorData{/**\n * The _id which uniquely identifies this ChatMessage document\n */\n_id?:string|null;/**\n * The message type from CONST.CHAT_MESSAGE_TYPES\n * @defaultValue `CONST.CHAT_MESSAGE_TYPES.OTHER`\n */type?:CONST.ChatMessageType|null;/**\n * The _id of the User document who generated this message\n */\nuser?:string|null;/**\n * The timestamp at which point this message was generated\n * @defaultValue `Date.now()`\n */\ntimestamp?:number|null;/**\n * An optional flavor text message which summarizes this message\n */\nflavor?:string|null;/**\n * The HTML content of this chat message\n * @defaultValue `\"\"`\n */\ncontent?:string|null;/**\n * A ChatSpeakerData object which describes the origin of the ChatMessage\n */\nspeaker?:ChatSpeakerDataConstructorData|null;/**\n * An array of User _id values to whom this message is privately whispered\n * @defaultValue `[]`\n */\nwhisper?:Array<{id:string}|string>|null;/**\n * Is this message sent blindly where the creating User cannot see it?\n * @defaultValue `false`\n */\nblind?:boolean|null;/**\n * The serialized content of a Roll instance which belongs to the ChatMessage\n * @defaultValue `undefined`\n */\nroll?:string|null;/**\n * The URL of an audio file which plays when this message is received\n * @defaultValue `undefined`\n */\nsound?:string|null;/**\n * Is this message styled as an emote?\n * @defaultValue `false`\n */\nemote?:boolean|null;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags?:ConfiguredFlags<'ChatMessage'>|null;}/**\n * An embedded data object which defines the properties of a light source animation\n */export declare class ChatMessageData extends DocumentData<\nChatMessageDataSchema,ChatMessageDataProperties,PropertiesToSource<ChatMessageDataProperties>,ChatMessageDataConstructorData,documents.BaseChatMessage>{static defineSchema():ChatMessageDataSchema;}export declare interface ChatMessageData extends ChatMessageDataProperties{}/**\n * Validate that a ChatMessage has a valid type\n * @param type - The assigned message type\n * @returns Is it valid?\n */declare function _validateChatMessageType(type:number):boolean;"
    ]
  