
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\data\\data.mjs\\wallData.d.ts",
      "import{ConfiguredFlags,FieldReturnType,PropertiesToSource}from'../../../../types/helperTypes';import DocumentData from'../../abstract/data.mjs';import*as documents from'../../documents.mjs';import*as fields from'../fields.mjs';interface WallDataSchema extends DocumentSchema{_id:typeof fields.DOCUMENT_ID;c:DocumentField<[x0:number,y0:number,x1:number,y1:number]>&{type:[typeof Number];required:true;validate:(c:unknown)=>c is[x0:number,y0:number,x1:number,y1:number];validationError:'Invalid {name} coordinates provided which must be a length-4 array of finite numbers';};move:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_MOVEMENT_TYPES.NORMAL;validate:(v:unknown)=>v is foundry.CONST.WallMovementType;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_MOVEMENT_TYPES';}>;sense:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_SENSE_TYPES.NORMAL;validate:(v:unknown)=>v is foundry.CONST.WallSenseType;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_SENSE_TYPES';}>;sound:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_SENSE_TYPES.NORMAL;validate:(v:unknown)=>v is foundry.CONST.WallSenseType;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_SENSE_TYPES';}>;dir:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_DIRECTIONS.BOTH;validate:(v:unknown)=>v is foundry.CONST.WallDirection;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_DIRECTIONS';}>;door:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_DOOR_TYPES.NONE;validate:(v:unknown)=>v is foundry.CONST.WallDoorType;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_DOOR_TYPES';}>;ds:FieldReturnType<typeof fields.REQUIRED_NUMBER,{default:typeof CONST.WALL_DOOR_STATES.CLOSED;validate:(v:unknown)=>v is foundry.CONST.WallDoorState;validationError:'Invalid {name} {field} which must be a value in CONST.WALL_DOOR_STATES';}>;flags:typeof fields.OBJECT_FIELD;}interface WallDataProperties{/**\n * The _id which uniquely identifies the embedded Wall document\n */\n_id:string|null;/**\n * The wall coordinates, a length-4 array of finite numbers [x0,y0,x1,y1]\n */\nc:[x0:number,y0:number,x1:number,y1:number];/**\n * The movement restriction type of this wall\n * @defaultValue `CONST.WALL_MOVEMENT_TYPES.NORMAL`\n */\nmove:foundry.CONST.WallMovementType;/**\n * The sensory restriction type of this wall\n * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n */\nsense:foundry.CONST.WallSenseType;/**\n * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n */\nsound:foundry.CONST.WallSenseType;/**\n * The direction of effect imposed by this wall\n * @defaultValue `CONST.WALL_DIRECTIONS.BOTH`\n */\ndir:foundry.CONST.WallDirection;/**\n * The type of door which this wall contains, if any\n * @defaultValue `CONST.WALL_DOOR_TYPES.NONE`\n */\ndoor:foundry.CONST.WallDoorType;/**\n * The state of the door this wall contains, if any\n * @defaultValue `CONST.WALL_DOOR_STATES.CLOSED`\n */\nds:foundry.CONST.WallDoorState;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags:ConfiguredFlags<'Wall'>;}interface WallDataConstructorData{/**\n * The _id which uniquely identifies the embedded Wall document\n */\n_id?:string|null;/**\n * The wall coordinates, a length-4 array of finite numbers [x0,y0,x1,y1]\n */\nc:[x0:number,y0:number,x1:number,y1:number];/**\n * The movement restriction type of this wall\n * @defaultValue `CONST.WALL_MOVEMENT_TYPES.NORMAL`\n */\nmove?:foundry.CONST.WallMovementType|null;/**\n * The sensory restriction type of this wall\n * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n */\nsense?:foundry.CONST.WallSenseType|null;/**\n * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n */\nsound?:foundry.CONST.WallSenseType|null;/**\n * The direction of effect imposed by this wall\n * @defaultValue `CONST.WALL_DIRECTIONS.BOTH`\n */\ndir?:foundry.CONST.WallDirection|null;/**\n * The type of door which this wall contains, if any\n * @defaultValue `CONST.WALL_DOOR_TYPES.NONE`\n */\ndoor?:foundry.CONST.WallDoorType|null;/**\n * The state of the door this wall contains, if any\n * @defaultValue `CONST.WALL_DOOR_STATES.CLOSED`\n */\nds?:foundry.CONST.WallDoorState|null;/**\n * An object of optional key/value flags\n * @defaultValue `{}`\n */\nflags?:ConfiguredFlags<'Wall'>|null;}/**\n * The data schema for a Wall document.\n * @see BaseWall\n */export declare class WallData extends DocumentData<\nWallDataSchema,WallDataProperties,PropertiesToSource<WallDataProperties>,WallDataConstructorData,documents.BaseWall>{/**\n * The data schema for a WallData object\n */static defineSchema():WallDataSchema;/**\n * @remarks This override does not exist in foundry but is added here to prepend runtime errors.\n */constructor(data:WallDataConstructorData,document?:documents.BaseWall|null);}export declare interface WallData extends WallDataProperties{}"
    ]
  