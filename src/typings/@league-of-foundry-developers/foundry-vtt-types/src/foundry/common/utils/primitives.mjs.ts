
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\primitives.mjs.d.ts",
      "declare interface Math{/**\n * Bound a number between some minimum and maximum value, inclusively\n * @param num - The current value\n * @param min - The minimum allowed value\n * @param max - The maximum allowed value\n * @returns The clamped number\n */\nclamped(num:number,min:number,max:number):number;/**\n * Transform an angle in degrees to be bounded within the domain [0, 360]\n * @param degrees - An angle in degrees\n * @returns The same angle on the range [0, 360]\n */\nnormalizeDegrees(degrees:number):number;/**\n * Transform an angle in radians to be bounded within the domain [-PI, PI]\n * @param radians - An angle in degrees\n * @returns The same angle on the range [-PI, PI]\n */\nnormalizeRadians(radians:number):number;/**\n * Round a floating point number to a certain number of decimal places\n * @param number - A floating point number\n * @param places - An integer number of decimal places\n */\nroundDecimals(number:number,places:number):number;/**\n * Transform an angle in radians to a number in degrees\n * @param angle - An angle in radians\n * @returns An angle in degrees\n */\ntoDegrees(angle:number):number;/**\n * Transform an angle in degrees to an angle in radians\n * @param angle - An angle in degrees\n * @returns An angle in radians\n */\ntoRadians(angle:number):number;}declare interface Set<T>{/**\n * Test whether this set is equal to some other set.\n * Sets are equal if they share the same members, independent of order\n * @param other - Some other set to compare against\n * @returns Are the sets equal?\n */\nequals(other:Set<T>):boolean;/**\n * Test whether this set is a subset of some other set.\n * A set is a subset if all its members are also present in the other set.\n * @param other - Some other set that may be a subset of this one\n * @returns Is the other set a subset of this one?\n */\nisSubset(other:Set<T>):boolean;}declare interface String{capitalize<S extends string>(this:S):Capitalize<S>;titleCase<S extends string>(this:S):Titlecase<S>;/**\n * Strip any <script> tags which were included within a provided string\n */\nstripScripts():string;/**\n * Transform any string into a url-viable slug string\n * @param replacement - The replacement character to separate terms\n *                      (default: `'-'`)\n * @param strict      - Replace all non-alphanumeric characters, or allow them?\n *                      (default: `false`)\n * @returns The cleaned slug string\n */\nslugify({replacement,strict}?:{replacement?:string;strict?:boolean}):string;}declare interface Number{ordinalString():string;paddedString(digits:number):string;signedString():string;/**\n * Round a number to the nearest number which is a multiple of a given interval\n * @param interval - The interval to round the number to the nearest multiple of\n *                   (default: `1`)\n * @param method   - The rounding method in: round, ceil, floor\n *                   (default: `'round'`)\n * @returns The rounded number\n *\n * @example\n * ```typescript\n * let n = 17.18;\n * n.toNearest(5); // 15\n * n.toNearest(10); // 20\n * n.toNearest(10, \"floor\"); // 10\n * n.toNearest(10, \"ceil\"); // 20\n * n.toNearest(0.25); // 17.25\n * ```\n */\ntoNearest(interval?:number,method?:'round'|'ceil'|'floor'):number;between(a:number,b:number,inclusive?:boolean):boolean;}declare interface NumberConstructor{/**\n * A faster numeric between check which avoids type coercion to the Number object\n * Since this avoids coercion, if non-numbers are passed in unpredictable results will occur. Use with caution.\n * @param inclusive - (default: `true`)\n */\nbetween(num:number,a:number,b:number,inclusive?:boolean):boolean;/**\n * Test whether a value is numeric\n * This is the highest performing algorithm currently available\n * https://jsperf.com/isnan-vs-typeof/5\n * @param n - A value to test\n * @returns Is it a number?\n */\nisNumeric(n:unknown):n is number;}declare interface ArrayConstructor{fromRange(n:number):number[];}declare interface Array<T>{deepFlatten():Array<Array.Flattened<T>>;/**\n * Test equality of the values of this array against the values of some other Array\n */\nequals(other:T[]):boolean;/**\n * Partition an original array into two children array based on a logical test\n * Elements which test as false go into the first result while elements testing as true appear in the second\n * @param rule - The rule to partition by\n * @returns An Array of length two whose elements are the partitioned pieces of the original\n */\npartition(rule:(val:T)=>boolean):[T[],T[]];/**\n * Join an Array using a string separator, first filtering out any parts which return a false-y value\n * @param sep - The separator string\n * @returns The joined string, filtered of any false values\n */\nfilterJoin(sep:string):string;/**\n * Find an element within the Array and remove it from the array\n * @param find - A function to use as input to findIndex\n * @param replace - A replacement for the spliced element\n * @returns The replacement element, the removed element, or null if no element was found.\n */\nfindSplice(find:(value:T,index:number,obj:T[])=>boolean,replace?:T):T|null;}declare namespace Array{type Flattened<T>=T extends Array<infer U>?Flattened<U>:T;}declare interface Date{/**\n * Test whether a Date instance is valid.\n * A valid date returns a number for its timestamp, and NaN otherwise.\n * NaN is never equal to itself.\n */\nisValid():boolean;/**\n * Return a standard YYYY-MM-DD string for the Date instance.\n * @returns The date in YYYY-MM-DD format\n */\ntoDateInputString():string;/**\n * Return a standard H:M:S.Z string for the Date instance.\n * @returns The time in H:M:S format\n */\ntoTimeInputString():string;}declare interface RegExpConstructor{escape(string:string):string;}"
    ]
  