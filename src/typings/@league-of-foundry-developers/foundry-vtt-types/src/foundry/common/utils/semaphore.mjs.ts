
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\utils\\semaphore.mjs.d.ts",
      "/**\n * A simple Semaphore implementation which provides a limited queue for ensuring proper concurrency.\n *\n * @example\n * ```typescript\n * // Some async function that takes time to execute\n * function fn(x: string): Promise<string> {\n *   return new Promise(resolve => {\n *     setTimeout(() => {\n *       console.log(x);\n *       resolve(x);\n *     }, 1000));\n *   }\n * };\n *\n * // Create a Semaphore and add many concurrent tasks\n * const semaphore = new Semaphore(1);\n * for ( let i of Array.fromRange(100) ) {\n *   semaphore.add(fn, i);\n * }\n * ```\n */declare class Semaphore{/**\n * @param max - The maximum number of tasks which are allowed concurrently.\n *              (default: 1)\n */constructor(max?:number);/**\n * The maximum number of tasks which can be simultaneously attempted.\n */\nmax:number;/**\n * A queue of pending function signatures\n * @defaultValue `[]`\n * @remarks The first element of an element of `_queue` is always a function and the rest of the elements are\n * parameters to be passed to that function.\n */\n_queue:Array<Array<unknown>>;/**\n * The number of tasks which are currently underway\n * @defaultValue `0`\n */protected _active:number;/**\n * The number of pending tasks remaining in the queue\n */get remaining():number;/**\n * The number of actively executing tasks\n */get active():number;/**\n * Add a new tasks to the managed queue\n * @param fn   - A callable function\n * @param args - Function arguments\n */\nadd<F extends(...args:any[])=>any>(fn:F,...args:Parameters<F>):void;/**\n * Abandon any tasks which have not yet concluded\n */\nclear():void;/**\n * Attempt to perform a task from the queue.\n * If all workers are busy, do nothing.\n * If successful, try again.\n * @returns Was a function called?\n */protected _try():Promise<boolean>;}export default Semaphore;"
    ]
  