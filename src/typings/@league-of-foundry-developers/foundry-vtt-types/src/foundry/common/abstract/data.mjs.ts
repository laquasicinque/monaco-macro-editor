
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\data.mjs.d.ts",
      "import Document from'./document.mjs';import EmbeddedCollection from'./embedded-collection.mjs';import{DocumentConstructor,PropertiesToSource,PropertyTypeToSourceParameterType,ToObjectFalseType}from'../../../types/helperTypes';declare global{/**\n * A schema entry which describes a field of DocumentData\n * @typeparam T - the inner type of the document field\n */interface DocumentField<T>{/**\n * An object which defines the data type of this field\n */type:object;/**\n * Is this field required to have an assigned value? Default is false.\n */\nrequired:boolean;/**\n * Can the field be populated by a null value? Default is true.\n */\nnullable?:boolean;/**\n * A static default value or a function which assigns a default value\n */default?:PropertyTypeToSourceParameterType<T>|((data?:object)=>T);collection?:boolean;/**\n * An optional cleaning function which sanitizes input data to this field\n */\nclean?:(input:unknown)=>T;/**\n * A function which asserts that the value of this field is valid\n */\nvalidate?:(value:T)=>boolean;/**\n * An error message which is displayed if validation fails\n */\nvalidationError?:string;/**\n * Is the field an embedded Document collection?\n */\nisCollection?:boolean;}/**\n * The schema of a Document\n */type DocumentSchema=Partial<Record<string,DocumentField<any>>>;}/**\n * The abstract base class which defines the data schema contained within a Document.\n * @typeParam ConcreteDocumentSchema - the schema of the document data\n * @typeParam PropertiesData - the runtime document properties of the the DocumentData\n * @typeParam SourceData - the type of the `_source` property\n * @typeParam ConstructorData - the data to construct a new instance of this DocumentData\n * @typeParam ConcreteDocument - the document, the document data belongs to\n */declare abstract class DocumentData<\nConcreteDocumentSchema extends DocumentSchema,PropertiesData extends object,SourceData extends object=PropertiesToSource<PropertiesData>,ConstructorData extends object=DeepPartial<SourceData>,ConcreteDocument extends Document<any,any>|null=null>{/**\n * @param data     - Initial data used to construct the data object\n *                   (default: `{}`)\n * @param document - The document to which this data object belongs\n *                   (default: `null`)\n */constructor(data?:ConstructorData,document?:ConcreteDocument|null);/**\n * An immutable reverse-reference to the Document to which this data belongs, possibly null.\n */readonly document:ConcreteDocument|null;/**\n * The source data object. The contents of this object can be updated, but the object itself may not be replaced.\n */readonly _source:SourceData;/**\n * The primary identifier for the Document to which this data object applies.\n * This identifier is unique within the parent collection which contains the Document.\n * @defaultValue `null`\n */\n_id:string|null;/**\n * Define the data schema for documents of this type.\n * The schema is populated the first time it is accessed and cached for future reuse.\n *\n * @remarks This method needs to be implemented by subclasses.\n */static defineSchema():DocumentSchema;/**\n * Define the data schema for documents of this type.\n */static get schema():DocumentSchema;/**\n * Define the data schema for this document instance.\n */get schema():ConcreteDocumentSchema;/**\n * Initialize the source data object in-place\n */\n_initializeSource(data:ConstructorData):SourceData;/**\n * Get the default value for a schema field, conditional on the provided data\n * @param field - The configured data field\n * @param data  - The provided data object\n * @returns The default value for the field\n */protected static _getFieldDefaultValue<ConcreteDocumentField extends DocumentField<any>>(field:ConcreteDocumentField,data:object):ConcreteDocumentField extends{default?:undefined}?undefined:ConcreteDocumentField extends{default:(data?:object)=>infer V}?V:ConcreteDocumentField['default'];/**\n * Initialize the instance by copying data from the source object to instance attributes.\n */protected _initialize():void;/**\n * Initialize the value for a given data type\n * @param type  - The type of the data field\n * @param value - The un-initialized value\n * @returns The initialized value\n */protected _initializeType(type:undefined,value:unknown):void;protected _initializeType<Value extends object>(type:typeof Object,value:Value):Value;protected _initializeType<Type extends typeof String|typeof Number|typeof Boolean>(type:Type,value:ReturnType<Type>|Parameters<Type>[0]):ReturnType<Type>;protected _initializeType<Value extends Array<any>|ConstructorParameters<typeof Array>>(type:typeof Array,value:Value):Value extends Array<any>?Value:Array<any>;protected _initializeType<Value extends number|string>(type:typeof Date,value:Value):number;protected _initializeType<Type extends ConstructorOf<Document<any,any>>>(type:Type,value:ConstructorParameters<Type>[0]):InstanceType<Type>;protected _initializeType<Type extends ConstructorOf<AnyDocumentData>>(type:Type,value:ConstructorParameters<Type>[0]):InstanceType<Type>;/**\n * Validate the data contained in the document to check for type and content\n * This function throws an error if data within the document is not valid\n *\n * @param changes  - Only validate the keys of an object that was changed.\n * @param children - Validate the data of child embedded documents? Default is true.\n * @param clean    - Apply field-specific cleaning functions to the provided value.\n * @param replace  - Replace any invalid values with valid defaults? Default is false.\n * @param strict   - If strict, will throw errors for any invalid data. Default is false.\n * @returns An indicator for whether or not the document contains valid data\n */\nvalidate({changes,children,clean,replace,strict}:{changes?:DeepPartial<ConstructorData>;children?:boolean;clean?:boolean;replace?:boolean;strict?:boolean;}):boolean;/**\n * Build and return the error message for a Missing Field\n * @param name  - The named field that is missing\n * @param field - The configured DocumentField from the Schema\n * @returns The error message\n */protected _getMissingFieldErrorMessage(name:string,field:DocumentField<unknown>):string;/**\n * Build and return the error message for an Invalid Field Value\n * @param name  - The named field that is invalid\n * @param field - The configured DocumentField from the Schema\n * @param value - The value that is invalid\n * @returns The error message\n */protected _getInvalidFieldValueErrorMessage(name:string,field:DocumentField<unknown>,value:unknown):string;/**\n * Validate a single field in the data object.\n * Assert that required fields are present and that each value passes it's validator function if one is provided.\n * @param name     - The named field being validated\n * @param field    - The configured DocumentField from the Schema\n * @param value    - The current field value\n * @param children - Validate the data of child embedded documents? Default is true.\n *                   (default: `true`)\n */protected _validateField<Name extends keyof ConcreteDocumentSchema>(name:Name,field:ConcreteDocumentSchema[Name],value:unknown,{children}:{children?:boolean}):void;/**\n * Jointly validate the overall document after each field has been individually validated.\n * Throw an Error if any issue is encountered.\n *\n * @remarks\n * The base implementation doesn't do anything. Supposedly, subclasses can implement their own validation here.\n */protected _validateDocument():void;/**\n * Reset the state of this data instance back to mirror the contained source data, erasing any changes.\n */\nreset():void;/**\n * Update the data by applying a new data object. Data is compared against and merged with the existing data.\n * Updating data which already exists is strict - it must pass validation or else the update is rejected.\n * An object is returned which documents the set of changes which were applied to the original data.\n * @see foundry.utils.mergeObject\n * @param data    - New values with which to update the Data object\n *                  (default: `{}`)\n * @param options - Options which determine how the new data is merged\n *                  (default: `{}`)\n * @returns The changed keys and values which are different than the previous data\n */\nupdate<U>(data?:Expanded<U>extends DeepPartial<ConstructorData>?U:DeepPartial<ConstructorData>,options?:UpdateOptions):Expanded<U>extends DeepPartial<SourceData>?DeepPartial<U>:DeepPartial<SourceData>;/**\n * Update an EmbeddedCollection using an array of provided document data\n * @param collection   - The EmbeddedCollection to update\n * @param documentData - An array of provided Document data\n * @param options      - Additional options which modify how the collection is updated\n *                       (default: `{}`)\n */\nupdateCollection<T extends DocumentConstructor>(collection:EmbeddedCollection<T,this>,documentData:DeepPartial<InstanceType<T>['data']['_source']>[],options?:UpdateOptions):void;/**\n * Copy and transform the DocumentData into a plain object.\n * Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.\n * @param source - Draw values from the underlying data source rather than transformed values\n *                 (default: `true`)\n * @returns The extracted primitive object\n */\ntoObject(source?:true):ReturnType<this['toJSON']>;toObject(source:false):{[Key in keyof ConcreteDocumentSchema as string extends Key?never:Key]:Key extends keyof this?ToObjectFalseType<this[Key]>:undefined;};/**\n * Extract the source data for the DocumentData into a simple object format that can be serialized.\n * @returns The document source data expressed as a plain object\n */\ntoJSON():this['_id']extends string?SourceData&{_id:string}:SourceData;/**\n * Create a DocumentData instance using a provided serialized JSON string.\n * @param json - Serialized document data in string format\n * @returns constructed data instance\n */static fromJSON<ConcreteDocumentData extends AnyDocumentData>(this:ConcreteDocumentData,json:string):ConcreteDocumentData;}interface UpdateOptions{diff?:boolean;recursive?:boolean;insertValues?:boolean;insertKeys?:boolean;enforceTypes?:boolean;}export default DocumentData;export type AnyDocumentData=DocumentData<any,any,any,any,any>;"
    ]
  