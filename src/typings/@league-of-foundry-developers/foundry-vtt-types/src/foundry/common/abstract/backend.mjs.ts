
    export default [
      "@league-of-foundry-developers\\foundry-vtt-types\\src\\foundry\\common\\abstract\\backend.mjs.d.ts",
      "import{BaseUser}from'../documents.mjs';import{AnyDocumentData}from'./data.mjs';import Document from'./document.mjs';/**\n * An interface shared by both the client and server-side which defines how creation, update, and deletion operations are transacted.\n */declare abstract class DatabaseBackend{/**\n * Retrieve Documents based on provided query parameters\n * @param documentClass - The Document definition\n * @param request       - The requested operation\n * @param user          - The requesting User\n * @returns The created Document instances\n */get<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):T[];/**\n * Validate the arguments passed to the get operation\n * @param query   - A document search query to execute\n *                  (default: `{}`)\n * @param options - Operation options\n *                  (default: `{}`)\n * @param pack    - A Compendium pack identifier\n */protected _getArgs({query,options,pack}?:Request):{query:object;options:RequestOptions;pack?:string};/**\n * Get primary Document instances\n */protected abstract _getDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,query:Request,options:RequestOptions,user:BaseUser):Promise<T[]>;/**\n * Get embedded Document instances\n */protected abstract _getEmbeddedDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,parent:T extends Document<any,infer U>?U:never,query:Request,options:RequestOptions,user:BaseUser):Promise<T[]>;/**\n * Get the parent Document (if any) associated with a request\n * @param request - The requested operation\n * @returns The parent Document, or null\n *\n * @remarks Actually, this returns `undefined` if  there is no parent, the JSDoc is incorrect.\n */protected _getParent(request:Request):Promise<Document<any,any>|undefined>;/**\n * Perform document creation operations\n * @param documentClass - The Document definition\n * @param request       - The requested operation\n * @param user          - The requesting User\n * @returns The created Document instances\n */\ncreate<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Validate the arguments passed to the create operation\n * @param data    - An array of document data\n *                  (default: `[]`)\n * @param options - Operation options\n *                  (default: `{}`)\n * @param pack    - A Compendium pack identifier\n */protected _createArgs({data,options,pack}?:Request):{data:AnyDocumentData[];options:RequestOptions;pack?:string;};/**\n * Create primary Document instances\n */protected abstract _createDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Create embedded Document instances\n */protected abstract _createEmbeddedDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,parent:T extends Document<any,infer U>?U:never,request:Request,user:BaseUser):Promise<T[]>;/**\n * Perform document update operations\n * @param documentClass - The Document definition\n * @param request       - The requested operation\n * @param user          - The requesting User\n * @returns The updated Document instances\n */\nupdate<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Validate the arguments passed to the update operation\n * @param updates - An array of document data\n *                  (default: `[]`)\n * @param options - Operation options\n *                  (default: `{}`)\n * @param pack    - A Compendium pack identifier\n */protected _updateArgs({updates,options,pack}?:Request):{updates:AnyDocumentData[];options:RequestOptions;pack?:string;};/**\n * Update primary Document instances\n */protected abstract _updateDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Update embedded Document instances\n */protected abstract _updateEmbeddedDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,parent:T extends Document<any,infer U>?U:never,request:Request,user:BaseUser):Promise<T[]>;/**\n * Perform document deletion operations\n * @param documentClass - The Document definition\n * @param request       - The requested operation\n * @param user          - The requesting User\n * @returns The deleted Document instances\n */delete<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Validate the arguments passed to the delete operation\n * @param request - The requested operation\n * @param ids     - An array of document ids\n *                  (default: `[]`)\n * @param options - Operation options\n *                  (default: `{}`)\n * @param pack    - A Compendium pack identifier\n */protected _deleteArgs({ids,options,pack}?:Request):{ids:string[];options:RequestOptions;pack?:string};/**\n * Delete primary Document instances\n */protected abstract _deleteDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,request:Request,user:BaseUser):Promise<T[]>;/**\n * Delete embedded Document instances\n */protected abstract _deleteEmbeddedDocuments<T extends Document<any,any>>(documentClass:ConstructorOf<T>,parent:T extends Document<any,infer U>?U:never,request:Request,user:BaseUser):Promise<T[]>;/**\n * Describe the scopes which are suitable as the namespace for a flag key\n */protected getFlagScopes():string[];/**\n * Describe the scopes which are suitable as the namespace for a flag key\n */protected getCompendiumScopes():string[];/**\n * Provide the Logger implementation that should be used for database operations\n */protected _getLogger():Console;/**\n * Log a database operation for an embedded document, capturing the action taken and relevant IDs\n * @param action    - The action performed\n * @param type      - The document type\n * @param documents - The documents modified\n * @param info      - The logging level\n * @param parent    - A parent document\n * @param pack      - A compendium pack within which the operation occurred\n */protected _logOperation(action:string,type:string,documents:Document<any,any>[],{parent,pack,level}?:{parent?:Document<any,any>;pack?:string;level?:string}):void;/**\n * Construct a standardized error message given the context of an attempted operation\n */protected _logError(user:BaseUser,action:string,subject:Document<any,any>|string,{parent,pack}?:{parent?:Document<any,any>;pack?:string}):string;/**\n * Determine a string suffix for a log message based on the parent and/or compendium context.\n */protected _logContext({parent,pack}?:{parent?:Document<any,any>;pack?:string}):string;}interface Request{data?:AnyDocumentData[];updates?:AnyDocumentData[];ids?:string[];parent?:Document<any,any>;query?:object|IdQuery|SceneIdUserQuery;options?:RequestOptions;pack?:string;}export interface IdQuery{_id:string;}export interface SceneIdUserQuery{sceneId:string;user:string;}export interface RequestOptions{index?:boolean;broadcast?:boolean;temporary?:boolean;nohook?:boolean;[key:string]:unknown;}export default DatabaseBackend;"
    ]
  